; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\rtc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\rtc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 --omf_browse=.\objects\rtc.crf Libraries\StdDriver\src\rtc.c]
                          THUMB

                          AREA ||i.RTC_32KCalibration||, CODE, READONLY, ALIGN=2

                  RTC_32KCalibration PROC
;;;109      */
;;;110    void RTC_32KCalibration(int32_t i32FrequencyX100)
000000  b570              PUSH     {r4-r6,lr}
;;;111    {
;;;112        int32_t i32RegInt, i32RegFra;
;;;113    
;;;114        /* Compute integer and fraction for RTC FCR register */
;;;115        i32RegInt = (i32FrequencyX100 / 100) - RTC_FCR_REFERENCE;
000002  2164              MOVS     r1,#0x64
000004  f7fffffe          BL       __aeabi_idivmod
000008  4a0b              LDR      r2,|L1.56|
00000a  1884              ADDS     r4,r0,r2
;;;116        i32RegFra = (((i32FrequencyX100 % 100)) * 60) / 100;
00000c  203c              MOVS     r0,#0x3c
00000e  4348              MULS     r0,r1,r0
000010  2164              MOVS     r1,#0x64
000012  f7fffffe          BL       __aeabi_idivmod
000016  4605              MOV      r5,r0
;;;117    
;;;118        /* Judge Integer part is reasonable */
;;;119        if((i32RegInt < 0) | (i32RegInt > 15))
000018  0fe0              LSRS     r0,r4,#31
00001a  2c0f              CMP      r4,#0xf
00001c  dd01              BLE      |L1.34|
00001e  2101              MOVS     r1,#1
000020  e000              B        |L1.36|
                  |L1.34|
000022  2100              MOVS     r1,#0
                  |L1.36|
000024  4308              ORRS     r0,r0,r1
000026  d105              BNE      |L1.52|
;;;120        {
;;;121            return ;
;;;122        }
;;;123    
;;;124        RTC_WaitAccessEnable();
000028  f7fffffe          BL       RTC_WaitAccessEnable
;;;125        RTC->FCR = (uint32_t)((i32RegInt << 8) | i32RegFra);
00002c  0220              LSLS     r0,r4,#8
00002e  4903              LDR      r1,|L1.60|
000030  4328              ORRS     r0,r0,r5
000032  6088              STR      r0,[r1,#8]
                  |L1.52|
;;;126    }
000034  bd70              POP      {r4-r6,pc}
;;;127    
                          ENDP

000036  0000              DCW      0x0000
                  |L1.56|
                          DCD      0xffff8007
                  |L1.60|
                          DCD      0x40008000

                          AREA ||i.RTC_Close||, CODE, READONLY, ALIGN=2

                  RTC_Close PROC
;;;95       */
;;;96     void RTC_Close(void)
000000  4802              LDR      r0,|L2.12|
;;;97     {
;;;98         CLK->APBCLK &= ~CLK_APBCLK_RTC_EN_Msk;
000002  6881              LDR      r1,[r0,#8]
000004  2202              MOVS     r2,#2
000006  4391              BICS     r1,r1,r2
000008  6081              STR      r1,[r0,#8]
;;;99     }
00000a  4770              BX       lr
;;;100    
                          ENDP

                  |L2.12|
                          DCD      0x50000200

                          AREA ||i.RTC_DisableInt||, CODE, READONLY, ALIGN=2

                  RTC_DisableInt PROC
;;;687      */
;;;688    void RTC_DisableInt(uint32_t u32IntFlagMask)
000000  490e              LDR      r1,|L3.60|
;;;689    {
;;;690        if(u32IntFlagMask & RTC_RIER_TIER_Msk)
000002  0782              LSLS     r2,r0,#30
000004  d506              BPL      |L3.20|
;;;691        {
;;;692            RTC->RIER &= ~RTC_RIER_TIER_Msk;
000006  6a8b              LDR      r3,[r1,#0x28]
000008  2202              MOVS     r2,#2
00000a  4393              BICS     r3,r3,r2
00000c  628b              STR      r3,[r1,#0x28]
;;;693            RTC->RIIR |= RTC_RIIR_TIF_Msk;
00000e  6acb              LDR      r3,[r1,#0x2c]
000010  4313              ORRS     r3,r3,r2
000012  62cb              STR      r3,[r1,#0x2c]
                  |L3.20|
;;;694        }
;;;695    
;;;696        if(u32IntFlagMask & RTC_RIER_AIER_Msk)
000014  07c2              LSLS     r2,r0,#31
000016  d007              BEQ      |L3.40|
;;;697        {
;;;698            RTC->RIER &= ~RTC_RIER_AIER_Msk;
000018  6a8a              LDR      r2,[r1,#0x28]
00001a  0852              LSRS     r2,r2,#1
00001c  0052              LSLS     r2,r2,#1
00001e  628a              STR      r2,[r1,#0x28]
;;;699            RTC->RIIR |= RTC_RIIR_AIF_Msk;
000020  6aca              LDR      r2,[r1,#0x2c]
000022  2301              MOVS     r3,#1
000024  431a              ORRS     r2,r2,r3
000026  62ca              STR      r2,[r1,#0x2c]
                  |L3.40|
;;;700        }
;;;701    
;;;702        if(u32IntFlagMask & RTC_RIER_SNOOPIER_Msk)
000028  0740              LSLS     r0,r0,#29
00002a  d506              BPL      |L3.58|
;;;703        {
;;;704            RTC->RIER &= ~RTC_RIER_SNOOPIER_Msk;
00002c  6a8a              LDR      r2,[r1,#0x28]
00002e  2004              MOVS     r0,#4
000030  4382              BICS     r2,r2,r0
000032  628a              STR      r2,[r1,#0x28]
;;;705            RTC->RIIR |= RTC_RIIR_SNOOPIF_Msk;
000034  6aca              LDR      r2,[r1,#0x2c]
000036  4302              ORRS     r2,r2,r0
000038  62ca              STR      r2,[r1,#0x2c]
                  |L3.58|
;;;706        }
;;;707    }
00003a  4770              BX       lr
;;;708    
                          ENDP

                  |L3.60|
                          DCD      0x40008000

                          AREA ||i.RTC_DisableSnooperDetection||, CODE, READONLY, ALIGN=2

                  RTC_DisableSnooperDetection PROC
;;;771      */
;;;772    void RTC_DisableSnooperDetection(void)
000000  b510              PUSH     {r4,lr}
;;;773    {
;;;774        RTC_WaitAccessEnable();
000002  f7fffffe          BL       RTC_WaitAccessEnable
;;;775    
;;;776        RTC->SPRCTL &= ~RTC_SPRCTL_SNOOPEN_Msk;
000006  4803              LDR      r0,|L4.20|
000008  6bc1              LDR      r1,[r0,#0x3c]
00000a  0849              LSRS     r1,r1,#1
00000c  0049              LSLS     r1,r1,#1
00000e  63c1              STR      r1,[r0,#0x3c]
;;;777    }
000010  bd10              POP      {r4,pc}
;;;778    
                          ENDP

000012  0000              DCW      0x0000
                  |L4.20|
                          DCD      0x40008000

                          AREA ||i.RTC_DisableSpareRegister||, CODE, READONLY, ALIGN=2

                  RTC_DisableSpareRegister PROC
;;;735      */
;;;736    void RTC_DisableSpareRegister(void)
000000  b510              PUSH     {r4,lr}
;;;737    {
;;;738        RTC_WaitAccessEnable();
000002  f7fffffe          BL       RTC_WaitAccessEnable
;;;739    
;;;740        RTC->SPRCTL &= ~RTC_SPRCTL_SPREN_Msk;
000006  4803              LDR      r0,|L5.20|
000008  6bc1              LDR      r1,[r0,#0x3c]
00000a  2204              MOVS     r2,#4
00000c  4391              BICS     r1,r1,r2
00000e  63c1              STR      r1,[r0,#0x3c]
;;;741    }
000010  bd10              POP      {r4,pc}
;;;742    
                          ENDP

000012  0000              DCW      0x0000
                  |L5.20|
                          DCD      0x40008000

                          AREA ||i.RTC_EnableInt||, CODE, READONLY, ALIGN=2

                  RTC_EnableInt PROC
;;;670      */
;;;671    void RTC_EnableInt(uint32_t u32IntFlagMask)
000000  4902              LDR      r1,|L6.12|
;;;672    {
;;;673        RTC->RIER |= u32IntFlagMask;
000002  6a8a              LDR      r2,[r1,#0x28]
000004  4302              ORRS     r2,r2,r0
000006  628a              STR      r2,[r1,#0x28]
;;;674    }
000008  4770              BX       lr
;;;675    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40008000

                          AREA ||i.RTC_EnableSnooperDetection||, CODE, READONLY, ALIGN=2

                  RTC_EnableSnooperDetection PROC
;;;755      */
;;;756    void RTC_EnableSnooperDetection(uint32_t u32PinCondition)
000000  b510              PUSH     {r4,lr}
;;;757    {
000002  4604              MOV      r4,r0
;;;758        RTC_WaitAccessEnable();
000004  f7fffffe          BL       RTC_WaitAccessEnable
;;;759    
;;;760        RTC->SPRCTL = ((RTC->SPRCTL & ~RTC_SNOOPER_DETECT_Msk) | u32PinCondition) | RTC_SPRCTL_SNOOPEN_Msk;
000008  4a04              LDR      r2,|L7.28|
00000a  6bd1              LDR      r1,[r2,#0x3c]
00000c  200a              MOVS     r0,#0xa
00000e  4381              BICS     r1,r1,r0
000010  4321              ORRS     r1,r1,r4
000012  2001              MOVS     r0,#1
000014  4301              ORRS     r1,r1,r0
000016  63d1              STR      r1,[r2,#0x3c]
;;;761    }
000018  bd10              POP      {r4,pc}
;;;762    
                          ENDP

00001a  0000              DCW      0x0000
                  |L7.28|
                          DCD      0x40008000

                          AREA ||i.RTC_EnableSpareRegister||, CODE, READONLY, ALIGN=2

                  RTC_EnableSpareRegister PROC
;;;717      */
;;;718    void RTC_EnableSpareRegister(void)
000000  b510              PUSH     {r4,lr}
;;;719    {
;;;720        RTC_WaitAccessEnable();
000002  f7fffffe          BL       RTC_WaitAccessEnable
;;;721    
;;;722        RTC->SPRCTL |= RTC_SPRCTL_SPREN_Msk;
000006  4804              LDR      r0,|L8.24|
000008  6bc1              LDR      r1,[r0,#0x3c]
00000a  2204              MOVS     r2,#4
00000c  4311              ORRS     r1,r1,r2
00000e  63c1              STR      r1,[r0,#0x3c]
                  |L8.16|
;;;723        
;;;724        while(!(RTC->SPRCTL & RTC_SPRCTL_SPRRDY_Msk));
000010  6bc1              LDR      r1,[r0,#0x3c]
000012  0609              LSLS     r1,r1,#24
000014  d5fc              BPL      |L8.16|
;;;725    }
000016  bd10              POP      {r4,pc}
;;;726    
                          ENDP

                  |L8.24|
                          DCD      0x40008000

                          AREA ||i.RTC_GetAlarmDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_GetAlarmDateAndTime PROC
;;;240      */
;;;241    void RTC_GetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;242    {
;;;243        uint32_t u32Tmp;
;;;244    
;;;245        sPt->u32TimeScale = RTC->TSSR & RTC_TSSR_24H_12H_Msk;   /* 12/24-hour */
000002  4e3c              LDR      r6,|L9.244|
000004  4604              MOV      r4,r0                 ;242
000006  6970              LDR      r0,[r6,#0x14]
000008  07c0              LSLS     r0,r0,#31
00000a  0fc0              LSRS     r0,r0,#31
;;;246        sPt->u32DayOfWeek = RTC->DWR & RTC_DWR_DWR_Msk;         /* Day of the week */
00000c  61e0              STR      r0,[r4,#0x1c]
00000e  69b0              LDR      r0,[r6,#0x18]
000010  0740              LSLS     r0,r0,#29
000012  0f40              LSRS     r0,r0,#29
;;;247    
;;;248        /* Get alarm [Date digit] data */
;;;249        RTC_WaitAccessEnable();
000014  60e0              STR      r0,[r4,#0xc]
000016  f7fffffe          BL       RTC_WaitAccessEnable
;;;250        g_u32hiYear  = (RTC->CAR & RTC_CAR_10YEAR_Msk) >> RTC_CAR_10YEAR_Pos;
00001a  6a30              LDR      r0,[r6,#0x20]
00001c  4d36              LDR      r5,|L9.248|
;;;251        g_u32loYear  = (RTC->CAR & RTC_CAR_1YEAR_Msk)  >> RTC_CAR_1YEAR_Pos;
;;;252        g_u32hiMonth = (RTC->CAR & RTC_CAR_10MON_Msk)  >> RTC_CAR_10MON_Pos;
;;;253        g_u32loMonth = (RTC->CAR & RTC_CAR_1MON_Msk)   >> RTC_CAR_1MON_Pos;
;;;254        g_u32hiDay   = (RTC->CAR & RTC_CAR_10DAY_Msk)  >> RTC_CAR_10DAY_Pos;
;;;255        g_u32loDay   = (RTC->CAR & RTC_CAR_1DAY_Msk);
;;;256    
;;;257        /* Get alarm [Time digit] data */
;;;258        RTC_WaitAccessEnable();
;;;259        g_u32hiHour = (RTC->TAR & RTC_TAR_10HR_Msk)  >> RTC_TAR_10HR_Pos;
;;;260        g_u32loHour = (RTC->TAR & RTC_TAR_1HR_Msk)   >> RTC_TAR_1HR_Pos;
;;;261        g_u32hiMin  = (RTC->TAR & RTC_TAR_10MIN_Msk) >> RTC_TAR_10MIN_Pos;
;;;262        g_u32loMin  = (RTC->TAR & RTC_TAR_1MIN_Msk)  >> RTC_TAR_1MIN_Pos;
;;;263        g_u32hiSec  = (RTC->TAR & RTC_TAR_10SEC_Msk) >> RTC_TAR_10SEC_Pos;
;;;264        g_u32loSec  = (RTC->TAR & RTC_TAR_1SEC_Msk);
;;;265    
;;;266        /* Compute to 20XX year */
;;;267        u32Tmp  = (g_u32hiYear * 10);
;;;268        u32Tmp += g_u32loYear;
;;;269        sPt->u32Year = u32Tmp + RTC_YEAR2000;
;;;270    
;;;271        /* Compute 0~12 month */
;;;272        u32Tmp = (g_u32hiMonth * 10);
;;;273        sPt->u32Month = u32Tmp + g_u32loMonth;
;;;274    
;;;275        /* Compute 0~31 day */
;;;276        u32Tmp = (g_u32hiDay * 10);
;;;277        sPt->u32Day = u32Tmp + g_u32loDay;
;;;278    
;;;279        /* Compute 12/24 hour */
;;;280        if(sPt->u32TimeScale == RTC_CLOCK_12)
;;;281        {
;;;282            u32Tmp  = (g_u32hiHour * 10);
;;;283            u32Tmp += g_u32loHour;
;;;284            sPt->u32Hour = u32Tmp;          /* AM: 1~12. PM: 21~32. */
;;;285    
;;;286            if(sPt->u32Hour >= 21)
;;;287            {
;;;288                sPt->u32AmPm  = RTC_PM;
;;;289                sPt->u32Hour -= 20;
;;;290            }
;;;291            else
;;;292            {
;;;293                sPt->u32AmPm = RTC_AM;
;;;294            }
;;;295    
;;;296            u32Tmp  = (g_u32hiMin * 10);
;;;297            u32Tmp += g_u32loMin;
;;;298            sPt->u32Minute = u32Tmp;
;;;299    
;;;300            u32Tmp  = (g_u32hiSec * 10);
;;;301            u32Tmp += g_u32loSec;
;;;302            sPt->u32Second = u32Tmp;
;;;303    
;;;304        }
;;;305        else
;;;306        {
;;;307            u32Tmp  = (g_u32hiHour * 10);
;;;308            u32Tmp +=  g_u32loHour;
;;;309            sPt->u32Hour = u32Tmp;
;;;310    
;;;311            u32Tmp  = (g_u32hiMin * 10);
;;;312            u32Tmp += g_u32loMin;
;;;313            sPt->u32Minute = u32Tmp;
;;;314    
;;;315            u32Tmp  = (g_u32hiSec * 10);
;;;316            u32Tmp += g_u32loSec;
;;;317            sPt->u32Second = u32Tmp;
;;;318        }
;;;319    }
00001e  0200              LSLS     r0,r0,#8
000020  0f00              LSRS     r0,r0,#28
000022  6028              STR      r0,[r5,#0]            ;250  ; g_u32hiYear
000024  6a30              LDR      r0,[r6,#0x20]         ;251
000026  0300              LSLS     r0,r0,#12
000028  0f00              LSRS     r0,r0,#28
00002a  6068              STR      r0,[r5,#4]            ;251  ; g_u32loYear
00002c  6a30              LDR      r0,[r6,#0x20]         ;252
00002e  2701              MOVS     r7,#1
000030  04c0              LSLS     r0,r0,#19
000032  0fc0              LSRS     r0,r0,#31
000034  60a8              STR      r0,[r5,#8]            ;252  ; g_u32hiMonth
000036  6a30              LDR      r0,[r6,#0x20]         ;253
000038  0500              LSLS     r0,r0,#20
00003a  0f00              LSRS     r0,r0,#28
00003c  60e8              STR      r0,[r5,#0xc]          ;253  ; g_u32loMonth
00003e  6a30              LDR      r0,[r6,#0x20]         ;254
000040  0680              LSLS     r0,r0,#26
000042  0f80              LSRS     r0,r0,#30
000044  6128              STR      r0,[r5,#0x10]         ;254  ; g_u32hiDay
000046  6a30              LDR      r0,[r6,#0x20]         ;255
000048  0700              LSLS     r0,r0,#28             ;255
00004a  0f00              LSRS     r0,r0,#28             ;255
00004c  6168              STR      r0,[r5,#0x14]         ;255  ; g_u32loDay
00004e  f7fffffe          BL       RTC_WaitAccessEnable
000052  69f0              LDR      r0,[r6,#0x1c]         ;259
000054  0280              LSLS     r0,r0,#10
000056  0f80              LSRS     r0,r0,#30
000058  61a8              STR      r0,[r5,#0x18]         ;259  ; g_u32hiHour
00005a  69f0              LDR      r0,[r6,#0x1c]         ;260
00005c  0300              LSLS     r0,r0,#12
00005e  0f00              LSRS     r0,r0,#28
000060  61e8              STR      r0,[r5,#0x1c]         ;260  ; g_u32loHour
000062  69f0              LDR      r0,[r6,#0x1c]         ;261
000064  0440              LSLS     r0,r0,#17
000066  0f40              LSRS     r0,r0,#29
000068  6228              STR      r0,[r5,#0x20]         ;261  ; g_u32hiMin
00006a  69f0              LDR      r0,[r6,#0x1c]         ;262
00006c  0500              LSLS     r0,r0,#20
00006e  0f00              LSRS     r0,r0,#28
000070  6268              STR      r0,[r5,#0x24]         ;262  ; g_u32loMin
000072  69f0              LDR      r0,[r6,#0x1c]         ;263
000074  0640              LSLS     r0,r0,#25
000076  0f40              LSRS     r0,r0,#29
000078  62a8              STR      r0,[r5,#0x28]         ;263  ; g_u32hiSec
00007a  69f0              LDR      r0,[r6,#0x1c]         ;264
00007c  0700              LSLS     r0,r0,#28             ;264
00007e  0f00              LSRS     r0,r0,#28             ;264
000080  62e8              STR      r0,[r5,#0x2c]         ;264  ; g_u32loSec
000082  6828              LDR      r0,[r5,#0]            ;267  ; g_u32hiYear
000084  210a              MOVS     r1,#0xa               ;267
000086  4348              MULS     r0,r1,r0              ;267
000088  6869              LDR      r1,[r5,#4]            ;268  ; g_u32loYear
00008a  1840              ADDS     r0,r0,r1              ;268
00008c  217d              MOVS     r1,#0x7d              ;269
00008e  0109              LSLS     r1,r1,#4              ;269
000090  1840              ADDS     r0,r0,r1              ;269
000092  6020              STR      r0,[r4,#0]            ;272
000094  68a8              LDR      r0,[r5,#8]            ;272  ; g_u32hiMonth
000096  210a              MOVS     r1,#0xa               ;272
000098  4348              MULS     r0,r1,r0              ;272
00009a  68e9              LDR      r1,[r5,#0xc]          ;273  ; g_u32loMonth
00009c  1840              ADDS     r0,r0,r1              ;273
00009e  6060              STR      r0,[r4,#4]            ;276
0000a0  6928              LDR      r0,[r5,#0x10]         ;276  ; g_u32hiDay
0000a2  210a              MOVS     r1,#0xa               ;276
0000a4  4348              MULS     r0,r1,r0              ;276
0000a6  6969              LDR      r1,[r5,#0x14]         ;277  ; g_u32loDay
0000a8  1840              ADDS     r0,r0,r1              ;277
0000aa  60a0              STR      r0,[r4,#8]            ;280
0000ac  69e0              LDR      r0,[r4,#0x1c]         ;280
0000ae  2800              CMP      r0,#0                 ;280
0000b0  69a8              LDR      r0,[r5,#0x18]         ;307  ; g_u32hiHour
0000b2  d004              BEQ      |L9.190|
0000b4  210a              MOVS     r1,#0xa               ;307
0000b6  4348              MULS     r0,r1,r0              ;307
0000b8  69e9              LDR      r1,[r5,#0x1c]         ;308  ; g_u32loHour
0000ba  1840              ADDS     r0,r0,r1              ;308
0000bc  e009              B        |L9.210|
                  |L9.190|
0000be  210a              MOVS     r1,#0xa               ;282
0000c0  4348              MULS     r0,r1,r0              ;282
0000c2  69e9              LDR      r1,[r5,#0x1c]         ;283  ; g_u32loHour
0000c4  1840              ADDS     r0,r0,r1              ;283
0000c6  6120              STR      r0,[r4,#0x10]         ;286
0000c8  2815              CMP      r0,#0x15              ;286
0000ca  d304              BCC      |L9.214|
0000cc  2102              MOVS     r1,#2                 ;288
0000ce  3814              SUBS     r0,r0,#0x14           ;288
0000d0  6221              STR      r1,[r4,#0x20]         ;288
                  |L9.210|
0000d2  6120              STR      r0,[r4,#0x10]         ;309
0000d4  e000              B        |L9.216|
                  |L9.214|
0000d6  6227              STR      r7,[r4,#0x20]         ;293
                  |L9.216|
0000d8  6a28              LDR      r0,[r5,#0x20]         ;296  ; g_u32hiMin
0000da  210a              MOVS     r1,#0xa               ;296
0000dc  4348              MULS     r0,r1,r0              ;296
0000de  6a69              LDR      r1,[r5,#0x24]         ;297  ; g_u32loMin
0000e0  1840              ADDS     r0,r0,r1              ;297
0000e2  6160              STR      r0,[r4,#0x14]         ;300
0000e4  6aa8              LDR      r0,[r5,#0x28]         ;300  ; g_u32hiSec
0000e6  210a              MOVS     r1,#0xa               ;300
0000e8  4348              MULS     r0,r1,r0              ;300
0000ea  6ae9              LDR      r1,[r5,#0x2c]         ;301  ; g_u32loSec
0000ec  1840              ADDS     r0,r0,r1              ;301
0000ee  61a0              STR      r0,[r4,#0x18]         ;302
0000f0  bdf8              POP      {r3-r7,pc}
;;;320    
                          ENDP

0000f2  0000              DCW      0x0000
                  |L9.244|
                          DCD      0x40008000
                  |L9.248|
                          DCD      ||.data||

                          AREA ||i.RTC_GetDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_GetDateAndTime PROC
;;;145      */
;;;146    void RTC_GetDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b530              PUSH     {r4,r5,lr}
;;;147    {
;;;148        uint32_t u32Tmp;
;;;149    
;;;150        sPt->u32TimeScale = RTC->TSSR & RTC_TSSR_24H_12H_Msk;   /* 12/24-hour */
000002  4a39              LDR      r2,|L10.232|
000004  6951              LDR      r1,[r2,#0x14]
000006  07cb              LSLS     r3,r1,#31
000008  0fdb              LSRS     r3,r3,#31
;;;151        sPt->u32DayOfWeek = RTC->DWR & RTC_DWR_DWR_Msk;         /* Day of the week */
00000a  61c3              STR      r3,[r0,#0x1c]
00000c  6991              LDR      r1,[r2,#0x18]
00000e  0749              LSLS     r1,r1,#29
000010  0f49              LSRS     r1,r1,#29
;;;152    
;;;153        /* Get [Date digit] data */
;;;154        g_u32hiYear  = (RTC->CLR & RTC_CLR_10YEAR_Msk) >> RTC_CLR_10YEAR_Pos;
000012  60c1              STR      r1,[r0,#0xc]
000014  6911              LDR      r1,[r2,#0x10]
;;;155        g_u32loYear  = (RTC->CLR & RTC_CLR_1YEAR_Msk) >> RTC_CLR_1YEAR_Pos;
;;;156        g_u32hiMonth = (RTC->CLR & RTC_CLR_10MON_Msk) >> RTC_CLR_10MON_Pos;
;;;157        g_u32loMonth = (RTC->CLR & RTC_CLR_1MON_Msk) >> RTC_CLR_1MON_Pos;
;;;158        g_u32hiDay   = (RTC->CLR & RTC_CLR_10DAY_Msk) >> RTC_CLR_10DAY_Pos;
;;;159        g_u32loDay   = (RTC->CLR & RTC_CLR_1DAY_Msk);
;;;160    
;;;161        /* Get [Time digit] data */
;;;162        g_u32hiHour = (RTC->TLR & RTC_TLR_10HR_Msk) >> RTC_TLR_10HR_Pos;
;;;163        g_u32loHour = (RTC->TLR & RTC_TLR_1HR_Msk) >> RTC_TLR_1HR_Pos;
;;;164        g_u32hiMin  = (RTC->TLR & RTC_TLR_10MIN_Msk) >> RTC_TLR_10MIN_Pos;
;;;165        g_u32loMin  = (RTC->TLR & RTC_TLR_1MIN_Msk) >> RTC_TLR_1MIN_Pos;
;;;166        g_u32hiSec  = (RTC->TLR & RTC_TLR_10SEC_Msk) >> RTC_TLR_10SEC_Pos;
;;;167        g_u32loSec  = (RTC->TLR & RTC_TLR_1SEC_Msk);
;;;168    
;;;169        /* Compute to 20XX year */
;;;170        u32Tmp  = (g_u32hiYear * 10);
;;;171        u32Tmp += g_u32loYear;
;;;172        sPt->u32Year = u32Tmp + RTC_YEAR2000;
;;;173    
;;;174        /* Compute 0~12 month */
;;;175        u32Tmp = (g_u32hiMonth * 10);
;;;176        sPt->u32Month = u32Tmp + g_u32loMonth;
;;;177    
;;;178        /* Compute 0~31 day */
;;;179        u32Tmp = (g_u32hiDay * 10);
;;;180        sPt->u32Day =  u32Tmp  + g_u32loDay;
;;;181    
;;;182        /* Compute 12/24 hour */
;;;183        if(sPt->u32TimeScale == RTC_CLOCK_12)
;;;184        {
;;;185            u32Tmp = (g_u32hiHour * 10);
;;;186            u32Tmp += g_u32loHour;
;;;187            sPt->u32Hour = u32Tmp;          /* AM: 1~12. PM: 21~32. */
;;;188    
;;;189            if(sPt->u32Hour >= 21)
;;;190            {
;;;191                sPt->u32AmPm  = RTC_PM;
;;;192                sPt->u32Hour -= 20;
;;;193            }
;;;194            else
;;;195            {
;;;196                sPt->u32AmPm = RTC_AM;
;;;197            }
;;;198    
;;;199            u32Tmp  = (g_u32hiMin  * 10);
;;;200            u32Tmp += g_u32loMin;
;;;201            sPt->u32Minute = u32Tmp;
;;;202    
;;;203            u32Tmp  = (g_u32hiSec  * 10);
;;;204            u32Tmp += g_u32loSec;
;;;205            sPt->u32Second = u32Tmp;
;;;206        }
;;;207        else
;;;208        {
;;;209            u32Tmp  = (g_u32hiHour * 10);
;;;210            u32Tmp += g_u32loHour;
;;;211            sPt->u32Hour = u32Tmp;
;;;212    
;;;213            u32Tmp  = (g_u32hiMin * 10);
;;;214            u32Tmp +=  g_u32loMin;
;;;215            sPt->u32Minute = u32Tmp;
;;;216    
;;;217            u32Tmp  = (g_u32hiSec * 10);
;;;218            u32Tmp += g_u32loSec;
;;;219            sPt->u32Second = u32Tmp;
;;;220        }
;;;221    }
000016  0209              LSLS     r1,r1,#8
000018  0f0c              LSRS     r4,r1,#28
00001a  4934              LDR      r1,|L10.236|
00001c  600c              STR      r4,[r1,#0]            ;154  ; g_u32hiYear
00001e  6914              LDR      r4,[r2,#0x10]         ;155
000020  0324              LSLS     r4,r4,#12
000022  0f24              LSRS     r4,r4,#28
000024  604c              STR      r4,[r1,#4]            ;155  ; g_u32loYear
000026  6914              LDR      r4,[r2,#0x10]         ;156
000028  04e5              LSLS     r5,r4,#19
00002a  2401              MOVS     r4,#1
00002c  0fed              LSRS     r5,r5,#31
00002e  608d              STR      r5,[r1,#8]            ;156  ; g_u32hiMonth
000030  6915              LDR      r5,[r2,#0x10]         ;157
000032  052d              LSLS     r5,r5,#20
000034  0f2d              LSRS     r5,r5,#28
000036  60cd              STR      r5,[r1,#0xc]          ;157  ; g_u32loMonth
000038  6915              LDR      r5,[r2,#0x10]         ;158
00003a  06ad              LSLS     r5,r5,#26
00003c  0fad              LSRS     r5,r5,#30
00003e  610d              STR      r5,[r1,#0x10]         ;158  ; g_u32hiDay
000040  6915              LDR      r5,[r2,#0x10]         ;159
000042  072d              LSLS     r5,r5,#28             ;159
000044  0f2d              LSRS     r5,r5,#28             ;159
000046  614d              STR      r5,[r1,#0x14]         ;159  ; g_u32loDay
000048  68d5              LDR      r5,[r2,#0xc]          ;162
00004a  02ad              LSLS     r5,r5,#10
00004c  0fad              LSRS     r5,r5,#30
00004e  618d              STR      r5,[r1,#0x18]         ;162  ; g_u32hiHour
000050  68d5              LDR      r5,[r2,#0xc]          ;163
000052  032d              LSLS     r5,r5,#12
000054  0f2d              LSRS     r5,r5,#28
000056  61cd              STR      r5,[r1,#0x1c]         ;163  ; g_u32loHour
000058  68d5              LDR      r5,[r2,#0xc]          ;164
00005a  046d              LSLS     r5,r5,#17
00005c  0f6d              LSRS     r5,r5,#29
00005e  620d              STR      r5,[r1,#0x20]         ;164  ; g_u32hiMin
000060  68d5              LDR      r5,[r2,#0xc]          ;165
000062  052d              LSLS     r5,r5,#20
000064  0f2d              LSRS     r5,r5,#28
000066  624d              STR      r5,[r1,#0x24]         ;165  ; g_u32loMin
000068  68d5              LDR      r5,[r2,#0xc]          ;166
00006a  066d              LSLS     r5,r5,#25
00006c  0f6d              LSRS     r5,r5,#29
00006e  628d              STR      r5,[r1,#0x28]         ;166  ; g_u32hiSec
000070  68d2              LDR      r2,[r2,#0xc]          ;167
000072  0712              LSLS     r2,r2,#28             ;167
000074  0f12              LSRS     r2,r2,#28             ;167
000076  62ca              STR      r2,[r1,#0x2c]         ;167  ; g_u32loSec
000078  680a              LDR      r2,[r1,#0]            ;170  ; g_u32hiYear
00007a  250a              MOVS     r5,#0xa               ;170
00007c  436a              MULS     r2,r5,r2              ;170
00007e  684d              LDR      r5,[r1,#4]            ;171  ; g_u32loYear
000080  1952              ADDS     r2,r2,r5              ;171
000082  257d              MOVS     r5,#0x7d              ;172
000084  012d              LSLS     r5,r5,#4              ;172
000086  1952              ADDS     r2,r2,r5              ;172
000088  6002              STR      r2,[r0,#0]            ;175
00008a  688a              LDR      r2,[r1,#8]            ;175  ; g_u32hiMonth
00008c  250a              MOVS     r5,#0xa               ;175
00008e  436a              MULS     r2,r5,r2              ;175
000090  68cd              LDR      r5,[r1,#0xc]          ;176  ; g_u32loMonth
000092  1952              ADDS     r2,r2,r5              ;176
000094  6042              STR      r2,[r0,#4]            ;179
000096  690a              LDR      r2,[r1,#0x10]         ;179  ; g_u32hiDay
000098  250a              MOVS     r5,#0xa               ;179
00009a  436a              MULS     r2,r5,r2              ;179
00009c  694d              LDR      r5,[r1,#0x14]         ;180  ; g_u32loDay
00009e  1952              ADDS     r2,r2,r5              ;180
0000a0  6082              STR      r2,[r0,#8]            ;183
0000a2  698a              LDR      r2,[r1,#0x18]         ;209  ; g_u32hiHour
0000a4  2b00              CMP      r3,#0                 ;183
0000a6  d004              BEQ      |L10.178|
0000a8  230a              MOVS     r3,#0xa               ;209
0000aa  435a              MULS     r2,r3,r2              ;209
0000ac  69cb              LDR      r3,[r1,#0x1c]         ;210  ; g_u32loHour
0000ae  18d2              ADDS     r2,r2,r3              ;210
0000b0  e009              B        |L10.198|
                  |L10.178|
0000b2  230a              MOVS     r3,#0xa               ;185
0000b4  435a              MULS     r2,r3,r2              ;185
0000b6  69cb              LDR      r3,[r1,#0x1c]         ;186  ; g_u32loHour
0000b8  18d2              ADDS     r2,r2,r3              ;186
0000ba  6102              STR      r2,[r0,#0x10]         ;189
0000bc  2a15              CMP      r2,#0x15              ;189
0000be  d304              BCC      |L10.202|
0000c0  2302              MOVS     r3,#2                 ;191
0000c2  3a14              SUBS     r2,r2,#0x14           ;191
0000c4  6203              STR      r3,[r0,#0x20]         ;191
                  |L10.198|
0000c6  6102              STR      r2,[r0,#0x10]         ;211
0000c8  e000              B        |L10.204|
                  |L10.202|
0000ca  6204              STR      r4,[r0,#0x20]         ;196
                  |L10.204|
0000cc  6a0a              LDR      r2,[r1,#0x20]         ;199  ; g_u32hiMin
0000ce  230a              MOVS     r3,#0xa               ;199
0000d0  435a              MULS     r2,r3,r2              ;199
0000d2  6a4b              LDR      r3,[r1,#0x24]         ;200  ; g_u32loMin
0000d4  18d2              ADDS     r2,r2,r3              ;200
0000d6  6142              STR      r2,[r0,#0x14]         ;203
0000d8  6a8a              LDR      r2,[r1,#0x28]         ;203  ; g_u32hiSec
0000da  230a              MOVS     r3,#0xa               ;203
0000dc  6ac9              LDR      r1,[r1,#0x2c]         ;204  ; g_u32loSec
0000de  435a              MULS     r2,r3,r2              ;203
0000e0  1851              ADDS     r1,r2,r1              ;204
0000e2  6181              STR      r1,[r0,#0x18]         ;205
0000e4  bd30              POP      {r4,r5,pc}
;;;222    
                          ENDP

0000e6  0000              DCW      0x0000
                  |L10.232|
                          DCD      0x40008000
                  |L10.236|
                          DCD      ||.data||

                          AREA ||i.RTC_GetDayOfWeek||, CODE, READONLY, ALIGN=2

                  RTC_GetDayOfWeek PROC
;;;628      */
;;;629    uint32_t RTC_GetDayOfWeek(void)
000000  4802              LDR      r0,|L11.12|
;;;630    {
;;;631        return (RTC->DWR & RTC_DWR_DWR_Msk);
000002  6980              LDR      r0,[r0,#0x18]
000004  0740              LSLS     r0,r0,#29
000006  0f40              LSRS     r0,r0,#29
;;;632    }
000008  4770              BX       lr
;;;633    
                          ENDP

00000a  0000              DCW      0x0000
                  |L11.12|
                          DCD      0x40008000

                          AREA ||i.RTC_Open||, CODE, READONLY, ALIGN=2

                  RTC_Open PROC
;;;66       */
;;;67     void RTC_Open(S_RTC_TIME_DATA_T *sPt)
000000  b510              PUSH     {r4,lr}
;;;68     {
;;;69         RTC->INIR = RTC_INIT_KEY;
000002  4c0a              LDR      r4,|L12.44|
000004  4908              LDR      r1,|L12.40|
000006  6021              STR      r1,[r4,#0]
;;;70     
;;;71         if(RTC->INIR != 0x1)
000008  6822              LDR      r2,[r4,#0]
00000a  2a01              CMP      r2,#1
00000c  d003              BEQ      |L12.22|
;;;72         {
;;;73             RTC->INIR = RTC_INIT_KEY;
00000e  6021              STR      r1,[r4,#0]
                  |L12.16|
;;;74             while(RTC->INIR != 0x1);
000010  6821              LDR      r1,[r4,#0]
000012  2901              CMP      r1,#1
000014  d1fc              BNE      |L12.16|
                  |L12.22|
;;;75         }
;;;76     
;;;77         if(sPt == NULL)
000016  2800              CMP      r0,#0
000018  d004              BEQ      |L12.36|
;;;78             return ;
;;;79     
;;;80         /* Set RTC date and time */
;;;81         RTC_SetDateAndTime(sPt);
00001a  f7fffffe          BL       RTC_SetDateAndTime
                  |L12.30|
;;;82     
;;;83         /* Waiting for RTC settings stable */
;;;84         while((RTC->AER & RTC_AER_ENF_Msk) == RTC_AER_ENF_Msk);
00001e  6860              LDR      r0,[r4,#4]
000020  03c0              LSLS     r0,r0,#15
000022  d4fc              BMI      |L12.30|
                  |L12.36|
;;;85     }
000024  bd10              POP      {r4,pc}
;;;86     
                          ENDP

000026  0000              DCW      0x0000
                  |L12.40|
                          DCD      0xa5eb1357
                  |L12.44|
                          DCD      0x40008000

                          AREA ||i.RTC_SetAlarmDate||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmDate PROC
;;;551      */
;;;552    void RTC_SetAlarmDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day)
000000  b570              PUSH     {r4-r6,lr}
;;;553    {
000002  4615              MOV      r5,r2
;;;554        uint32_t u32RegCAR;
;;;555    
;;;556        u32RegCAR  = ((u32Year - RTC_YEAR2000) / 10) << 20;
000004  227d              MOVS     r2,#0x7d
000006  460e              MOV      r6,r1                 ;553
000008  0112              LSLS     r2,r2,#4
00000a  210a              MOVS     r1,#0xa
00000c  1a80              SUBS     r0,r0,r2
00000e  f7fffffe          BL       __aeabi_uidivmod
;;;557        u32RegCAR |= (((u32Year - RTC_YEAR2000) % 10) << 16);
000012  040c              LSLS     r4,r1,#16
000014  0500              LSLS     r0,r0,#20             ;556
000016  4304              ORRS     r4,r4,r0
;;;558        u32RegCAR |= ((u32Month / 10) << 12);
000018  210a              MOVS     r1,#0xa
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       __aeabi_uidivmod
000020  0300              LSLS     r0,r0,#12
000022  4320              ORRS     r0,r0,r4
;;;559        u32RegCAR |= ((u32Month % 10) << 8);
000024  020c              LSLS     r4,r1,#8
000026  4304              ORRS     r4,r4,r0
;;;560        u32RegCAR |= ((u32Day   / 10) << 4);
000028  210a              MOVS     r1,#0xa
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       __aeabi_uidivmod
000030  0100              LSLS     r0,r0,#4
000032  4320              ORRS     r0,r0,r4
000034  460c              MOV      r4,r1
;;;561        u32RegCAR |= (u32Day   % 10);
000036  4304              ORRS     r4,r4,r0
;;;562    
;;;563        RTC_WaitAccessEnable();
000038  f7fffffe          BL       RTC_WaitAccessEnable
;;;564    
;;;565        /* Set RTC Alarm Date */
;;;566        RTC->CAR = (uint32_t)u32RegCAR;
00003c  4801              LDR      r0,|L13.68|
00003e  6204              STR      r4,[r0,#0x20]
;;;567    }
000040  bd70              POP      {r4-r6,pc}
;;;568    
                          ENDP

000042  0000              DCW      0x0000
                  |L13.68|
                          DCD      0x40008000

                          AREA ||i.RTC_SetAlarmDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmDateAndTime PROC
;;;411      */
;;;412    void RTC_SetAlarmDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;413    {
000002  0004              MOVS     r4,r0
000004  d040              BEQ      |L14.136|
;;;414        uint32_t u32RegCAR, u32RegTAR;
;;;415    
;;;416        if(sPt == NULL)
;;;417            return ;
;;;418    
;;;419        /*-----------------------------------------------------------------------------------------------------*/
;;;420        /* Set RTC 24/12 hour setting and Day of the Week                                                      */
;;;421        /*-----------------------------------------------------------------------------------------------------*/
;;;422        RTC_WaitAccessEnable();
000006  f7fffffe          BL       RTC_WaitAccessEnable
;;;423        if(sPt->u32TimeScale == RTC_CLOCK_12)
00000a  69e0              LDR      r0,[r4,#0x1c]
;;;424        {
;;;425            RTC->TSSR &= ~RTC_TSSR_24H_12H_Msk;
00000c  4d24              LDR      r5,|L14.160|
00000e  2800              CMP      r0,#0                 ;423
;;;426    
;;;427            /*-------------------------------------------------------------------------------------------------*/
;;;428            /* Important, range of 12-hour PM mode is 21 up to 32                                               */
;;;429            /*-------------------------------------------------------------------------------------------------*/
;;;430            if(sPt->u32AmPm == RTC_PM)
;;;431                sPt->u32Hour += 20;
;;;432        }
;;;433        else
;;;434        {
;;;435            RTC->TSSR |= RTC_TSSR_24H_12H_Msk;
000010  6968              LDR      r0,[r5,#0x14]
000012  d03a              BEQ      |L14.138|
000014  2101              MOVS     r1,#1
000016  4308              ORRS     r0,r0,r1
000018  6168              STR      r0,[r5,#0x14]
                  |L14.26|
;;;436        }
;;;437    
;;;438        /* Set Day of the Week */
;;;439        RTC->DWR = sPt->u32DayOfWeek;
00001a  68e0              LDR      r0,[r4,#0xc]
00001c  61a8              STR      r0,[r5,#0x18]
;;;440    
;;;441        /*-----------------------------------------------------------------------------------------------------*/
;;;442        /* Set RTC Calender and Time Loading                                                                   */
;;;443        /*-----------------------------------------------------------------------------------------------------*/
;;;444        u32RegCAR  = ((sPt->u32Year - RTC_YEAR2000) / 10) << 20;
00001e  207d              MOVS     r0,#0x7d
000020  6821              LDR      r1,[r4,#0]
000022  0100              LSLS     r0,r0,#4
000024  1a08              SUBS     r0,r1,r0
000026  210a              MOVS     r1,#0xa
000028  f7fffffe          BL       __aeabi_uidivmod
;;;445        u32RegCAR |= (((sPt->u32Year - RTC_YEAR2000) % 10) << 16);
00002c  040e              LSLS     r6,r1,#16
00002e  0500              LSLS     r0,r0,#20             ;444
000030  4306              ORRS     r6,r6,r0
;;;446        u32RegCAR |= ((sPt->u32Month  / 10) << 12);
000032  210a              MOVS     r1,#0xa
000034  6860              LDR      r0,[r4,#4]
000036  f7fffffe          BL       __aeabi_uidivmod
00003a  0300              LSLS     r0,r0,#12
00003c  4330              ORRS     r0,r0,r6
;;;447        u32RegCAR |= ((sPt->u32Month  % 10) << 8);
00003e  020e              LSLS     r6,r1,#8
000040  4306              ORRS     r6,r6,r0
;;;448        u32RegCAR |= ((sPt->u32Day    / 10) << 4);
000042  210a              MOVS     r1,#0xa
000044  68a0              LDR      r0,[r4,#8]
000046  f7fffffe          BL       __aeabi_uidivmod
00004a  0100              LSLS     r0,r0,#4
00004c  4330              ORRS     r0,r0,r6
00004e  460e              MOV      r6,r1
;;;449        u32RegCAR |= (sPt->u32Day    % 10);
000050  4306              ORRS     r6,r6,r0
;;;450    
;;;451        u32RegTAR  = ((sPt->u32Hour   / 10) << 20);
000052  210a              MOVS     r1,#0xa
000054  6920              LDR      r0,[r4,#0x10]
000056  f7fffffe          BL       __aeabi_uidivmod
;;;452        u32RegTAR |= ((sPt->u32Hour   % 10) << 16);
00005a  040f              LSLS     r7,r1,#16
00005c  0500              LSLS     r0,r0,#20             ;451
00005e  4307              ORRS     r7,r7,r0
;;;453        u32RegTAR |= ((sPt->u32Minute / 10) << 12);
000060  210a              MOVS     r1,#0xa
000062  6960              LDR      r0,[r4,#0x14]
000064  f7fffffe          BL       __aeabi_uidivmod
000068  0300              LSLS     r0,r0,#12
00006a  4338              ORRS     r0,r0,r7
;;;454        u32RegTAR |= ((sPt->u32Minute % 10) << 8);
00006c  020f              LSLS     r7,r1,#8
00006e  4307              ORRS     r7,r7,r0
;;;455        u32RegTAR |= ((sPt->u32Second / 10) << 4);
000070  210a              MOVS     r1,#0xa
000072  69a0              LDR      r0,[r4,#0x18]
000074  f7fffffe          BL       __aeabi_uidivmod
000078  0100              LSLS     r0,r0,#4
00007a  4338              ORRS     r0,r0,r7
00007c  460c              MOV      r4,r1
;;;456        u32RegTAR |= (sPt->u32Second % 10);
00007e  4304              ORRS     r4,r4,r0
;;;457    
;;;458        RTC_WaitAccessEnable();
000080  f7fffffe          BL       RTC_WaitAccessEnable
;;;459        RTC->CAR = (uint32_t)u32RegCAR;
000084  622e              STR      r6,[r5,#0x20]
;;;460        RTC->TAR = (uint32_t)u32RegTAR;
000086  61ec              STR      r4,[r5,#0x1c]
                  |L14.136|
;;;461    }
000088  bdf8              POP      {r3-r7,pc}
                  |L14.138|
00008a  0840              LSRS     r0,r0,#1              ;425
00008c  0040              LSLS     r0,r0,#1              ;425
00008e  6168              STR      r0,[r5,#0x14]         ;425
000090  6a20              LDR      r0,[r4,#0x20]         ;430
000092  2802              CMP      r0,#2                 ;430
000094  d1c1              BNE      |L14.26|
000096  6920              LDR      r0,[r4,#0x10]         ;431
000098  3014              ADDS     r0,r0,#0x14           ;431
00009a  6120              STR      r0,[r4,#0x10]         ;431
00009c  e7bd              B        |L14.26|
;;;462    
                          ENDP

00009e  0000              DCW      0x0000
                  |L14.160|
                          DCD      0x40008000

                          AREA ||i.RTC_SetAlarmTime||, CODE, READONLY, ALIGN=2

                  RTC_SetAlarmTime PROC
;;;581      */
;;;582    void RTC_SetAlarmTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm)
000000  b5f8              PUSH     {r3-r7,lr}
;;;583    {
000002  460e              MOV      r6,r1
000004  9906              LDR      r1,[sp,#0x18]
000006  001d              MOVS     r5,r3
000008  4614              MOV      r4,r2
00000a  d102              BNE      |L15.18|
;;;584        uint32_t u32RegTAR;
;;;585    
;;;586        /* Important, range of 12-hour PM mode is 21 up to 32 */
;;;587        if((u32TimeMode == RTC_CLOCK_12) && (u32AmPm == RTC_PM))
00000c  2902              CMP      r1,#2
00000e  d100              BNE      |L15.18|
000010  3014              ADDS     r0,r0,#0x14
                  |L15.18|
;;;588            u32Hour += 20;
;;;589    
;;;590        u32RegTAR  = ((u32Hour   / 10) << 20);
000012  210a              MOVS     r1,#0xa
000014  f7fffffe          BL       __aeabi_uidivmod
;;;591        u32RegTAR |= ((u32Hour   % 10) << 16);
000018  040f              LSLS     r7,r1,#16
00001a  0500              LSLS     r0,r0,#20             ;590
00001c  4307              ORRS     r7,r7,r0
;;;592        u32RegTAR |= ((u32Minute / 10) << 12);
00001e  210a              MOVS     r1,#0xa
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       __aeabi_uidivmod
000026  0300              LSLS     r0,r0,#12
;;;593        u32RegTAR |= ((u32Minute % 10) << 8);
000028  020e              LSLS     r6,r1,#8
00002a  4338              ORRS     r0,r0,r7              ;592
00002c  4306              ORRS     r6,r6,r0
;;;594        u32RegTAR |= ((u32Second / 10) << 4);
00002e  210a              MOVS     r1,#0xa
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       __aeabi_uidivmod
000036  0100              LSLS     r0,r0,#4
000038  4330              ORRS     r0,r0,r6
;;;595        u32RegTAR |= (u32Second % 10);
00003a  4301              ORRS     r1,r1,r0
00003c  460c              MOV      r4,r1
;;;596    
;;;597        /*-----------------------------------------------------------------------------------------------------*/
;;;598        /* Set RTC 24/12 hour setting and Day of the Week                                                      */
;;;599        /*-----------------------------------------------------------------------------------------------------*/
;;;600        RTC_WaitAccessEnable();
00003e  f7fffffe          BL       RTC_WaitAccessEnable
;;;601        if(u32TimeMode == RTC_CLOCK_12)
;;;602        {
;;;603            RTC->TSSR &= ~RTC_TSSR_24H_12H_Msk;
000042  4806              LDR      r0,|L15.92|
000044  2d00              CMP      r5,#0                 ;601
;;;604        }
;;;605        else
;;;606        {
;;;607            RTC->TSSR |= RTC_TSSR_24H_12H_Msk;
000046  6941              LDR      r1,[r0,#0x14]
000048  d004              BEQ      |L15.84|
00004a  2201              MOVS     r2,#1
00004c  4311              ORRS     r1,r1,r2
                  |L15.78|
00004e  6141              STR      r1,[r0,#0x14]
;;;608        }
;;;609    
;;;610        /* Set RTC Alarm Time */
;;;611        RTC->TAR = (uint32_t)u32RegTAR;
000050  61c4              STR      r4,[r0,#0x1c]
;;;612    }
000052  bdf8              POP      {r3-r7,pc}
                  |L15.84|
000054  0849              LSRS     r1,r1,#1              ;603
000056  0049              LSLS     r1,r1,#1              ;603
000058  e7f9              B        |L15.78|
;;;613    
                          ENDP

00005a  0000              DCW      0x0000
                  |L15.92|
                          DCD      0x40008000

                          AREA ||i.RTC_SetDate||, CODE, READONLY, ALIGN=2

                  RTC_SetDate PROC
;;;476      */
;;;477    void RTC_SetDate(uint32_t u32Year, uint32_t u32Month, uint32_t u32Day, uint32_t u32DayOfWeek)
000000  b5f8              PUSH     {r3-r7,lr}
;;;478    {
000002  4616              MOV      r6,r2
;;;479        uint32_t u32RegCLR;
;;;480    
;;;481        u32RegCLR  = ((u32Year - RTC_YEAR2000) / 10) << 20;
000004  227d              MOVS     r2,#0x7d
000006  460f              MOV      r7,r1                 ;478
000008  0112              LSLS     r2,r2,#4
00000a  461d              MOV      r5,r3                 ;478
00000c  210a              MOVS     r1,#0xa
00000e  1a80              SUBS     r0,r0,r2
000010  f7fffffe          BL       __aeabi_uidivmod
;;;482        u32RegCLR |= (((u32Year - RTC_YEAR2000) % 10) << 16);
000014  040c              LSLS     r4,r1,#16
000016  0500              LSLS     r0,r0,#20             ;481
000018  4304              ORRS     r4,r4,r0
;;;483        u32RegCLR |= ((u32Month / 10) << 12);
00001a  210a              MOVS     r1,#0xa
00001c  4638              MOV      r0,r7
00001e  f7fffffe          BL       __aeabi_uidivmod
000022  0300              LSLS     r0,r0,#12
000024  4320              ORRS     r0,r0,r4
;;;484        u32RegCLR |= ((u32Month % 10) << 8);
000026  020c              LSLS     r4,r1,#8
000028  4304              ORRS     r4,r4,r0
;;;485        u32RegCLR |= ((u32Day   / 10) << 4);
00002a  210a              MOVS     r1,#0xa
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       __aeabi_uidivmod
000032  0100              LSLS     r0,r0,#4
000034  4320              ORRS     r0,r0,r4
000036  460c              MOV      r4,r1
;;;486        u32RegCLR |= (u32Day   % 10);
000038  4304              ORRS     r4,r4,r0
;;;487    
;;;488        RTC_WaitAccessEnable();
00003a  f7fffffe          BL       RTC_WaitAccessEnable
;;;489    
;;;490        /* Set Day of the Week */
;;;491        RTC->DWR = u32DayOfWeek & RTC_DWR_DWR_Msk;
00003e  0769              LSLS     r1,r5,#29
000040  4802              LDR      r0,|L16.76|
000042  0f49              LSRS     r1,r1,#29
000044  6181              STR      r1,[r0,#0x18]
;;;492    
;;;493        /* Set RTC Calender Loading */
;;;494        RTC->CLR = (uint32_t)u32RegCLR;
000046  6104              STR      r4,[r0,#0x10]
;;;495    }
000048  bdf8              POP      {r3-r7,pc}
;;;496    
                          ENDP

00004a  0000              DCW      0x0000
                  |L16.76|
                          DCD      0x40008000

                          AREA ||i.RTC_SetDateAndTime||, CODE, READONLY, ALIGN=2

                  RTC_SetDateAndTime PROC
;;;340      */
;;;341    void RTC_SetDateAndTime(S_RTC_TIME_DATA_T *sPt)
000000  b5f8              PUSH     {r3-r7,lr}
;;;342    {
000002  0004              MOVS     r4,r0
000004  d040              BEQ      |L17.136|
;;;343        uint32_t u32RegCLR, u32RegTLR;
;;;344    
;;;345        if(sPt == NULL)
;;;346            return ;
;;;347    
;;;348        /*-----------------------------------------------------------------------------------------------------*/
;;;349        /* Set RTC 24/12 hour setting and Day of the Week                                                      */
;;;350        /*-----------------------------------------------------------------------------------------------------*/
;;;351        RTC_WaitAccessEnable();
000006  f7fffffe          BL       RTC_WaitAccessEnable
;;;352        if(sPt->u32TimeScale == RTC_CLOCK_12)
00000a  69e0              LDR      r0,[r4,#0x1c]
;;;353        {
;;;354            RTC->TSSR &= ~RTC_TSSR_24H_12H_Msk;
00000c  4d24              LDR      r5,|L17.160|
00000e  2800              CMP      r0,#0                 ;352
;;;355    
;;;356            /*-------------------------------------------------------------------------------------------------*/
;;;357            /* Important, range of 12-hour PM mode is 21 up to 32                                               */
;;;358            /*-------------------------------------------------------------------------------------------------*/
;;;359            if(sPt->u32AmPm == RTC_PM)
;;;360                sPt->u32Hour += 20;
;;;361        }
;;;362        else
;;;363        {
;;;364            RTC->TSSR |= RTC_TSSR_24H_12H_Msk;
000010  6968              LDR      r0,[r5,#0x14]
000012  d03a              BEQ      |L17.138|
000014  2101              MOVS     r1,#1
000016  4308              ORRS     r0,r0,r1
000018  6168              STR      r0,[r5,#0x14]
                  |L17.26|
;;;365        }
;;;366    
;;;367        /* Set Day of the Week */
;;;368        RTC->DWR = sPt->u32DayOfWeek;
00001a  68e0              LDR      r0,[r4,#0xc]
00001c  61a8              STR      r0,[r5,#0x18]
;;;369    
;;;370        u32RegCLR  = ((sPt->u32Year - RTC_YEAR2000) / 10) << 20;
00001e  207d              MOVS     r0,#0x7d
000020  6821              LDR      r1,[r4,#0]
000022  0100              LSLS     r0,r0,#4
000024  1a08              SUBS     r0,r1,r0
000026  210a              MOVS     r1,#0xa
000028  f7fffffe          BL       __aeabi_uidivmod
;;;371        u32RegCLR |= (((sPt->u32Year - RTC_YEAR2000) % 10) << 16);
00002c  040e              LSLS     r6,r1,#16
00002e  0500              LSLS     r0,r0,#20             ;370
000030  4306              ORRS     r6,r6,r0
;;;372        u32RegCLR |= ((sPt->u32Month  / 10) << 12);
000032  210a              MOVS     r1,#0xa
000034  6860              LDR      r0,[r4,#4]
000036  f7fffffe          BL       __aeabi_uidivmod
00003a  0300              LSLS     r0,r0,#12
00003c  4330              ORRS     r0,r0,r6
;;;373        u32RegCLR |= ((sPt->u32Month  % 10) << 8);
00003e  020e              LSLS     r6,r1,#8
000040  4306              ORRS     r6,r6,r0
;;;374        u32RegCLR |= ((sPt->u32Day    / 10) << 4);
000042  210a              MOVS     r1,#0xa
000044  68a0              LDR      r0,[r4,#8]
000046  f7fffffe          BL       __aeabi_uidivmod
00004a  0100              LSLS     r0,r0,#4
00004c  4330              ORRS     r0,r0,r6
00004e  460e              MOV      r6,r1
;;;375        u32RegCLR |= (sPt->u32Day     % 10);
000050  4306              ORRS     r6,r6,r0
;;;376    
;;;377        u32RegTLR  = ((sPt->u32Hour   / 10) << 20);
000052  210a              MOVS     r1,#0xa
000054  6920              LDR      r0,[r4,#0x10]
000056  f7fffffe          BL       __aeabi_uidivmod
;;;378        u32RegTLR |= ((sPt->u32Hour   % 10) << 16);
00005a  040f              LSLS     r7,r1,#16
00005c  0500              LSLS     r0,r0,#20             ;377
00005e  4307              ORRS     r7,r7,r0
;;;379        u32RegTLR |= ((sPt->u32Minute / 10) << 12);
000060  210a              MOVS     r1,#0xa
000062  6960              LDR      r0,[r4,#0x14]
000064  f7fffffe          BL       __aeabi_uidivmod
000068  0300              LSLS     r0,r0,#12
00006a  4338              ORRS     r0,r0,r7
;;;380        u32RegTLR |= ((sPt->u32Minute % 10) << 8);
00006c  020f              LSLS     r7,r1,#8
00006e  4307              ORRS     r7,r7,r0
;;;381        u32RegTLR |= ((sPt->u32Second / 10) << 4);
000070  210a              MOVS     r1,#0xa
000072  69a0              LDR      r0,[r4,#0x18]
000074  f7fffffe          BL       __aeabi_uidivmod
000078  0100              LSLS     r0,r0,#4
00007a  4338              ORRS     r0,r0,r7
00007c  460c              MOV      r4,r1
;;;382        u32RegTLR |= (sPt->u32Second % 10);
00007e  4304              ORRS     r4,r4,r0
;;;383    
;;;384        /*-----------------------------------------------------------------------------------------------------*/
;;;385        /* Set RTC Calender and Time Loading                                                                   */
;;;386        /*-----------------------------------------------------------------------------------------------------*/
;;;387        RTC_WaitAccessEnable();
000080  f7fffffe          BL       RTC_WaitAccessEnable
;;;388        RTC->CLR = (uint32_t)u32RegCLR;
000084  612e              STR      r6,[r5,#0x10]
;;;389        RTC->TLR = (uint32_t)u32RegTLR;
000086  60ec              STR      r4,[r5,#0xc]
                  |L17.136|
;;;390    }
000088  bdf8              POP      {r3-r7,pc}
                  |L17.138|
00008a  0840              LSRS     r0,r0,#1              ;354
00008c  0040              LSLS     r0,r0,#1              ;354
00008e  6168              STR      r0,[r5,#0x14]         ;354
000090  6a20              LDR      r0,[r4,#0x20]         ;359
000092  2802              CMP      r0,#2                 ;359
000094  d1c1              BNE      |L17.26|
000096  6920              LDR      r0,[r4,#0x10]         ;360
000098  3014              ADDS     r0,r0,#0x14           ;360
00009a  6120              STR      r0,[r4,#0x10]         ;360
00009c  e7bd              B        |L17.26|
;;;391    
                          ENDP

00009e  0000              DCW      0x0000
                  |L17.160|
                          DCD      0x40008000

                          AREA ||i.RTC_SetTickPeriod||, CODE, READONLY, ALIGN=2

                  RTC_SetTickPeriod PROC
;;;651      */
;;;652    void RTC_SetTickPeriod(uint32_t u32TickSelection)
000000  b510              PUSH     {r4,lr}
;;;653    {
000002  4604              MOV      r4,r0
;;;654        RTC_WaitAccessEnable();
000004  f7fffffe          BL       RTC_WaitAccessEnable
;;;655    
;;;656        RTC->TTR = (RTC->TTR & ~RTC_TTR_TTR_Msk) | u32TickSelection;
000008  4903              LDR      r1,|L18.24|
00000a  6b08              LDR      r0,[r1,#0x30]
00000c  08c2              LSRS     r2,r0,#3
00000e  00d2              LSLS     r2,r2,#3
000010  4322              ORRS     r2,r2,r4
000012  630a              STR      r2,[r1,#0x30]
;;;657    }
000014  bd10              POP      {r4,pc}
;;;658    
                          ENDP

000016  0000              DCW      0x0000
                  |L18.24|
                          DCD      0x40008000

                          AREA ||i.RTC_SetTime||, CODE, READONLY, ALIGN=2

                  RTC_SetTime PROC
;;;509      */
;;;510    void RTC_SetTime(uint32_t u32Hour, uint32_t u32Minute, uint32_t u32Second, uint32_t u32TimeMode, uint32_t u32AmPm)
000000  b5f8              PUSH     {r3-r7,lr}
;;;511    {
000002  460e              MOV      r6,r1
000004  9906              LDR      r1,[sp,#0x18]
000006  001d              MOVS     r5,r3
000008  4614              MOV      r4,r2
00000a  d102              BNE      |L19.18|
;;;512        uint32_t u32RegTLR;
;;;513    
;;;514        /* Important, range of 12-hour PM mode is 21 up to 32 */
;;;515        if((u32TimeMode == RTC_CLOCK_12) && (u32AmPm == RTC_PM))
00000c  2902              CMP      r1,#2
00000e  d100              BNE      |L19.18|
000010  3014              ADDS     r0,r0,#0x14
                  |L19.18|
;;;516            u32Hour += 20;
;;;517    
;;;518        u32RegTLR  = ((u32Hour   / 10) << 20);
000012  210a              MOVS     r1,#0xa
000014  f7fffffe          BL       __aeabi_uidivmod
;;;519        u32RegTLR |= ((u32Hour   % 10) << 16);
000018  040f              LSLS     r7,r1,#16
00001a  0500              LSLS     r0,r0,#20             ;518
00001c  4307              ORRS     r7,r7,r0
;;;520        u32RegTLR |= ((u32Minute / 10) << 12);
00001e  210a              MOVS     r1,#0xa
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       __aeabi_uidivmod
000026  0300              LSLS     r0,r0,#12
;;;521        u32RegTLR |= ((u32Minute % 10) << 8);
000028  020e              LSLS     r6,r1,#8
00002a  4338              ORRS     r0,r0,r7              ;520
00002c  4306              ORRS     r6,r6,r0
;;;522        u32RegTLR |= ((u32Second / 10) << 4);
00002e  210a              MOVS     r1,#0xa
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       __aeabi_uidivmod
000036  0100              LSLS     r0,r0,#4
000038  4330              ORRS     r0,r0,r6
;;;523        u32RegTLR |= (u32Second % 10);
00003a  4301              ORRS     r1,r1,r0
00003c  460c              MOV      r4,r1
;;;524    
;;;525        /*-----------------------------------------------------------------------------------------------------*/
;;;526        /* Set RTC 24/12 hour setting and Day of the Week                                                      */
;;;527        /*-----------------------------------------------------------------------------------------------------*/
;;;528        RTC_WaitAccessEnable();
00003e  f7fffffe          BL       RTC_WaitAccessEnable
;;;529        if(u32TimeMode == RTC_CLOCK_12)
;;;530        {
;;;531            RTC->TSSR &= ~RTC_TSSR_24H_12H_Msk;
000042  4806              LDR      r0,|L19.92|
000044  2d00              CMP      r5,#0                 ;529
;;;532        }
;;;533        else
;;;534        {
;;;535            RTC->TSSR |= RTC_TSSR_24H_12H_Msk;
000046  6941              LDR      r1,[r0,#0x14]
000048  d004              BEQ      |L19.84|
00004a  2201              MOVS     r2,#1
00004c  4311              ORRS     r1,r1,r2
                  |L19.78|
00004e  6141              STR      r1,[r0,#0x14]
;;;536        }
;;;537    
;;;538        RTC->TLR = (uint32_t)u32RegTLR;
000050  60c4              STR      r4,[r0,#0xc]
;;;539    }
000052  bdf8              POP      {r3-r7,pc}
                  |L19.84|
000054  0849              LSRS     r1,r1,#1              ;531
000056  0049              LSLS     r1,r1,#1              ;531
000058  e7f9              B        |L19.78|
;;;540    
                          ENDP

00005a  0000              DCW      0x0000
                  |L19.92|
                          DCD      0x40008000

                          AREA ||i.RTC_WaitAccessEnable||, CODE, READONLY, ALIGN=2

                  RTC_WaitAccessEnable PROC
;;;214      */
;;;215    static __INLINE void RTC_WaitAccessEnable(void)
000000  4804              LDR      r0,|L20.20|
                  |L20.2|
;;;216    {
;;;217        /* To wait AER bit is cleared and enable AER bit (Access bit) again */
;;;218        while((RTC->AER & RTC_AER_ENF_Msk) == RTC_AER_ENF_Msk);
000002  6841              LDR      r1,[r0,#4]
000004  03c9              LSLS     r1,r1,#15
000006  d4fc              BMI      |L20.2|
;;;219        RTC->AER = RTC_WRITE_KEY;
000008  4903              LDR      r1,|L20.24|
00000a  6041              STR      r1,[r0,#4]
                  |L20.12|
;;;220    
;;;221        /* To wait AER bit is set and user can access the RTC registers from now on */
;;;222        while((RTC->AER & RTC_AER_ENF_Msk) == 0x0);
00000c  6841              LDR      r1,[r0,#4]
00000e  03c9              LSLS     r1,r1,#15
000010  d5fc              BPL      |L20.12|
;;;223    }
000012  4770              BX       lr
;;;224    
                          ENDP

                  |L20.20|
                          DCD      0x40008000
                  |L20.24|
                          DCD      0x0000a965

                          AREA ||.data||, DATA, ALIGN=2

                  g_u32hiYear
                          DCD      0x00000000
                  g_u32loYear
                          DCD      0x00000000
                  g_u32hiMonth
                          DCD      0x00000000
                  g_u32loMonth
                          DCD      0x00000000
                  g_u32hiDay
                          DCD      0x00000000
                  g_u32loDay
                          DCD      0x00000000
                  g_u32hiHour
                          DCD      0x00000000
                  g_u32loHour
                          DCD      0x00000000
                  g_u32hiMin
                          DCD      0x00000000
                  g_u32loMin
                          DCD      0x00000000
                  g_u32hiSec
                          DCD      0x00000000
                  g_u32loSec
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "Libraries\\StdDriver\\src\\rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_RTC_Open____REV16|
#line 118 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_rtc_c_RTC_Open____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_rtc_c_RTC_Open____REVSH|
#line 132
|__asm___5_rtc_c_RTC_Open____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
