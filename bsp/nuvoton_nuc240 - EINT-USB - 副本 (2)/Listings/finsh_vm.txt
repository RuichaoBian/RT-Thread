; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\finsh_vm.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\finsh_vm.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 --omf_browse=.\objects\finsh_vm.crf ..\..\components\finsh\finsh_vm.c]
                          THUMB

                          AREA ||i.finsh_syscall_append||, CODE, READONLY, ALIGN=2

                  finsh_syscall_append PROC
;;;74     #ifdef RT_USING_HEAP
;;;75     void finsh_syscall_append(const char* name, syscall_func func)
000000  b570              PUSH     {r4-r6,lr}
;;;76     {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;77     	/* create the syscall */
;;;78     	struct finsh_syscall_item* item;
;;;79     
;;;80     	item = (struct finsh_syscall_item*)rt_malloc(sizeof(struct finsh_syscall_item));
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       rt_malloc
00000c  0004              MOVS     r4,r0
;;;81     	if (item != RT_NULL)
00000e  d00c              BEQ      |L1.42|
;;;82     	{
;;;83     		item->next = NULL;
000010  2000              MOVS     r0,#0
;;;84     		item->syscall.name = rt_strdup(name);
000012  6020              STR      r0,[r4,#0]
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       rt_strdup
;;;85     		item->syscall.func = func;
;;;86     
;;;87     		if (global_syscall_list == NULL)
00001a  4904              LDR      r1,|L1.44|
00001c  60e5              STR      r5,[r4,#0xc]
00001e  6060              STR      r0,[r4,#4]
000020  6808              LDR      r0,[r1,#0]  ; global_syscall_list
000022  2800              CMP      r0,#0
000024  d000              BEQ      |L1.40|
;;;88     		{
;;;89     			global_syscall_list = item;
;;;90     		}
;;;91     		else
;;;92     		{
;;;93     			item->next = global_syscall_list;
000026  6020              STR      r0,[r4,#0]
                  |L1.40|
000028  600c              STR      r4,[r1,#0]            ;89  ; global_syscall_list
                  |L1.42|
;;;94     			global_syscall_list = item;
;;;95     		}
;;;96     	}
;;;97     }
00002a  bd70              POP      {r4-r6,pc}
;;;98     #endif
                          ENDP

                  |L1.44|
                          DCD      ||.data||

                          AREA ||i.finsh_syscall_lookup||, CODE, READONLY, ALIGN=2

                  finsh_syscall_lookup PROC
;;;121    
;;;122    struct finsh_syscall* finsh_syscall_lookup(const char* name)
000000  b570              PUSH     {r4-r6,lr}
;;;123    {
000002  4605              MOV      r5,r0
;;;124    	struct finsh_syscall* index;
;;;125    	struct finsh_syscall_item* item;
;;;126    
;;;127    	for (index = _syscall_table_begin; index < _syscall_table_end; FINSH_NEXT_SYSCALL(index))
000004  4811              LDR      r0,|L2.76|
000006  4e12              LDR      r6,|L2.80|
000008  6804              LDR      r4,[r0,#0]            ;123  ; _syscall_table_begin
00000a  e006              B        |L2.26|
                  |L2.12|
;;;128    	{
;;;129    		if (strcmp(index->name, name) == 0)
00000c  4629              MOV      r1,r5
00000e  6820              LDR      r0,[r4,#0]
000010  f7fffffe          BL       strcmp
000014  2800              CMP      r0,#0
000016  d006              BEQ      |L2.38|
000018  340c              ADDS     r4,r4,#0xc
                  |L2.26|
00001a  6830              LDR      r0,[r6,#0]            ;127  ; _syscall_table_end
00001c  4284              CMP      r4,r0                 ;127
00001e  d3f5              BCC      |L2.12|
;;;130    			return index;
;;;131    	}
;;;132    
;;;133    	/* find on syscall list */
;;;134    	item = global_syscall_list;
000020  480c              LDR      r0,|L2.84|
;;;135    	while (item != NULL)
000022  6804              LDR      r4,[r0,#0]  ; global_syscall_list
000024  e00c              B        |L2.64|
                  |L2.38|
000026  4620              MOV      r0,r4                 ;130
;;;136    	{
;;;137    		if (strncmp(item->syscall.name, name, strlen(name)) == 0)
;;;138    		{
;;;139    			return &(item->syscall);
;;;140    		}
;;;141    
;;;142    		item = item->next;
;;;143    	}
;;;144    
;;;145    	return NULL;
;;;146    }
000028  bd70              POP      {r4-r6,pc}
                  |L2.42|
00002a  4628              MOV      r0,r5                 ;137
00002c  f7fffffe          BL       strlen
000030  4602              MOV      r2,r0                 ;137
000032  4629              MOV      r1,r5                 ;137
000034  6860              LDR      r0,[r4,#4]            ;137
000036  f7fffffe          BL       strncmp
00003a  2800              CMP      r0,#0                 ;137
00003c  d004              BEQ      |L2.72|
00003e  6824              LDR      r4,[r4,#0]            ;142
                  |L2.64|
000040  2c00              CMP      r4,#0                 ;135
000042  d1f2              BNE      |L2.42|
000044  2000              MOVS     r0,#0                 ;145
000046  bd70              POP      {r4-r6,pc}
                  |L2.72|
000048  1d20              ADDS     r0,r4,#4              ;139
00004a  bd70              POP      {r4-r6,pc}
;;;147    
                          ENDP

                  |L2.76|
                          DCD      _syscall_table_begin
                  |L2.80|
                          DCD      _syscall_table_end
                  |L2.84|
                          DCD      ||.data||

                          AREA ||i.finsh_vm_run||, CODE, READONLY, ALIGN=2

                  finsh_vm_run PROC
;;;46     // #define FINSH_VM_DISASSEMBLE
;;;47     void finsh_vm_run()
000000  b570              PUSH     {r4-r6,lr}
;;;48     {
;;;49     	u_char op;
;;;50     
;;;51     	/* if you want to disassemble the byte code, please define FINSH_VM_DISASSEMBLE */
;;;52     #ifdef FINSH_VM_DISASSEMBLE
;;;53     	void finsh_disassemble();
;;;54     	finsh_disassemble();
;;;55     #endif
;;;56     
;;;57     	/* set sp(stack pointer) to the beginning of stack */
;;;58     	finsh_sp = &finsh_vm_stack[0];
000002  4809              LDR      r0,|L3.40|
000004  4c09              LDR      r4,|L3.44|
;;;59     
;;;60     	/* set pc to the beginning of text segment */
;;;61     	finsh_pc = &text_segment[0];
000006  1dc5              ADDS     r5,r0,#7
000008  35f9              ADDS     r5,r5,#0xf9
00000a  60a5              STR      r5,[r4,#8]            ;48  ; finsh_pc
;;;62     
;;;63     	while ((finsh_pc - &text_segment[0] >= 0) &&
;;;64     		(finsh_pc - &text_segment[0] < FINSH_TEXT_MAX))
;;;65     	{
;;;66     		/* get op */
;;;67     		op = *finsh_pc++;
;;;68     
;;;69     		/* call op function */
;;;70     		op_table[op]();
00000c  4e08              LDR      r6,|L3.48|
00000e  6060              STR      r0,[r4,#4]            ;48  ; finsh_sp
000010  e005              B        |L3.30|
                  |L3.18|
000012  7801              LDRB     r1,[r0,#0]            ;67
000014  1c40              ADDS     r0,r0,#1              ;67
000016  60a0              STR      r0,[r4,#8]  ; finsh_pc
000018  0088              LSLS     r0,r1,#2
00001a  5830              LDR      r0,[r6,r0]
00001c  4780              BLX      r0
                  |L3.30|
00001e  68a0              LDR      r0,[r4,#8]            ;63  ; finsh_pc
000020  1b41              SUBS     r1,r0,r5              ;63
000022  2980              CMP      r1,#0x80              ;63
000024  d3f5              BCC      |L3.18|
;;;71     	}
;;;72     }
000026  bd70              POP      {r4-r6,pc}
;;;73     
                          ENDP

                  |L3.40|
                          DCD      ||.bss||
                  |L3.44|
                          DCD      ||.data||
                  |L3.48|
                          DCD      op_table

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  finsh_vm_stack
                          %        256
                  text_segment
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  global_syscall_list
                          DCD      0x00000000
                  finsh_sp
                          DCD      0x00000000
                  finsh_pc
                          DCD      0x00000000
