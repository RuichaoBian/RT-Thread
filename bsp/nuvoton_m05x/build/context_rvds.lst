


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ; * File      : context_rvds.S
    3 00000000         ; * This file is part of RT-Thread RTOS
    4 00000000         ; * COPYRIGHT (C) 2009, RT-Thread Development Team
    5 00000000         ; *
    6 00000000         ; * The license and distribution terms for this file may
                        be
    7 00000000         ; * found in the file LICENSE in this distribution or at
                       
    8 00000000         ; * http://www.rt-thread.org/license/LICENSE
    9 00000000         ; *
   10 00000000         ; * Change Logs:
   11 00000000         ; * Date           Author       Notes
   12 00000000         ; * 2010-01-25     Bernard      first version
   13 00000000         ; * 2012-06-01     aozima       set pendsv priority to 0
                       xFF.
   14 00000000         ; * 2012-08-17     aozima       fixed bug: store r8 - r1
                       1.
   15 00000000         ; * 2013-06-18     aozima       add restore MSP feature.
                       
   16 00000000         ; */
   17 00000000         
   18 00000000         ;/**
   19 00000000         ; * @addtogroup CORTEX-M0
   20 00000000         ; */
   21 00000000         ;/*@{*/
   22 00000000         
   23 00000000 E000ED08 
                       SCB_VTOR
                               EQU              0xE000ED08  ; Vector Table Offs
                                                            et Register
   24 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; interrupt control
                                                             state register
   25 00000000 E000ED20 
                       NVIC_SHPR3
                               EQU              0xE000ED20  ; system priority r
                                                            egister (2)
   26 00000000 00FF0000 
                       NVIC_PENDSV_PRI
                               EQU              0x00FF0000  ; PendSV priority v
                                                            alue (lowest)
   27 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; value to trigger 
                                                            PendSV exception
   28 00000000         
   29 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   30 00000000                 THUMB
   31 00000000                 REQUIRE8
   32 00000000                 PRESERVE8
   33 00000000         
   34 00000000                 IMPORT           rt_thread_switch_interrupt_flag
   35 00000000                 IMPORT           rt_interrupt_from_thread
   36 00000000                 IMPORT           rt_interrupt_to_thread
   37 00000000         
   38 00000000         ;/*



ARM Macro Assembler    Page 2 


   39 00000000         ; * rt_base_t rt_hw_interrupt_disable();
   40 00000000         ; */
   41 00000000         rt_hw_interrupt_disable
                               PROC
   42 00000000                 EXPORT           rt_hw_interrupt_disable
   43 00000000 F3EF 8010       MRS              r0, PRIMASK
   44 00000004 B672            CPSID            I
   45 00000006 4770            BX               LR
   46 00000008                 ENDP
   47 00000008         
   48 00000008         ;/*
   49 00000008         ; * void rt_hw_interrupt_enable(rt_base_t level);
   50 00000008         ; */
   51 00000008         rt_hw_interrupt_enable
                               PROC
   52 00000008                 EXPORT           rt_hw_interrupt_enable
   53 00000008 F380 8810       MSR              PRIMASK, r0
   54 0000000C 4770            BX               LR
   55 0000000E                 ENDP
   56 0000000E         
   57 0000000E         ;/*
   58 0000000E         ; * void rt_hw_context_switch(rt_uint32 from, rt_uint32 
                       to);
   59 0000000E         ; * r0 --> from
   60 0000000E         ; * r1 --> to
   61 0000000E         ; */
   62 0000000E         rt_hw_context_switch_interrupt
   63 0000000E                 EXPORT           rt_hw_context_switch_interrupt
   64 0000000E         rt_hw_context_switch
                               PROC
   65 0000000E                 EXPORT           rt_hw_context_switch
   66 0000000E         
   67 0000000E         ; set rt_thread_switch_interrupt_flag to 1
   68 0000000E 4A2A            LDR              r2, =rt_thread_switch_interrupt
_flag
   69 00000010 6813            LDR              r3, [r2]
   70 00000012 2B01            CMP              r3, #1
   71 00000014 D003            BEQ              _reswitch
   72 00000016 2301            MOVS             r3, #0x01
   73 00000018 6013            STR              r3, [r2]
   74 0000001A         
   75 0000001A 4A28            LDR              r2, =rt_interrupt_from_thread ;
                                                             set rt_interrupt_f
                                                            rom_thread
   76 0000001C 6010            STR              r0, [r2]
   77 0000001E         
   78 0000001E         _reswitch
   79 0000001E 4A28            LDR              r2, =rt_interrupt_to_thread ; s
                                                            et rt_interrupt_to_
                                                            thread
   80 00000020 6011            STR              r1, [r2]
   81 00000022         
   82 00000022 4828            LDR              r0, =NVIC_INT_CTRL ; trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)
   83 00000024 4928            LDR              r1, =NVIC_PENDSVSET
   84 00000026 6001            STR              r1, [r0]
   85 00000028 4770            BX               LR



ARM Macro Assembler    Page 3 


   86 0000002A                 ENDP
   87 0000002A         
   88 0000002A         ; r0 --> switch from thread stack
   89 0000002A         ; r1 --> switch to thread stack
   90 0000002A         ; psr, pc, lr, r12, r3, r2, r1, r0 are pushed into [from
                       ] stack
   91 0000002A         PendSV_Handler
                               PROC
   92 0000002A                 EXPORT           PendSV_Handler
   93 0000002A         
   94 0000002A         ; disable interrupt to protect context switch
   95 0000002A F3EF 8210       MRS              r2, PRIMASK
   96 0000002E B672            CPSID            I
   97 00000030         
   98 00000030         ; get rt_thread_switch_interrupt_flag
   99 00000030 4821            LDR              r0, =rt_thread_switch_interrupt
_flag
  100 00000032 6801            LDR              r1, [r0]
  101 00000034 2900            CMP              r1, #0x00
  102 00000036 D01D            BEQ              pendsv_exit ; pendsv already ha
                                                            ndled
  103 00000038         
  104 00000038         ; clear rt_thread_switch_interrupt_flag to 0
  105 00000038 2100            MOVS             r1, #0x00
  106 0000003A 6001            STR              r1, [r0]
  107 0000003C         
  108 0000003C 481F            LDR              r0, =rt_interrupt_from_thread
  109 0000003E 6801            LDR              r1, [r0]
  110 00000040 2900            CMP              r1, #0x00
  111 00000042 D00A            BEQ              switch_to_thread ; skip registe
                                                            r save at the first
                                                             time
  112 00000044         
  113 00000044 F3EF 8109       MRS              r1, psp     ; get from thread s
                                                            tack pointer
  114 00000048         
  115 00000048 3920            SUBS             r1, r1, #0x20 ; space for {r4 -
                                                             r7} and {r8 - r11}
                                                            
  116 0000004A 6800            LDR              r0, [r0]
  117 0000004C 6001            STR              r1, [r0]    ; update from threa
                                                            d stack pointer
  118 0000004E         
  119 0000004E C1F0            STMIA            r1!, {r4 - r7} ; push thread {r
                                                            4 - r7} register to
                                                             thread stack
  120 00000050         
  121 00000050 4644            MOV              r4, r8      ; mov thread {r8 - 
                                                            r11} to {r4 - r7}
  122 00000052 464D            MOV              r5, r9
  123 00000054 4656            MOV              r6, r10
  124 00000056 465F            MOV              r7, r11
  125 00000058 C1F0            STMIA            r1!, {r4 - r7} ; push thread {r
                                                            8 - r11} high regis
                                                            ter to thread stack
                                                            
  126 0000005A         
  127 0000005A         switch_to_thread
  128 0000005A 4919            LDR              r1, =rt_interrupt_to_thread



ARM Macro Assembler    Page 4 


  129 0000005C 6809            LDR              r1, [r1]
  130 0000005E 6809            LDR              r1, [r1]    ; load thread stack
                                                             pointer
  131 00000060         
  132 00000060 C9F0            LDMIA            r1!, {r4 - r7} ; pop thread {r4
                                                             - r7} register fro
                                                            m thread stack
  133 00000062 B4F0            PUSH             {r4 - r7}   ; push {r4 - r7} to
                                                             MSP for copy {r8 -
                                                             r11}
  134 00000064         
  135 00000064 C9F0            LDMIA            r1!, {r4 - r7} ; pop thread {r8
                                                             - r11} high regist
                                                            er from thread stac
                                                            k to {r4 - r7}
  136 00000066 46A0            MOV              r8,  r4     ; mov {r4 - r7} to 
                                                            {r8 - r11}
  137 00000068 46A9            MOV              r9,  r5
  138 0000006A 46B2            MOV              r10, r6
  139 0000006C 46BB            MOV              r11, r7
  140 0000006E         
  141 0000006E BCF0            POP              {r4 - r7}   ; pop {r4 - r7} fro
                                                            m MSP
  142 00000070         
  143 00000070 F381 8809       MSR              psp, r1     ; update stack poin
                                                            ter
  144 00000074         
  145 00000074         pendsv_exit
  146 00000074         ; restore interrupt
  147 00000074 F382 8810       MSR              PRIMASK, r2
  148 00000078         
  149 00000078 2004            MOVS             r0, #0x04
  150 0000007A 4240            RSBS             r0, r0, #0x00
  151 0000007C 4700            BX               r0
  152 0000007E                 ENDP
  153 0000007E         
  154 0000007E         ;/*
  155 0000007E         ; * void rt_hw_context_switch_to(rt_uint32 to);
  156 0000007E         ; * r0 --> to
  157 0000007E         ; * this fucntion is used to perform the first thread sw
                       itch
  158 0000007E         ; */
  159 0000007E         rt_hw_context_switch_to
                               PROC
  160 0000007E                 EXPORT           rt_hw_context_switch_to
  161 0000007E         ; set to thread
  162 0000007E 4910            LDR              r1, =rt_interrupt_to_thread
  163 00000080 6008            STR              r0, [r1]
  164 00000082         
  165 00000082         ; set from thread to 0
  166 00000082 490E            LDR              r1, =rt_interrupt_from_thread
  167 00000084 2000            MOVS             r0, #0x0
  168 00000086 6008            STR              r0, [r1]
  169 00000088         
  170 00000088         ; set interrupt flag to 1
  171 00000088 490B            LDR              r1, =rt_thread_switch_interrupt
_flag
  172 0000008A 2001            MOVS             r0, #1
  173 0000008C 6008            STR              r0, [r1]



ARM Macro Assembler    Page 5 


  174 0000008E         
  175 0000008E         ; set the PendSV exception priority
  176 0000008E 480F            LDR              r0, =NVIC_SHPR3
  177 00000090 490F            LDR              r1, =NVIC_PENDSV_PRI
  178 00000092 6802            LDR              r2, [r0,#0x00] ; read
  179 00000094 4311            ORRS             r1,r1,r2    ; modify
  180 00000096 6001            STR              r1, [r0]    ; write-back
  181 00000098         
  182 00000098         ; trigger the PendSV exception (causes context switch)
  183 00000098 480A            LDR              r0, =NVIC_INT_CTRL
  184 0000009A 490B            LDR              r1, =NVIC_PENDSVSET
  185 0000009C 6001            STR              r1, [r0]
  186 0000009E         
  187 0000009E         ; restore MSP
  188 0000009E 480D            LDR              r0, =SCB_VTOR
  189 000000A0 6800            LDR              r0, [r0]
  190 000000A2 6800            LDR              r0, [r0]
  191 000000A4 F380 8808       MSR              msp, r0
  192 000000A8         
  193 000000A8         ; enable interrupts at processor level
  194 000000A8 B662            CPSIE            I
  195 000000AA         
  196 000000AA         ; never reach here!
  197 000000AA                 ENDP
  198 000000AA         
  199 000000AA         ; compatible with old version
  200 000000AA         rt_hw_interrupt_thread_switch
                               PROC
  201 000000AA                 EXPORT           rt_hw_interrupt_thread_switch
  202 000000AA 4770            BX               lr
  203 000000AC                 ENDP
  204 000000AC         
  205 000000AC                 IMPORT           rt_hw_hard_fault_exception
  206 000000AC         
  207 000000AC         HardFault_Handler
                               PROC
  208 000000AC                 EXPORT           HardFault_Handler
  209 000000AC         
  210 000000AC         ; get current context
  211 000000AC F3EF 8009       MRS              r0, psp     ; get fault thread 
                                                            stack pointer
  212 000000B0 B500            PUSH             {lr}
  213 000000B2 F7FF FFFE       BL               rt_hw_hard_fault_exception
  214 000000B6 BD00            POP              {pc}
  215 000000B8                 ENDP
  216 000000B8         
  217 000000B8                 ALIGN            4
  218 000000B8         
  219 000000B8                 END
              00000000 
              00000000 
              00000000 
              E000ED04 
              10000000 
              E000ED20 
              00FF0000 
              E000ED08 
Command Line: --16 --debug --xref --diag_suppress=9931 --cpu=Cortex-M0 --apcs=i
nterwork --depend=.\build\context_rvds.d -o.\build\context_rvds.o -IE:\cynoware



ARM Macro Assembler    Page 6 


\RTthread\rt-threa\bsp\nuvoton_m05x\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\D
evice\ARM\ARMCM0\Include -IC:\Keil_v5\ARM\CMSIS\Include --predefine="__MICROLIB
 SETA 1" --predefine="__UVISION_VERSION SETA 521" --predefine="ARMCM0 SETA 1" -
-list=.\build\context_rvds.lst ..\..\libcpu\arm\cortex-m0\context_rvds.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 29 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      None
Comment: .text unused
HardFault_Handler 000000AC

Symbol: HardFault_Handler
   Definitions
      At line 207 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 208 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: HardFault_Handler used once
PendSV_Handler 0000002A

Symbol: PendSV_Handler
   Definitions
      At line 91 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 92 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: PendSV_Handler used once
_reswitch 0000001E

Symbol: _reswitch
   Definitions
      At line 78 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 71 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: _reswitch used once
pendsv_exit 00000074

Symbol: pendsv_exit
   Definitions
      At line 145 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 102 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: pendsv_exit used once
rt_hw_context_switch 0000000E

Symbol: rt_hw_context_switch
   Definitions
      At line 64 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 65 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: rt_hw_context_switch used once
rt_hw_context_switch_interrupt 0000000E

Symbol: rt_hw_context_switch_interrupt
   Definitions
      At line 62 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 63 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: rt_hw_context_switch_interrupt used once
rt_hw_context_switch_to 0000007E

Symbol: rt_hw_context_switch_to



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 159 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 160 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: rt_hw_context_switch_to used once
rt_hw_interrupt_disable 00000000

Symbol: rt_hw_interrupt_disable
   Definitions
      At line 41 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 42 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: rt_hw_interrupt_disable used once
rt_hw_interrupt_enable 00000008

Symbol: rt_hw_interrupt_enable
   Definitions
      At line 51 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 52 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: rt_hw_interrupt_enable used once
rt_hw_interrupt_thread_switch 000000AA

Symbol: rt_hw_interrupt_thread_switch
   Definitions
      At line 200 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 201 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: rt_hw_interrupt_thread_switch used once
switch_to_thread 0000005A

Symbol: switch_to_thread
   Definitions
      At line 127 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 111 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: switch_to_thread used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 24 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 82 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
      At line 183 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 27 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 83 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
      At line 184 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S

NVIC_PENDSV_PRI 00FF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 26 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 177 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: NVIC_PENDSV_PRI used once
NVIC_SHPR3 E000ED20

Symbol: NVIC_SHPR3
   Definitions
      At line 25 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 176 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: NVIC_SHPR3 used once
SCB_VTOR E000ED08

Symbol: SCB_VTOR
   Definitions
      At line 23 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 188 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: SCB_VTOR used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

rt_hw_hard_fault_exception 00000000

Symbol: rt_hw_hard_fault_exception
   Definitions
      At line 205 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 213 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
Comment: rt_hw_hard_fault_exception used once
rt_interrupt_from_thread 00000000

Symbol: rt_interrupt_from_thread
   Definitions
      At line 35 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 75 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
      At line 108 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
      At line 166 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S

rt_interrupt_to_thread 00000000

Symbol: rt_interrupt_to_thread
   Definitions
      At line 36 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 79 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
      At line 128 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
      At line 162 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S

rt_thread_switch_interrupt_flag 00000000

Symbol: rt_thread_switch_interrupt_flag
   Definitions
      At line 34 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
   Uses
      At line 68 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
      At line 99 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S
      At line 171 in file ..\..\libcpu\arm\cortex-m0\context_rvds.S

4 symbols
356 symbols in table
