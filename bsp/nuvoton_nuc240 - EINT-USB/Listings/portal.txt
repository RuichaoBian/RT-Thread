; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\portal.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\portal.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 --omf_browse=.\objects\portal.crf ..\..\components\drivers\src\portal.c]
                          THUMB

                          AREA ||i._portal_close||, CODE, READONLY, ALIGN=1

                  _portal_close PROC
;;;77     
;;;78     static rt_err_t _portal_close(rt_device_t dev)
000000  b510              PUSH     {r4,lr}
;;;79     {
000002  4604              MOV      r4,r0
;;;80         struct rt_portal_device *portal;
;;;81     
;;;82         RT_ASSERT(dev);
;;;83     
;;;84         portal = (struct rt_portal_device*)dev;
;;;85     
;;;86         rt_device_close(portal->write_dev);
000004  6c00              LDR      r0,[r0,#0x40]
000006  f7fffffe          BL       rt_device_close
;;;87         rt_device_close(portal->read_dev);
00000a  6c60              LDR      r0,[r4,#0x44]
00000c  f7fffffe          BL       rt_device_close
;;;88     
;;;89         return RT_EOK;
000010  2000              MOVS     r0,#0
;;;90     }
000012  bd10              POP      {r4,pc}
;;;91     
                          ENDP


                          AREA ||i._portal_init||, CODE, READONLY, ALIGN=1

                  _portal_init PROC
;;;30     
;;;31     static rt_err_t _portal_init(rt_device_t dev)
000000  b510              PUSH     {r4,lr}
;;;32     {
000002  4604              MOV      r4,r0
;;;33         rt_err_t err;
;;;34         struct rt_portal_device *portal;
;;;35     
;;;36         RT_ASSERT(dev);
;;;37     
;;;38         portal = (struct rt_portal_device*)dev;
;;;39     
;;;40         err = rt_device_init(portal->write_dev);
000004  6c00              LDR      r0,[r0,#0x40]
000006  f7fffffe          BL       rt_device_init
;;;41         if (err != RT_EOK)
00000a  2800              CMP      r0,#0
00000c  d102              BNE      |L2.20|
;;;42             return err;
;;;43     
;;;44         err = rt_device_init(portal->read_dev);
00000e  6c60              LDR      r0,[r4,#0x44]
000010  f7fffffe          BL       rt_device_init
                  |L2.20|
;;;45     
;;;46         return err;
;;;47     }
000014  bd10              POP      {r4,pc}
;;;48     
                          ENDP


                          AREA ||i._portal_open||, CODE, READONLY, ALIGN=1

                  _portal_open PROC
;;;48     
;;;49     static rt_err_t _portal_open(rt_device_t dev, rt_uint16_t oflag)
000000  b570              PUSH     {r4-r6,lr}
;;;50     {
000002  000d              MOVS     r5,r1
000004  4604              MOV      r4,r0
000006  d011              BEQ      |L3.44|
;;;51         rt_err_t err;
;;;52         struct rt_portal_device *portal;
;;;53     
;;;54         RT_ASSERT(dev);
;;;55     
;;;56         if (!oflag)
;;;57             return -RT_ERROR;
;;;58     
;;;59         portal = (struct rt_portal_device*)dev;
;;;60     
;;;61         if (oflag & RT_DEVICE_OFLAG_RDONLY)
000008  07e8              LSLS     r0,r5,#31
00000a  d005              BEQ      |L3.24|
;;;62         {
;;;63             err = rt_device_open(portal->read_dev, RT_DEVICE_OFLAG_RDONLY);
00000c  2101              MOVS     r1,#1
00000e  6c60              LDR      r0,[r4,#0x44]
000010  f7fffffe          BL       rt_device_open
;;;64             if (err != RT_EOK)
000014  2800              CMP      r0,#0
000016  d108              BNE      |L3.42|
                  |L3.24|
;;;65                 return err;
;;;66         }
;;;67     
;;;68         if (oflag & RT_DEVICE_OFLAG_WRONLY)
000018  07a8              LSLS     r0,r5,#30
00001a  d505              BPL      |L3.40|
;;;69         {
;;;70             err = rt_device_open(portal->write_dev, RT_DEVICE_OFLAG_WRONLY);
00001c  2102              MOVS     r1,#2
00001e  6c20              LDR      r0,[r4,#0x40]
000020  f7fffffe          BL       rt_device_open
;;;71             if (err != RT_EOK)
000024  2800              CMP      r0,#0
000026  d100              BNE      |L3.42|
                  |L3.40|
;;;72                 return err;
;;;73         }
;;;74     
;;;75         return RT_EOK;
000028  2000              MOVS     r0,#0
                  |L3.42|
;;;76     }
00002a  bd70              POP      {r4-r6,pc}
                  |L3.44|
00002c  2000              MOVS     r0,#0                 ;57
00002e  43c0              MVNS     r0,r0                 ;57
000030  bd70              POP      {r4-r6,pc}
;;;77     
                          ENDP


                          AREA ||i._portal_read||, CODE, READONLY, ALIGN=1

                  _portal_read PROC
;;;91     
;;;92     static rt_size_t _portal_read(rt_device_t dev,
000000  b510              PUSH     {r4,lr}
;;;93                                   rt_off_t pos,
;;;94                                   void *buffer,
;;;95                                   rt_size_t size)
;;;96     {
;;;97         return rt_device_read(PT_READ_DEV(dev),
000002  6c40              LDR      r0,[r0,#0x44]
000004  f7fffffe          BL       rt_device_read
;;;98                               pos, buffer, size);
;;;99     }
000008  bd10              POP      {r4,pc}
;;;100    
                          ENDP


                          AREA ||i._portal_rx_indicate||, CODE, READONLY, ALIGN=1

                  _portal_rx_indicate PROC
;;;109    
;;;110    static rt_err_t _portal_rx_indicate(rt_device_t dev, rt_size_t size)
000000  6e40              LDR      r0,[r0,#0x64]
;;;111    {
;;;112        struct rt_pipe_device *pipe;
;;;113    
;;;114        RT_ASSERT(dev && dev->type == RT_Device_Class_Pipe);
;;;115    
;;;116        pipe = (struct rt_pipe_device*)dev;
;;;117    
;;;118        if (pipe->read_portal->parent.rx_indicate)
000002  69c2              LDR      r2,[r0,#0x1c]
000004  2a00              CMP      r2,#0
000006  d000              BEQ      |L5.10|
;;;119            return pipe->read_portal->parent.rx_indicate(
000008  4710              BX       r2
                  |L5.10|
;;;120                    (rt_device_t)pipe->read_portal, size);
;;;121    
;;;122        return -RT_ENOSYS;
00000a  2005              MOVS     r0,#5
00000c  43c0              MVNS     r0,r0
;;;123    }
00000e  4770              BX       lr
;;;124    
                          ENDP


                          AREA ||i._portal_tx_complete||, CODE, READONLY, ALIGN=1

                  _portal_tx_complete PROC
;;;124    
;;;125    static rt_err_t _portal_tx_complete(rt_device_t dev, void *buf)
000000  6e00              LDR      r0,[r0,#0x60]
;;;126    {
;;;127        struct rt_pipe_device *pipe;
;;;128    
;;;129        RT_ASSERT(dev && dev->type == RT_Device_Class_Pipe);
;;;130    
;;;131        pipe = (struct rt_pipe_device*)dev;
;;;132    
;;;133        if (pipe->write_portal->parent.tx_complete)
000002  6a02              LDR      r2,[r0,#0x20]
000004  2a00              CMP      r2,#0
000006  d000              BEQ      |L6.10|
;;;134            return pipe->write_portal->parent.tx_complete(
000008  4710              BX       r2
                  |L6.10|
;;;135                    (rt_device_t)pipe->write_portal, buf);
;;;136    
;;;137        return -RT_ENOSYS;
00000a  2005              MOVS     r0,#5
00000c  43c0              MVNS     r0,r0
;;;138    }
00000e  4770              BX       lr
;;;139    
                          ENDP


                          AREA ||i._portal_write||, CODE, READONLY, ALIGN=1

                  _portal_write PROC
;;;100    
;;;101    static rt_size_t _portal_write(rt_device_t dev,
000000  b510              PUSH     {r4,lr}
;;;102                                   rt_off_t pos,
;;;103                                   const void *buffer,
;;;104                                   rt_size_t size)
;;;105    {
;;;106        return rt_device_write(PT_WRITE_DEV(dev),
000002  6c00              LDR      r0,[r0,#0x40]
000004  f7fffffe          BL       rt_device_write
;;;107                               pos, buffer, size);
;;;108    }
000008  bd10              POP      {r4,pc}
;;;109    
                          ENDP


                          AREA ||i.rt_portal_create||, CODE, READONLY, ALIGN=1

                  rt_portal_create PROC
;;;228    #ifdef RT_USING_HEAP
;;;229    rt_err_t rt_portal_create(const char *name,
000000  b570              PUSH     {r4-r6,lr}
;;;230                              const char *write_dev,
;;;231                              const char *read_dev)
;;;232    {
000002  460d              MOV      r5,r1
000004  4606              MOV      r6,r0
000006  4614              MOV      r4,r2
;;;233        struct rt_portal_device *portal;
;;;234    
;;;235        portal = (struct rt_portal_device*)rt_calloc(1, sizeof(*portal));
000008  2148              MOVS     r1,#0x48
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       rt_calloc
;;;236        if (portal == RT_NULL)
000010  2800              CMP      r0,#0
000012  d005              BEQ      |L8.32|
;;;237            return -RT_ENOMEM;
;;;238    
;;;239        return rt_portal_init(portal, name, write_dev, read_dev);
000014  4623              MOV      r3,r4
000016  462a              MOV      r2,r5
000018  4631              MOV      r1,r6
00001a  f7fffffe          BL       rt_portal_init
;;;240    }
00001e  bd70              POP      {r4-r6,pc}
                  |L8.32|
000020  2004              MOVS     r0,#4                 ;237
000022  43c0              MVNS     r0,r0                 ;237
000024  bd70              POP      {r4-r6,pc}
;;;241    RTM_EXPORT(rt_portal_create);
                          ENDP


                          AREA ||i.rt_portal_destroy||, CODE, READONLY, ALIGN=1

                  rt_portal_destroy PROC
;;;242    
;;;243    void rt_portal_destroy(struct rt_portal_device *portal)
000000  b510              PUSH     {r4,lr}
;;;244    {
000002  0004              MOVS     r4,r0
000004  d004              BEQ      |L9.16|
000006  f7fffffe          BL       rt_device_unregister
;;;245        if (portal == RT_NULL)
;;;246            return;
;;;247    
;;;248        rt_portal_detach(portal);
;;;249    
;;;250        rt_free(portal);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       rt_free
                  |L9.16|
;;;251    
;;;252        return;
;;;253    }
000010  bd10              POP      {r4,pc}
;;;254    RTM_EXPORT(rt_portal_destroy);
                          ENDP


                          AREA ||i.rt_portal_detach||, CODE, READONLY, ALIGN=1

                  rt_portal_detach PROC
;;;221     */
;;;222    rt_err_t rt_portal_detach(struct rt_portal_device *portal)
000000  b510              PUSH     {r4,lr}
;;;223    {
;;;224        return rt_device_unregister(&portal->parent);
000002  f7fffffe          BL       rt_device_unregister
;;;225    }
000006  bd10              POP      {r4,pc}
;;;226    RTM_EXPORT(rt_portal_detach);
                          ENDP


                          AREA ||i.rt_portal_init||, CODE, READONLY, ALIGN=2

                  rt_portal_init PROC
;;;169     */
;;;170    rt_err_t rt_portal_init(struct rt_portal_device *portal,
000000  b5ff              PUSH     {r0-r7,lr}
;;;171                            const char *portal_name,
;;;172                            const char *write_dev,
;;;173                            const char *read_dev)
;;;174    {
000002  4604              MOV      r4,r0
000004  b081              SUB      sp,sp,#4
;;;175        rt_device_t dev;
;;;176    
;;;177        RT_ASSERT(portal);
;;;178    
;;;179        portal->parent.type        = RT_Device_Class_Portal;
000006  2010              MOVS     r0,#0x10
000008  7520              STRB     r0,[r4,#0x14]
;;;180        portal->parent.init        = _portal_init;
00000a  481c              LDR      r0,|L11.124|
;;;181        portal->parent.open        = _portal_open;
00000c  6260              STR      r0,[r4,#0x24]
00000e  481c              LDR      r0,|L11.128|
;;;182        portal->parent.close       = _portal_close;
000010  62a0              STR      r0,[r4,#0x28]
000012  481c              LDR      r0,|L11.132|
;;;183        portal->parent.write       = _portal_write;
000014  62e0              STR      r0,[r4,#0x2c]
000016  481c              LDR      r0,|L11.136|
;;;184        portal->parent.read        = _portal_read;
000018  6360              STR      r0,[r4,#0x34]
00001a  481c              LDR      r0,|L11.140|
;;;185        /* single control of the two devices makes no sense */
;;;186        portal->parent.control     = RT_NULL;
00001c  6320              STR      r0,[r4,#0x30]
00001e  2000              MOVS     r0,#0
;;;187    
;;;188        dev = rt_device_find(write_dev);
000020  63a0              STR      r0,[r4,#0x38]
000022  461f              MOV      r7,r3                 ;174
000024  4610              MOV      r0,r2
000026  f7fffffe          BL       rt_device_find
;;;189        if (dev == RT_NULL)
;;;190            return -RT_ENOSYS;
00002a  4e19              LDR      r6,|L11.144|
00002c  0005              MOVS     r5,r0                 ;188
00002e  d01f              BEQ      |L11.112|
;;;191        RT_ASSERT(dev->type == RT_Device_Class_Pipe);
;;;192        portal->write_dev = dev;
;;;193        rt_device_set_tx_complete(&portal->parent, dev->tx_complete);
000030  6425              STR      r5,[r4,#0x40]
000032  4620              MOV      r0,r4
000034  6a29              LDR      r1,[r5,#0x20]
000036  f7fffffe          BL       rt_device_set_tx_complete
;;;194        rt_device_set_tx_complete(dev, _portal_tx_complete);
00003a  4916              LDR      r1,|L11.148|
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       rt_device_set_tx_complete
;;;195        ((struct rt_pipe_device*)dev)->write_portal = portal;
;;;196    
;;;197        dev = rt_device_find(read_dev);
000042  4638              MOV      r0,r7
000044  662c              STR      r4,[r5,#0x60]
000046  f7fffffe          BL       rt_device_find
00004a  0005              MOVS     r5,r0
;;;198        if (dev == RT_NULL)
00004c  d012              BEQ      |L11.116|
;;;199        {
;;;200            rt_device_set_tx_complete(dev, portal->parent.tx_complete);
;;;201            return -RT_ENOSYS;
;;;202        }
;;;203        RT_ASSERT(dev->type == RT_Device_Class_Pipe);
;;;204        portal->read_dev = dev;
;;;205        rt_device_set_rx_indicate(&portal->parent, dev->rx_indicate);
00004e  6465              STR      r5,[r4,#0x44]
000050  4620              MOV      r0,r4
000052  69e9              LDR      r1,[r5,#0x1c]
000054  f7fffffe          BL       rt_device_set_rx_indicate
;;;206        rt_device_set_rx_indicate(dev, _portal_rx_indicate);
000058  490f              LDR      r1,|L11.152|
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       rt_device_set_rx_indicate
;;;207        ((struct rt_pipe_device*)dev)->read_portal = portal;
;;;208    
;;;209        return rt_device_register(&(portal->parent),
000060  666c              STR      r4,[r5,#0x64]
000062  2203              MOVS     r2,#3
000064  4620              MOV      r0,r4
000066  9902              LDR      r1,[sp,#8]
000068  f7fffffe          BL       rt_device_register
                  |L11.108|
;;;210                                  portal_name,
;;;211                                  RT_DEVICE_FLAG_RDWR);
;;;212    }
00006c  b005              ADD      sp,sp,#0x14
00006e  bdf0              POP      {r4-r7,pc}
                  |L11.112|
000070  4630              MOV      r0,r6                 ;190
000072  e7fb              B        |L11.108|
                  |L11.116|
000074  6a21              LDR      r1,[r4,#0x20]         ;200
000076  f7fffffe          BL       rt_device_set_tx_complete
00007a  e7f9              B        |L11.112|
;;;213    RTM_EXPORT(rt_portal_init);
                          ENDP

                  |L11.124|
                          DCD      _portal_init
                  |L11.128|
                          DCD      _portal_open
                  |L11.132|
                          DCD      _portal_close
                  |L11.136|
                          DCD      _portal_write
                  |L11.140|
                          DCD      _portal_read
                  |L11.144|
                          DCD      0xfffffffa
                  |L11.148|
                          DCD      _portal_tx_complete
                  |L11.152|
                          DCD      _portal_rx_indicate
