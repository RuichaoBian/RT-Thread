; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\finsh_heap.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\finsh_heap.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 --omf_browse=.\objects\finsh_heap.crf ..\..\components\finsh\finsh_heap.c]
                          THUMB

                          AREA ||i.finsh_block_insert||, CODE, READONLY, ALIGN=1

                  finsh_block_insert PROC
;;;165     */
;;;166    void finsh_block_insert(struct finsh_block_header** list, struct finsh_block_header* header)
000000  6802              LDR      r2,[r0,#0]
;;;167    {
;;;168        struct finsh_block_header* node;
;;;169    
;;;170        if (*list == NULL)
000002  2a00              CMP      r2,#0
000004  d002              BEQ      |L1.12|
;;;171        {
;;;172            *list = header;
;;;173            return;
;;;174        }
;;;175    
;;;176        /* find out insert point */
;;;177    	node = *list;
;;;178    
;;;179    	if (node > header)
000006  428a              CMP      r2,r1
000008  d905              BLS      |L1.22|
;;;180    	{
;;;181    		/* insert node in the header of list */
;;;182    		header->next = node;
00000a  604a              STR      r2,[r1,#4]
                  |L1.12|
00000c  6001              STR      r1,[r0,#0]            ;173
;;;183    		*list = header;
;;;184    
;;;185    		return;
;;;186    	}
;;;187    	else
;;;188    	{
;;;189    		for (node = *list; node; node = node->next)
;;;190    		{
;;;191        		if (node->next > header) break;
;;;192    
;;;193        		if (node->next == NULL) break;
;;;194    		}
;;;195    	}
;;;196    
;;;197        /* insert node */
;;;198        if (node->next != NULL) header->next = node->next;
;;;199        node->next      = header;
;;;200    }
00000e  4770              BX       lr
                  |L1.16|
000010  2800              CMP      r0,#0                 ;193
000012  d006              BEQ      |L1.34|
000014  4602              MOV      r2,r0                 ;189
                  |L1.22|
000016  6850              LDR      r0,[r2,#4]            ;191
000018  4288              CMP      r0,r1                 ;191
00001a  d9f9              BLS      |L1.16|
00001c  2800              CMP      r0,#0                 ;198
00001e  d000              BEQ      |L1.34|
000020  6048              STR      r0,[r1,#4]            ;198
                  |L1.34|
000022  6051              STR      r1,[r2,#4]            ;199
000024  4770              BX       lr
;;;201    
                          ENDP


                          AREA ||i.finsh_block_merge||, CODE, READONLY, ALIGN=1

                  finsh_block_merge PROC
;;;247    
;;;248    void finsh_block_merge(struct finsh_block_header** list, struct finsh_block_header* header)
000000  b530              PUSH     {r4,r5,lr}
;;;249    {
;;;250        struct finsh_block_header* prev_node;
;;;251        struct finsh_block_header* next_node;
;;;252    
;;;253        next_node = header->next;
;;;254    
;;;255        if (*list == header) prev_node = NULL;
000002  6800              LDR      r0,[r0,#0]
;;;256        else
;;;257        {
;;;258            /* find out the previous header */
;;;259            for (prev_node = *list; prev_node; prev_node =prev_node->next)
;;;260            {
;;;261                if (prev_node->next == header)
;;;262                    break;
;;;263            }
;;;264        }
;;;265    
;;;266        /* try merge node */
;;;267    
;;;268        /* merge to previous node */
;;;269        if (prev_node != NULL &&
;;;270            ((u_char*)prev_node + prev_node->length + sizeof(struct finsh_block_header)
;;;271            == (u_char*)header))
;;;272        {
;;;273            /* is it close to next node? */
;;;274            if ((next_node != NULL) &&
;;;275                ((u_char*)header + header->length + sizeof(struct finsh_block_header)
000004  460c              MOV      r4,r1
000006  684a              LDR      r2,[r1,#4]            ;255
000008  3408              ADDS     r4,r4,#8
00000a  4288              CMP      r0,r1                 ;255
00000c  d023              BEQ      |L2.86|
00000e  e003              B        |L2.24|
                  |L2.16|
000010  6843              LDR      r3,[r0,#4]            ;261
000012  428b              CMP      r3,r1                 ;261
000014  d003              BEQ      |L2.30|
000016  4618              MOV      r0,r3                 ;261
                  |L2.24|
000018  2800              CMP      r0,#0                 ;259
00001a  d1f9              BNE      |L2.16|
00001c  e01b              B        |L2.86|
                  |L2.30|
00001e  2800              CMP      r0,#0                 ;269
000020  d019              BEQ      |L2.86|
000022  4605              MOV      r5,r0                 ;270
000024  6803              LDR      r3,[r0,#0]            ;270
000026  3508              ADDS     r5,r5,#8              ;270
000028  195d              ADDS     r5,r3,r5              ;270
00002a  428d              CMP      r5,r1                 ;270
00002c  d113              BNE      |L2.86|
00002e  2a00              CMP      r2,#0                 ;274
000030  d00a              BEQ      |L2.72|
000032  680d              LDR      r5,[r1,#0]
000034  192c              ADDS     r4,r5,r4
000036  4294              CMP      r4,r2
000038  d106              BNE      |L2.72|
;;;276                == (u_char*)next_node))
;;;277            {
;;;278                /* merge three node */
;;;279            	prev_node->length += header->length + next_node->length +
00003a  6811              LDR      r1,[r2,#0]
00003c  195b              ADDS     r3,r3,r5
00003e  3110              ADDS     r1,r1,#0x10
000040  1859              ADDS     r1,r3,r1
;;;280                    2 * sizeof(struct finsh_block_header);
;;;281    
;;;282                prev_node->next = next_node->next;
000042  6001              STR      r1,[r0,#0]
000044  6851              LDR      r1,[r2,#4]
000046  e004              B        |L2.82|
                  |L2.72|
;;;283            }
;;;284            else
;;;285            {
;;;286                prev_node->length += header->length + sizeof(struct finsh_block_header);
000048  680a              LDR      r2,[r1,#0]
00004a  189a              ADDS     r2,r3,r2
00004c  3208              ADDS     r2,r2,#8
;;;287                prev_node->next = header->next;
00004e  6002              STR      r2,[r0,#0]
000050  6849              LDR      r1,[r1,#4]
                  |L2.82|
000052  6041              STR      r1,[r0,#4]            ;282
                  |L2.84|
;;;288            }
;;;289        }
;;;290        else /* merge to last node */
;;;291        if ( (next_node != NULL) &&
;;;292            ((u_char*)header + header->length + sizeof(struct finsh_block_header)
;;;293            == (u_char*)next_node))
;;;294        {
;;;295            header->length += next_node->length + sizeof(struct finsh_block_header);
;;;296            header->next = next_node->next;
;;;297        }
;;;298    }
000054  bd30              POP      {r4,r5,pc}
                  |L2.86|
000056  2a00              CMP      r2,#0                 ;291
000058  d0fc              BEQ      |L2.84|
00005a  6808              LDR      r0,[r1,#0]            ;292
00005c  1903              ADDS     r3,r0,r4              ;292
00005e  4293              CMP      r3,r2                 ;292
000060  d1f8              BNE      |L2.84|
000062  6813              LDR      r3,[r2,#0]            ;295
000064  18c0              ADDS     r0,r0,r3              ;295
000066  3008              ADDS     r0,r0,#8              ;295
000068  6008              STR      r0,[r1,#0]            ;296
00006a  6850              LDR      r0,[r2,#4]            ;296
00006c  6048              STR      r0,[r1,#4]            ;296
00006e  bd30              POP      {r4,r5,pc}
                          ENDP


                          AREA ||i.finsh_block_remove||, CODE, READONLY, ALIGN=1

                  finsh_block_remove PROC
;;;204     */
;;;205    void finsh_block_remove(struct finsh_block_header** list, struct finsh_block_header* header)
000000  6802              LDR      r2,[r0,#0]
;;;206    {
;;;207        struct finsh_block_header* node;
;;;208    
;;;209        node = *list;
;;;210        if (node == header)
000002  428a              CMP      r2,r1
000004  d10b              BNE      |L3.30|
;;;211        {
;;;212            /* remove list header */
;;;213            *list = header->next;
000006  684a              LDR      r2,[r1,#4]
;;;214            header->next = NULL;
000008  6002              STR      r2,[r0,#0]
00000a  2000              MOVS     r0,#0
;;;215    
;;;216            return;
00000c  6048              STR      r0,[r1,#4]
;;;217        }
;;;218    
;;;219        for (node = *list; node != NULL; node = node->next)
;;;220        {
;;;221            if (node->next == header)
;;;222            {
;;;223                node->next = header->next;
;;;224                break;
;;;225            }
;;;226        }
;;;227    }
00000e  4770              BX       lr
                  |L3.16|
000010  6850              LDR      r0,[r2,#4]            ;221
000012  4288              CMP      r0,r1                 ;221
000014  d102              BNE      |L3.28|
000016  6848              LDR      r0,[r1,#4]            ;223
000018  6050              STR      r0,[r2,#4]            ;224
00001a  4770              BX       lr
                  |L3.28|
00001c  4602              MOV      r2,r0                 ;219
                  |L3.30|
00001e  2a00              CMP      r2,#0                 ;219
000020  d1f6              BNE      |L3.16|
000022  4770              BX       lr
;;;228    
                          ENDP


                          AREA ||i.finsh_heap_allocate||, CODE, READONLY, ALIGN=2

                  finsh_heap_allocate PROC
;;;72      */
;;;73     void* finsh_heap_allocate(size_t size)
000000  b5f8              PUSH     {r3-r7,lr}
;;;74     {
000002  1cc0              ADDS     r0,r0,#3
;;;75     	struct finsh_block_header* header;
;;;76     
;;;77     	size = HEAP_ALIGN_SIZE(size);
000004  0886              LSRS     r6,r0,#2
000006  00b6              LSLS     r6,r6,#2
;;;78     
;;;79         /* find the first fit block */
;;;80         for (header = free_list;
000008  4827              LDR      r0,|L4.168|
;;;81             ((header != NULL) && (header->length <= size + sizeof(struct finsh_block_header)));
00000a  4635              MOV      r5,r6
00000c  3508              ADDS     r5,r5,#8
00000e  6804              LDR      r4,[r0,#0]            ;74  ; free_list
000010  e000              B        |L4.20|
                  |L4.18|
;;;82             header = header->next) ;
000012  6864              LDR      r4,[r4,#4]
                  |L4.20|
000014  2c00              CMP      r4,#0                 ;81
000016  d003              BEQ      |L4.32|
000018  6821              LDR      r1,[r4,#0]            ;81
00001a  42a9              CMP      r1,r5                 ;81
00001c  d9f9              BLS      |L4.18|
00001e  e024              B        |L4.106|
                  |L4.32|
000020  4821              LDR      r0,|L4.168|
000022  4f22              LDR      r7,|L4.172|
000024  6844              LDR      r4,[r0,#4]            ;81  ; allocate_list
000026  e015              B        |L4.84|
                  |L4.40|
000028  2100              MOVS     r1,#0                 ;81
00002a  4623              MOV      r3,r4                 ;81
00002c  3308              ADDS     r3,r3,#8              ;81
                  |L4.46|
00002e  2018              MOVS     r0,#0x18              ;81
000030  4348              MULS     r0,r1,r0              ;81
000032  19c0              ADDS     r0,r0,r7              ;81
000034  7c42              LDRB     r2,[r0,#0x11]         ;81
000036  2a00              CMP      r2,#0                 ;81
000038  d002              BEQ      |L4.64|
00003a  6940              LDR      r0,[r0,#0x14]         ;81
00003c  4298              CMP      r0,r3                 ;81
00003e  d002              BEQ      |L4.70|
                  |L4.64|
000040  1c49              ADDS     r1,r1,#1              ;81
000042  2908              CMP      r1,#8                 ;81
000044  dbf3              BLT      |L4.46|
                  |L4.70|
000046  4620              MOV      r0,r4                 ;81
000048  6864              LDR      r4,[r4,#4]            ;81
00004a  2908              CMP      r1,#8                 ;81
00004c  d102              BNE      |L4.84|
00004e  3008              ADDS     r0,r0,#8              ;81
000050  f7fffffe          BL       finsh_heap_free
                  |L4.84|
000054  2c00              CMP      r4,#0                 ;81
000056  d1e7              BNE      |L4.40|
;;;83     
;;;84     	if (header == NULL)
;;;85     	{
;;;86     		finsh_heap_gc();
;;;87     
;;;88     		/* find the first fit block */
;;;89     		for (header = free_list;
000058  4813              LDR      r0,|L4.168|
00005a  6804              LDR      r4,[r0,#0]  ; free_list
00005c  e000              B        |L4.96|
                  |L4.94|
;;;90     			((header != NULL) && (header->length < size + sizeof(struct finsh_block_header)));
;;;91     			header = header->next) ;
00005e  6864              LDR      r4,[r4,#4]
                  |L4.96|
000060  2c00              CMP      r4,#0                 ;90
000062  d01f              BEQ      |L4.164|
000064  6820              LDR      r0,[r4,#0]            ;90
000066  42a8              CMP      r0,r5                 ;90
000068  d3f9              BCC      |L4.94|
                  |L4.106|
00006a  6821              LDR      r1,[r4,#0]            ;90
00006c  19a0              ADDS     r0,r4,r6              ;90
00006e  1b89              SUBS     r1,r1,r6              ;90
000070  3908              SUBS     r1,r1,#8              ;90
000072  6081              STR      r1,[r0,#8]            ;90
000074  6026              STR      r6,[r4,#0]            ;90
000076  6861              LDR      r1,[r4,#4]            ;90
000078  60c1              STR      r1,[r0,#0xc]          ;90
00007a  3008              ADDS     r0,r0,#8              ;90
;;;92     
;;;93     		/* there is no memory */
;;;94     		if (header == NULL) return NULL;
;;;95     	}
;;;96     
;;;97         /* split block */
;;;98     	finsh_block_split(header, size);
;;;99     
;;;100    	/* remove from free list */
;;;101    	finsh_block_remove(&free_list, header);
00007c  6060              STR      r0,[r4,#4]
00007e  4621              MOV      r1,r4
000080  4809              LDR      r0,|L4.168|
000082  f7fffffe          BL       finsh_block_remove
;;;102    	header->next = NULL;
000086  2000              MOVS     r0,#0
;;;103    
;;;104        /* insert to allocate list */
;;;105        finsh_block_insert(&allocate_list, header);
000088  6060              STR      r0,[r4,#4]
00008a  4807              LDR      r0,|L4.168|
00008c  4621              MOV      r1,r4
00008e  1d00              ADDS     r0,r0,#4
000090  f7fffffe          BL       finsh_block_insert
;;;106    
;;;107    	memset(finsh_block_get_data(header), 0, size);
000094  4620              MOV      r0,r4
000096  3008              ADDS     r0,r0,#8
000098  4631              MOV      r1,r6
00009a  4604              MOV      r4,r0
00009c  f7fffffe          BL       __aeabi_memclr4
0000a0  4620              MOV      r0,r4
;;;108    
;;;109    	return finsh_block_get_data(header);
;;;110    }
0000a2  bdf8              POP      {r3-r7,pc}
                  |L4.164|
0000a4  2000              MOVS     r0,#0                 ;94
0000a6  bdf8              POP      {r3-r7,pc}
;;;111    
                          ENDP

                  |L4.168|
                          DCD      ||.data||
                  |L4.172|
                          DCD      global_variable

                          AREA ||i.finsh_heap_free||, CODE, READONLY, ALIGN=2

                  finsh_heap_free PROC
;;;114     */
;;;115    void  finsh_heap_free(void*ptr)
000000  b510              PUSH     {r4,lr}
;;;116    {
000002  3808              SUBS     r0,r0,#8
;;;117        struct finsh_block_header* header;
;;;118    
;;;119        /* get block header */
;;;120    	header = finsh_block_get_header(ptr);
000004  4604              MOV      r4,r0
;;;121    
;;;122        /* remove from allocate list */
;;;123    	finsh_block_remove(&allocate_list, header);
000006  4601              MOV      r1,r0
000008  4806              LDR      r0,|L5.36|
00000a  f7fffffe          BL       finsh_block_remove
;;;124    
;;;125    	/* insert to free list */
;;;126    	finsh_block_insert(&free_list, header);
00000e  4805              LDR      r0,|L5.36|
000010  4621              MOV      r1,r4
000012  1f00              SUBS     r0,r0,#4
000014  f7fffffe          BL       finsh_block_insert
;;;127    	finsh_block_merge(&free_list, header);
000018  4802              LDR      r0,|L5.36|
00001a  4621              MOV      r1,r4
00001c  1f00              SUBS     r0,r0,#4
00001e  f7fffffe          BL       finsh_block_merge
;;;128    }
000022  bd10              POP      {r4,pc}
;;;129    
                          ENDP

                  |L5.36|
                          DCD      ||.data||+0x4

                          AREA ||i.finsh_heap_init||, CODE, READONLY, ALIGN=2

                  finsh_heap_init PROC
;;;54     
;;;55     int finsh_heap_init(void)
000000  b510              PUSH     {r4,lr}
;;;56     {
;;;57     	/* clear heap to zero */
;;;58     	memset(&finsh_heap[0], 0, sizeof(finsh_heap));
000002  2180              MOVS     r1,#0x80
000004  4806              LDR      r0,|L6.32|
000006  f7fffffe          BL       __aeabi_memclr4
;;;59     
;;;60     	/* init free and alloc list */
;;;61         free_list           = BLOCK_HEADER(&finsh_heap[0]);
00000a  4906              LDR      r1,|L6.36|
00000c  4804              LDR      r0,|L6.32|
;;;62     	free_list->length   = FINSH_HEAP_MAX - sizeof(struct finsh_block_header);
00000e  2278              MOVS     r2,#0x78
000010  6008              STR      r0,[r1,#0]  ; free_list
;;;63         free_list->next     = NULL;
000012  6002              STR      r2,[r0,#0]
000014  2200              MOVS     r2,#0
;;;64     
;;;65         allocate_list       = NULL;
000016  6042              STR      r2,[r0,#4]
;;;66     
;;;67         return 0;
000018  4610              MOV      r0,r2
00001a  604a              STR      r2,[r1,#4]  ; allocate_list
;;;68     }
00001c  bd10              POP      {r4,pc}
;;;69     
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      ||.bss||
                  |L6.36|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  finsh_heap
                          %        128

                          AREA ||.data||, DATA, ALIGN=2

                  free_list
                          DCD      0x00000000
                  allocate_list
                          DCD      0x00000000
