; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\adc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\adc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 --omf_browse=.\objects\adc.crf Libraries\StdDriver\src\adc.c]
                          THUMB

                          AREA ||i.ADC_Close||, CODE, READONLY, ALIGN=1

                  ADC_Close PROC
;;;62       */
;;;63     void ADC_Close(ADC_T *adc)
000000  6a01              LDR      r1,[r0,#0x20]
;;;64     {
;;;65         adc->ADCR &= (~ADC_ADCR_ADEN_Msk);
000002  0849              LSRS     r1,r1,#1
000004  0049              LSLS     r1,r1,#1
000006  6201              STR      r1,[r0,#0x20]
;;;66         return;
;;;67     }
000008  4770              BX       lr
;;;68     
                          ENDP


                          AREA ||i.ADC_DisableHWTrigger||, CODE, READONLY, ALIGN=1

                  ADC_DisableHWTrigger PROC
;;;100      */
;;;101    void ADC_DisableHWTrigger(ADC_T *adc)
000000  6a01              LDR      r1,[r0,#0x20]
;;;102    {
;;;103        adc->ADCR &= ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk);
000002  22ff              MOVS     r2,#0xff
000004  32f1              ADDS     r2,r2,#0xf1
000006  4391              BICS     r1,r1,r2
000008  6201              STR      r1,[r0,#0x20]
;;;104        return;
;;;105    }
00000a  4770              BX       lr
;;;106    
                          ENDP


                          AREA ||i.ADC_DisableInt||, CODE, READONLY, ALIGN=1

                  ADC_DisableInt PROC
;;;145      */
;;;146    void ADC_DisableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;147    {
;;;148        if(u32Mask & ADC_ADF_INT)
;;;149            adc->ADCR &= ~ADC_ADCR_ADIE_Msk;
000002  2202              MOVS     r2,#2
000004  2b00              CMP      r3,#0                 ;148
000006  d002              BEQ      |L3.14|
000008  6a03              LDR      r3,[r0,#0x20]
00000a  4393              BICS     r3,r3,r2
00000c  6203              STR      r3,[r0,#0x20]
                  |L3.14|
;;;150        if(u32Mask & ADC_CMP0_INT)
00000e  078b              LSLS     r3,r1,#30
000010  d502              BPL      |L3.24|
;;;151            adc->ADCMPR[0] &= ~ADC_ADCMPR_CMPIE_Msk;
000012  6a83              LDR      r3,[r0,#0x28]
000014  4393              BICS     r3,r3,r2
000016  6283              STR      r3,[r0,#0x28]
                  |L3.24|
;;;152        if(u32Mask & ADC_CMP1_INT)
000018  0749              LSLS     r1,r1,#29
00001a  d502              BPL      |L3.34|
;;;153            adc->ADCMPR[1] &= ~ADC_ADCMPR_CMPIE_Msk;
00001c  6ac1              LDR      r1,[r0,#0x2c]
00001e  4391              BICS     r1,r1,r2
000020  62c1              STR      r1,[r0,#0x2c]
                  |L3.34|
;;;154    
;;;155        return;
;;;156    }
000022  4770              BX       lr
;;;157    
                          ENDP


                          AREA ||i.ADC_EnableHWTrigger||, CODE, READONLY, ALIGN=1

                  ADC_EnableHWTrigger PROC
;;;83       */
;;;84     void ADC_EnableHWTrigger(ADC_T *adc,
000000  b510              PUSH     {r4,lr}
;;;85                              uint32_t u32Source,
;;;86                              uint32_t u32Param)
;;;87     {
;;;88         adc->ADCR &= ~(ADC_ADCR_TRGS_Msk | ADC_ADCR_TRGCOND_Msk | ADC_ADCR_TRGEN_Msk);
000002  6a03              LDR      r3,[r0,#0x20]
000004  24ff              MOVS     r4,#0xff
000006  34f1              ADDS     r4,r4,#0xf1
000008  43a3              BICS     r3,r3,r4
00000a  6203              STR      r3,[r0,#0x20]
;;;89     
;;;90         adc->ADCR |= u32Source | u32Param | ADC_ADCR_TRGEN_Msk;
00000c  6a03              LDR      r3,[r0,#0x20]
00000e  430b              ORRS     r3,r3,r1
000010  21ff              MOVS     r1,#0xff
000012  3101              ADDS     r1,#1
000014  430a              ORRS     r2,r2,r1
000016  4313              ORRS     r3,r3,r2
000018  6203              STR      r3,[r0,#0x20]
;;;91     
;;;92         return;
;;;93     }
00001a  bd10              POP      {r4,pc}
;;;94     
                          ENDP


                          AREA ||i.ADC_EnableInt||, CODE, READONLY, ALIGN=1

                  ADC_EnableInt PROC
;;;121      */
;;;122    void ADC_EnableInt(ADC_T *adc, uint32_t u32Mask)
000000  07cb              LSLS     r3,r1,#31
;;;123    {
;;;124        if(u32Mask & ADC_ADF_INT)
;;;125            adc->ADCR |= ADC_ADCR_ADIE_Msk;
000002  2202              MOVS     r2,#2
000004  2b00              CMP      r3,#0                 ;124
000006  d002              BEQ      |L5.14|
000008  6a03              LDR      r3,[r0,#0x20]
00000a  4313              ORRS     r3,r3,r2
00000c  6203              STR      r3,[r0,#0x20]
                  |L5.14|
;;;126        if(u32Mask & ADC_CMP0_INT)
00000e  078b              LSLS     r3,r1,#30
000010  d502              BPL      |L5.24|
;;;127            adc->ADCMPR[0] |= ADC_ADCMPR_CMPIE_Msk;
000012  6a83              LDR      r3,[r0,#0x28]
000014  4313              ORRS     r3,r3,r2
000016  6283              STR      r3,[r0,#0x28]
                  |L5.24|
;;;128        if(u32Mask & ADC_CMP1_INT)
000018  0749              LSLS     r1,r1,#29
00001a  d502              BPL      |L5.34|
;;;129            adc->ADCMPR[1] |= ADC_ADCMPR_CMPIE_Msk;
00001c  6ac1              LDR      r1,[r0,#0x2c]
00001e  4311              ORRS     r1,r1,r2
000020  62c1              STR      r1,[r0,#0x2c]
                  |L5.34|
;;;130    
;;;131        return;
;;;132    }
000022  4770              BX       lr
;;;133    
                          ENDP


                          AREA ||i.ADC_Open||, CODE, READONLY, ALIGN=2

                  ADC_Open PROC
;;;41       */
;;;42     void ADC_Open(ADC_T *adc,
000000  b530              PUSH     {r4,r5,lr}
;;;43                   uint32_t u32InputMode,
;;;44                   uint32_t u32OpMode,
;;;45                   uint32_t u32ChMask)
;;;46     {
;;;47     
;;;48         adc->ADCR = (adc->ADCR & (~(ADC_ADCR_DIFFEN_Msk | ADC_ADCR_ADMD_Msk))) | \
000002  6a04              LDR      r4,[r0,#0x20]
000004  4d05              LDR      r5,|L6.28|
000006  402c              ANDS     r4,r4,r5
000008  430c              ORRS     r4,r4,r1
00000a  4314              ORRS     r4,r4,r2
00000c  6204              STR      r4,[r0,#0x20]
;;;49                     u32InputMode | \
;;;50                     u32OpMode;
;;;51     
;;;52         adc->ADCHER  = (adc->ADCHER & ~ADC_ADCHER_CHEN_Msk) | (u32ChMask);
00000e  6a41              LDR      r1,[r0,#0x24]
000010  0a09              LSRS     r1,r1,#8
000012  0209              LSLS     r1,r1,#8
000014  4319              ORRS     r1,r1,r3
000016  6241              STR      r1,[r0,#0x24]
;;;53     
;;;54         return;
;;;55     }
000018  bd30              POP      {r4,r5,pc}
;;;56     
                          ENDP

00001a  0000              DCW      0x0000
                  |L6.28|
                          DCD      0xfffffbf3

;*** Start embedded assembler ***

#line 1 "Libraries\\StdDriver\\src\\adc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REV16|
#line 118 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_adc_c_ADC_Open____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_adc_c_ADC_Open____REVSH|
#line 132
|__asm___5_adc_c_ADC_Open____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
