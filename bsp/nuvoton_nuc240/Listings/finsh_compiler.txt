; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\finsh_compiler.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\finsh_compiler.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 --omf_browse=.\objects\finsh_compiler.crf ..\..\components\finsh\finsh_compiler.c]
                          THUMB

                          AREA ||i.finsh_compile||, CODE, READONLY, ALIGN=2

                  finsh_compile PROC
;;;42     
;;;43     static int finsh_compile(struct finsh_node* node)
000000  b5f8              PUSH     {r3-r7,lr}
;;;44     {
000002  0004              MOVS     r4,r0
000004  d074              BEQ      |L1.240|
;;;45         if (node != NULL)
;;;46         {
;;;47             /* compile child node */
;;;48             if (finsh_node_child(node) != NULL)
000006  6920              LDR      r0,[r4,#0x10]
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L1.16|
;;;49                 finsh_compile(finsh_node_child(node));
00000c  f7fffffe          BL       finsh_compile
                  |L1.16|
;;;50     
;;;51             /* compile current node */
;;;52             switch (node->node_type)
000010  7827              LDRB     r7,[r4,#0]
000012  2200              MOVS     r2,#0
000014  2001              MOVS     r0,#1
;;;53             {
;;;54             case FINSH_NODE_ID:
;;;55                 {
;;;56                     /* identifier::syscall */
;;;57                     if (node->idtype & FINSH_IDTYPE_SYSCALL)
;;;58                     {
;;;59                         /* load address */
;;;60                         finsh_code_byte(FINSH_OP_LD_DWORD);
;;;61                         finsh_code_dword((long)node->id.syscall->func);
;;;62                     }
;;;63                     /* identifier::sysvar */
;;;64                     else if (node->idtype & FINSH_IDTYPE_SYSVAR)
;;;65                     {
;;;66                         struct finsh_sysvar* sysvar;
;;;67     
;;;68                         sysvar = node->id.sysvar;
;;;69                         if (sysvar != NULL)
;;;70                         {
;;;71                             switch (sysvar->type)
;;;72                             {
;;;73                             case finsh_type_char:
;;;74                             case finsh_type_uchar:
;;;75                                 if (node->idtype & FINSH_IDTYPE_ADDRESS)
;;;76                                 {
;;;77                                     /* load address */
;;;78                                     finsh_code_byte(FINSH_OP_LD_DWORD);
;;;79                                 }
;;;80                                 else
;;;81                                 {
;;;82                                     /* load value */
;;;83                                     finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
;;;84                                 }
;;;85     
;;;86                                 finsh_code_dword((long)(sysvar->var));
;;;87                                 break;
;;;88     
;;;89                             case finsh_type_short:
;;;90                             case finsh_type_ushort:
;;;91                                 if (node->idtype & FINSH_IDTYPE_ADDRESS)
;;;92                                 {
;;;93                                     /* load address */
;;;94                                     finsh_code_byte(FINSH_OP_LD_DWORD);
;;;95                                 }
;;;96                                 else
;;;97                                 {
;;;98                                     /* load value */
;;;99                                     finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
;;;100                                }
;;;101    
;;;102                                finsh_code_dword((long)(sysvar->var));
;;;103                                break;
;;;104    
;;;105                            case finsh_type_int:
;;;106                            case finsh_type_uint:
;;;107                            case finsh_type_long:
;;;108                            case finsh_type_ulong:
;;;109                            case finsh_type_charp:
;;;110                            case finsh_type_shortp:
;;;111                            case finsh_type_intp:
;;;112                            case finsh_type_longp:
;;;113                                if (node->idtype & FINSH_IDTYPE_ADDRESS)
;;;114                                {
;;;115                                    /* load address */
;;;116                                    finsh_code_byte(FINSH_OP_LD_DWORD);
;;;117                                }
;;;118                                else
;;;119                                {
;;;120                                    /* load value */
;;;121                                    finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
000016  2527              MOVS     r5,#0x27
;;;122                                }
;;;123    
;;;124                                finsh_code_dword((long)(sysvar->var));
;;;125                                break;
;;;126                            }
;;;127                        }
;;;128                    }
;;;129                    /* identifier::var */
;;;130                    else
;;;131                    {
;;;132                        struct finsh_var* var;
;;;133    
;;;134                        var = node->id.var;
;;;135                        if (var != NULL)
;;;136                        {
;;;137                            switch (var->type)
;;;138                            {
;;;139                            case finsh_type_char:
;;;140                            case finsh_type_uchar:
;;;141                                if (node->idtype & FINSH_IDTYPE_ADDRESS)
;;;142                                {
;;;143                                    /* load address */
;;;144                                    finsh_code_byte(FINSH_OP_LD_DWORD);
;;;145                                }
;;;146                                else
;;;147                                {
;;;148                                    /* load value */
;;;149                                    finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
;;;150                                }
;;;151    
;;;152                                finsh_code_dword((long)&(var->value.char_value));
;;;153                                break;
;;;154    
;;;155                            case finsh_type_short:
;;;156                            case finsh_type_ushort:
;;;157                                if (node->idtype & FINSH_IDTYPE_ADDRESS)
;;;158                                {
;;;159                                    /* load address */
;;;160                                    finsh_code_byte(FINSH_OP_LD_DWORD);
;;;161                                }
;;;162                                else
;;;163                                {
;;;164                                    /* load value */
;;;165                                    finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
;;;166                                }
;;;167    
;;;168                                finsh_code_dword((long)&(var->value.short_value));
;;;169                                break;
;;;170    
;;;171                            case finsh_type_int:
;;;172                            case finsh_type_uint:
;;;173                            case finsh_type_long:
;;;174                            case finsh_type_ulong:
;;;175                            case finsh_type_charp:
;;;176                            case finsh_type_shortp:
;;;177                            case finsh_type_intp:
;;;178                            case finsh_type_longp:
;;;179                                if (node->idtype & FINSH_IDTYPE_ADDRESS)
;;;180                                {
;;;181                                    /* load address */
;;;182                                    finsh_code_byte(FINSH_OP_LD_DWORD);
;;;183                                }
;;;184                                else
;;;185                                {
;;;186                                    /* load value */
;;;187                                    finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
;;;188                                }
;;;189    
;;;190                                finsh_code_dword((long)&(var->value.long_value));
;;;191                                break;
;;;192                            }
;;;193                        }
;;;194                    }
;;;195                }
;;;196                break;
;;;197    
;;;198            /* load const */
;;;199            case FINSH_NODE_VALUE_CHAR:
;;;200                finsh_code_byte(FINSH_OP_LD_BYTE);
;;;201                finsh_code_byte(node->value.char_value);
;;;202                break;
;;;203    
;;;204            case FINSH_NODE_VALUE_INT:
;;;205            case FINSH_NODE_VALUE_LONG:
;;;206                finsh_code_byte(FINSH_OP_LD_DWORD);
;;;207                finsh_code_dword(node->value.long_value);
;;;208                break;
;;;209    
;;;210            case FINSH_NODE_VALUE_NULL:
;;;211            case FINSH_NODE_VALUE_STRING:
;;;212                finsh_code_byte(FINSH_OP_LD_DWORD);
;;;213                finsh_code_dword((u_long)node->value.ptr);
;;;214                break;
;;;215    
;;;216            /* arithmetic operation */
;;;217            case FINSH_NODE_SYS_ADD:
;;;218                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_ADD_BYTE);
;;;219                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_ADD_WORD);
;;;220                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_ADD_DWORD);
;;;221                break;
;;;222    
;;;223            case FINSH_NODE_SYS_SUB:
;;;224                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_SUB_BYTE);
;;;225                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_SUB_WORD);
;;;226                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_SUB_DWORD);
;;;227                break;
;;;228    
;;;229            case FINSH_NODE_SYS_MUL:
;;;230                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_MUL_BYTE);
;;;231                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_MUL_WORD);
;;;232                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_MUL_DWORD);
;;;233                break;
;;;234    
;;;235            case FINSH_NODE_SYS_DIV:
;;;236                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_DIV_BYTE);
;;;237                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_DIV_WORD);
;;;238                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_DIV_DWORD);
;;;239                break;
;;;240    
;;;241            case FINSH_NODE_SYS_MOD:
;;;242                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_MOD_BYTE);
;;;243                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_MOD_WORD);
;;;244                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_MOD_DWORD);
;;;245                break;
;;;246    
;;;247            /* bit operation */
;;;248            case FINSH_NODE_SYS_AND:
;;;249                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_AND_BYTE);
;;;250                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_AND_WORD);
;;;251                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_AND_DWORD);
;;;252                break;
;;;253    
;;;254            case FINSH_NODE_SYS_OR:
;;;255                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_OR_BYTE);
;;;256                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_OR_WORD);
;;;257                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_OR_DWORD);
;;;258                break;
;;;259    
;;;260            case FINSH_NODE_SYS_XOR:
;;;261                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_XOR_BYTE);
;;;262                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_XOR_WORD);
;;;263                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_XOR_DWORD);
;;;264                break;
;;;265    
;;;266            case FINSH_NODE_SYS_BITWISE:
;;;267                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_BITWISE_BYTE);
;;;268                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_BITWISE_WORD);
;;;269                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_BITWISE_DWORD);
;;;270                break;
;;;271    
;;;272            case FINSH_NODE_SYS_SHL:
;;;273                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_SHL_BYTE);
;;;274                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_SHL_WORD);
;;;275                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_SHL_DWORD);
;;;276                break;
;;;277    
;;;278            case FINSH_NODE_SYS_SHR:
;;;279                if (node->data_type == FINSH_DATA_TYPE_BYTE) finsh_code_byte(FINSH_OP_SHR_BYTE);
;;;280                else if (node->data_type == FINSH_DATA_TYPE_WORD) finsh_code_byte(FINSH_OP_SHR_WORD);
;;;281                else if (node->data_type == FINSH_DATA_TYPE_DWORD) finsh_code_byte(FINSH_OP_SHR_DWORD);
;;;282                break;
;;;283    
;;;284            /* syscall */
;;;285            case FINSH_NODE_SYS_FUNC:
;;;286                {
;;;287                    int parameters;
;;;288                    struct finsh_node* sibling;
;;;289    
;;;290                    parameters = 0;
;;;291                    if (finsh_node_child(node) != NULL)
;;;292                    {
;;;293                        sibling = finsh_node_sibling(finsh_node_child(node));
;;;294                        while (sibling != NULL)
;;;295                        {
;;;296                            parameters ++;
;;;297                            sibling = finsh_node_sibling(sibling);
;;;298                        }
;;;299    
;;;300                        /* load address of function */
;;;301                        // finsh_code_dword((long)&(node->var->value.ptr));
;;;302    
;;;303                        /* syscall parameters */
;;;304                        finsh_code_byte(FINSH_OP_SYSCALL);
;;;305                        finsh_code_byte(parameters);
;;;306                    }
;;;307                }
;;;308                break;
;;;309    
;;;310            /* assign expression */
;;;311            case FINSH_NODE_SYS_ASSIGN:
;;;312                if (finsh_node_child(node) && finsh_node_child(node)->node_type == FINSH_NODE_ID)
;;;313                {
;;;314                    switch (finsh_node_child(node)->data_type)
;;;315                    {
;;;316                    case FINSH_DATA_TYPE_BYTE:
;;;317                        finsh_code_byte(FINSH_OP_ST_BYTE);
000018  2628              MOVS     r6,#0x28
00001a  49fe              LDR      r1,|L1.1044|
00001c  003b              MOVS     r3,r7                 ;52
00001e  f7fffffe          BL       __ARM_common_switch8
000022  1cef              DCB      0x1c,0xef
000024  0f7e8383          DCB      0x0f,0x7e,0x83,0x83
000028  838390a0          DCB      0x83,0x83,0x90,0xa0
00002c  aebccad8          DCB      0xae,0xbc,0xca,0xd8
000030  f4edeceb          DCB      0xf4,0xed,0xec,0xeb
000034  eae9e8ef          DCB      0xea,0xe9,0xe8,0xef
000038  e7e6e5e4          DCB      0xe7,0xe6,0xe5,0xe4
00003c  e397e2ef          DCB      0xe3,0x97,0xe2,0xef
000040  78a2              LDRB     r2,[r4,#2]            ;57
000042  0750              LSLS     r0,r2,#29             ;57
000044  d513              BPL      |L1.110|
000046  6848              LDR      r0,[r1,#4]            ;60  ; finsh_compile_pc
000048  2224              MOVS     r2,#0x24              ;60
00004a  7002              STRB     r2,[r0,#0]            ;60
00004c  68a2              LDR      r2,[r4,#8]            ;61
00004e  7a12              LDRB     r2,[r2,#8]            ;61
000050  7042              STRB     r2,[r0,#1]            ;61
000052  68a2              LDR      r2,[r4,#8]            ;61
000054  8912              LDRH     r2,[r2,#8]            ;61
000056  0a12              LSRS     r2,r2,#8              ;61
000058  7082              STRB     r2,[r0,#2]            ;61
00005a  68a2              LDR      r2,[r4,#8]            ;61
00005c  6892              LDR      r2,[r2,#8]            ;61
00005e  0c12              LSRS     r2,r2,#16             ;61
000060  70c2              STRB     r2,[r0,#3]            ;61
000062  68a2              LDR      r2,[r4,#8]            ;61
000064  6892              LDR      r2,[r2,#8]            ;61
                  |L1.102|
000066  0e12              LSRS     r2,r2,#24             ;213
000068  7102              STRB     r2,[r0,#4]            ;213
00006a  1d40              ADDS     r0,r0,#5              ;213
00006c  e2cc              B        |L1.1544|
                  |L1.110|
00006e  0790              LSLS     r0,r2,#30             ;64
000070  68a0              LDR      r0,[r4,#8]            ;64
000072  d529              BPL      |L1.200|
000074  2800              CMP      r0,#0                 ;69
                  |L1.118|
000076  d06b              BEQ      |L1.336|
000078  7a06              LDRB     r6,[r0,#8]            ;71
00007a  1ef6              SUBS     r6,r6,#3              ;71
00007c  0033              MOVS     r3,r6                 ;71
00007e  f7fffffe          BL       __ARM_common_switch8
000082  0c07              DCB      0x0c,0x07
000084  07110d0d          DCB      0x07,0x11,0x0d,0x0d
000088  11111111          DCB      0x11,0x11,0x11,0x11
00008c  11111167          DCB      0x11,0x11,0x11,0x67
000090  0712              LSLS     r2,r2,#28             ;75
000092  d409              BMI      |L1.168|
000094  2325              MOVS     r3,#0x25              ;83
                  |L1.150|
000096  684a              LDR      r2,[r1,#4]            ;83  ; finsh_compile_pc
000098  7013              STRB     r3,[r2,#0]            ;83
00009a  e009              B        |L1.176|
00009c  0712              LSLS     r2,r2,#28             ;91
00009e  d403              BMI      |L1.168|
0000a0  2326              MOVS     r3,#0x26              ;99
0000a2  e7f8              B        |L1.150|
0000a4  0712              LSLS     r2,r2,#28             ;113
0000a6  d501              BPL      |L1.172|
                  |L1.168|
0000a8  2324              MOVS     r3,#0x24              ;116
0000aa  e7f4              B        |L1.150|
                  |L1.172|
0000ac  684a              LDR      r2,[r1,#4]            ;121  ; finsh_compile_pc
0000ae  7015              STRB     r5,[r2,#0]            ;121
                  |L1.176|
0000b0  1c52              ADDS     r2,r2,#1              ;121
0000b2  604a              STR      r2,[r1,#4]            ;124  ; finsh_compile_pc
0000b4  7b03              LDRB     r3,[r0,#0xc]          ;124
0000b6  7013              STRB     r3,[r2,#0]            ;124
0000b8  8983              LDRH     r3,[r0,#0xc]          ;124
0000ba  0a1b              LSRS     r3,r3,#8              ;124
0000bc  7053              STRB     r3,[r2,#1]            ;124
0000be  68c3              LDR      r3,[r0,#0xc]          ;124
0000c0  0c1b              LSRS     r3,r3,#16             ;124
0000c2  7093              STRB     r3,[r2,#2]            ;124
0000c4  68c0              LDR      r0,[r0,#0xc]          ;124
0000c6  e026              B        |L1.278|
                  |L1.200|
0000c8  2800              CMP      r0,#0                 ;135
0000ca  d0d4              BEQ      |L1.118|
0000cc  7c46              LDRB     r6,[r0,#0x11]         ;137
0000ce  1ef6              SUBS     r6,r6,#3              ;137
0000d0  0033              MOVS     r3,r6                 ;137
0000d2  f7fffffe          BL       __ARM_common_switch8
0000d6  0c07              DCB      0x0c,0x07
0000d8  07120e0e          DCB      0x07,0x12,0x0e,0x0e
0000dc  12121212          DCB      0x12,0x12,0x12,0x12
0000e0  1212123d          DCB      0x12,0x12,0x12,0x3d
0000e4  0712              LSLS     r2,r2,#28             ;141
0000e6  d40a              BMI      |L1.254|
0000e8  2325              MOVS     r3,#0x25              ;149
                  |L1.234|
0000ea  684a              LDR      r2,[r1,#4]            ;149  ; finsh_compile_pc
0000ec  7013              STRB     r3,[r2,#0]            ;149
0000ee  e00a              B        |L1.262|
                  |L1.240|
0000f0  e29b              B        |L1.1578|
0000f2  0712              LSLS     r2,r2,#28             ;157
0000f4  d403              BMI      |L1.254|
0000f6  2326              MOVS     r3,#0x26              ;165
0000f8  e7f7              B        |L1.234|
0000fa  0712              LSLS     r2,r2,#28             ;179
0000fc  d501              BPL      |L1.258|
                  |L1.254|
0000fe  2324              MOVS     r3,#0x24              ;182
000100  e7f3              B        |L1.234|
                  |L1.258|
000102  684a              LDR      r2,[r1,#4]            ;187  ; finsh_compile_pc
000104  7015              STRB     r5,[r2,#0]            ;187
                  |L1.262|
000106  1c52              ADDS     r2,r2,#1              ;187
000108  3014              ADDS     r0,r0,#0x14           ;187
00010a  604a              STR      r2,[r1,#4]            ;152  ; finsh_compile_pc
00010c  7010              STRB     r0,[r2,#0]            ;152
00010e  0a03              LSRS     r3,r0,#8              ;152
000110  7053              STRB     r3,[r2,#1]            ;152
000112  0c03              LSRS     r3,r0,#16             ;152
000114  7093              STRB     r3,[r2,#2]            ;152
                  |L1.278|
000116  0e00              LSRS     r0,r0,#24             ;124
000118  70d0              STRB     r0,[r2,#3]            ;124
00011a  1d12              ADDS     r2,r2,#4              ;124
00011c  e165              B        |L1.1002|
00011e  6848              LDR      r0,[r1,#4]            ;200  ; finsh_compile_pc
000120  2222              MOVS     r2,#0x22              ;200
000122  7002              STRB     r2,[r0,#0]            ;200
000124  7922              LDRB     r2,[r4,#4]            ;201
000126  e0d6              B        |L1.726|
000128  6848              LDR      r0,[r1,#4]            ;212  ; finsh_compile_pc
00012a  2224              MOVS     r2,#0x24              ;212
00012c  7002              STRB     r2,[r0,#0]            ;212
00012e  7922              LDRB     r2,[r4,#4]            ;213
000130  7042              STRB     r2,[r0,#1]            ;213
000132  88a2              LDRH     r2,[r4,#4]            ;213
000134  0a12              LSRS     r2,r2,#8              ;213
000136  7082              STRB     r2,[r0,#2]            ;213
000138  6862              LDR      r2,[r4,#4]            ;213
00013a  0c12              LSRS     r2,r2,#16             ;213
00013c  70c2              STRB     r2,[r0,#3]            ;213
00013e  6862              LDR      r2,[r4,#4]            ;214
000140  e791              B        |L1.102|
000142  7862              LDRB     r2,[r4,#1]            ;218
000144  2a01              CMP      r2,#1                 ;218
000146  d004              BEQ      |L1.338|
000148  2a02              CMP      r2,#2                 ;219
00014a  d006              BEQ      |L1.346|
00014c  2a03              CMP      r2,#3                 ;220
00014e  d004              BEQ      |L1.346|
                  |L1.336|
000150  e266              B        |L1.1568|
                  |L1.338|
000152  684a              LDR      r2,[r1,#4]            ;218  ; finsh_compile_pc
000154  7010              STRB     r0,[r2,#0]            ;218
000156  1c52              ADDS     r2,r2,#1              ;218
000158  e147              B        |L1.1002|
                  |L1.346|
00015a  6848              LDR      r0,[r1,#4]            ;219  ; finsh_compile_pc
00015c  7002              STRB     r2,[r0,#0]            ;219
00015e  1c40              ADDS     r0,r0,#1              ;219
000160  e252              B        |L1.1544|
000162  7860              LDRB     r0,[r4,#1]            ;224
000164  2801              CMP      r0,#1                 ;224
000166  d004              BEQ      |L1.370|
000168  2802              CMP      r0,#2                 ;225
00016a  d004              BEQ      |L1.374|
00016c  2803              CMP      r0,#3                 ;226
00016e  d004              BEQ      |L1.378|
000170  e256              B        |L1.1568|
                  |L1.370|
000172  2204              MOVS     r2,#4                 ;224
000174  e7f1              B        |L1.346|
                  |L1.374|
000176  2205              MOVS     r2,#5                 ;225
000178  e7ef              B        |L1.346|
                  |L1.378|
00017a  2206              MOVS     r2,#6                 ;226
00017c  e7ed              B        |L1.346|
00017e  7860              LDRB     r0,[r4,#1]            ;230
000180  2801              CMP      r0,#1                 ;230
000182  d004              BEQ      |L1.398|
000184  2802              CMP      r0,#2                 ;231
000186  d004              BEQ      |L1.402|
000188  2803              CMP      r0,#3                 ;232
00018a  d004              BEQ      |L1.406|
00018c  e248              B        |L1.1568|
                  |L1.398|
00018e  220d              MOVS     r2,#0xd               ;230
000190  e7e3              B        |L1.346|
                  |L1.402|
000192  220e              MOVS     r2,#0xe               ;231
000194  e7e1              B        |L1.346|
                  |L1.406|
000196  220f              MOVS     r2,#0xf               ;232
000198  e7df              B        |L1.346|
00019a  7860              LDRB     r0,[r4,#1]            ;236
00019c  2801              CMP      r0,#1                 ;236
00019e  d004              BEQ      |L1.426|
0001a0  2802              CMP      r0,#2                 ;237
0001a2  d004              BEQ      |L1.430|
0001a4  2803              CMP      r0,#3                 ;238
0001a6  d004              BEQ      |L1.434|
                  |L1.424|
0001a8  e23a              B        |L1.1568|
                  |L1.426|
0001aa  2207              MOVS     r2,#7                 ;236
0001ac  e7d5              B        |L1.346|
                  |L1.430|
0001ae  2208              MOVS     r2,#8                 ;237
0001b0  e7d3              B        |L1.346|
                  |L1.434|
0001b2  2209              MOVS     r2,#9                 ;238
0001b4  e7d1              B        |L1.346|
0001b6  7860              LDRB     r0,[r4,#1]            ;242
0001b8  2801              CMP      r0,#1                 ;242
0001ba  d004              BEQ      |L1.454|
0001bc  2802              CMP      r0,#2                 ;243
0001be  d004              BEQ      |L1.458|
0001c0  2803              CMP      r0,#3                 ;244
0001c2  d004              BEQ      |L1.462|
0001c4  e22c              B        |L1.1568|
                  |L1.454|
0001c6  220a              MOVS     r2,#0xa               ;242
0001c8  e7c7              B        |L1.346|
                  |L1.458|
0001ca  220b              MOVS     r2,#0xb               ;243
0001cc  e7c5              B        |L1.346|
                  |L1.462|
0001ce  220c              MOVS     r2,#0xc               ;244
0001d0  e7c3              B        |L1.346|
0001d2  7860              LDRB     r0,[r4,#1]            ;249
0001d4  2801              CMP      r0,#1                 ;249
0001d6  d004              BEQ      |L1.482|
0001d8  2802              CMP      r0,#2                 ;250
0001da  d012              BEQ      |L1.514|
0001dc  2803              CMP      r0,#3                 ;251
0001de  d012              BEQ      |L1.518|
0001e0  e21e              B        |L1.1568|
                  |L1.482|
0001e2  2210              MOVS     r2,#0x10              ;249
0001e4  e7b9              B        |L1.346|
0001e6  e209              B        |L1.1532|
0001e8  e210              B        |L1.1548|
0001ea  e191              B        |L1.1296|
0001ec  e132              B        |L1.1108|
0001ee  e0d9              B        |L1.932|
0001f0  e089              B        |L1.774|
0001f2  e05e              B        |L1.690|
0001f4  e04f              B        |L1.662|
0001f6  e040              B        |L1.634|
0001f8  e031              B        |L1.606|
0001fa  e022              B        |L1.578|
0001fc  e013              B        |L1.550|
0001fe  e004              B        |L1.522|
000200  e21b              B        |L1.1594|
                  |L1.514|
000202  2211              MOVS     r2,#0x11              ;250
000204  e7a9              B        |L1.346|
                  |L1.518|
000206  2212              MOVS     r2,#0x12              ;251
000208  e7a7              B        |L1.346|
                  |L1.522|
00020a  7860              LDRB     r0,[r4,#1]            ;255
00020c  2801              CMP      r0,#1                 ;255
00020e  d004              BEQ      |L1.538|
000210  2802              CMP      r0,#2                 ;256
000212  d004              BEQ      |L1.542|
000214  2803              CMP      r0,#3                 ;257
000216  d004              BEQ      |L1.546|
                  |L1.536|
000218  e202              B        |L1.1568|
                  |L1.538|
00021a  2213              MOVS     r2,#0x13              ;255
00021c  e79d              B        |L1.346|
                  |L1.542|
00021e  2214              MOVS     r2,#0x14              ;256
000220  e79b              B        |L1.346|
                  |L1.546|
000222  2215              MOVS     r2,#0x15              ;257
000224  e799              B        |L1.346|
                  |L1.550|
000226  7860              LDRB     r0,[r4,#1]            ;261
000228  2801              CMP      r0,#1                 ;261
00022a  d004              BEQ      |L1.566|
00022c  2802              CMP      r0,#2                 ;262
00022e  d004              BEQ      |L1.570|
000230  2803              CMP      r0,#3                 ;263
000232  d004              BEQ      |L1.574|
                  |L1.564|
000234  e1f4              B        |L1.1568|
                  |L1.566|
000236  2216              MOVS     r2,#0x16              ;261
000238  e78f              B        |L1.346|
                  |L1.570|
00023a  2217              MOVS     r2,#0x17              ;262
00023c  e78d              B        |L1.346|
                  |L1.574|
00023e  2218              MOVS     r2,#0x18              ;263
000240  e78b              B        |L1.346|
                  |L1.578|
000242  7860              LDRB     r0,[r4,#1]            ;267
000244  2801              CMP      r0,#1                 ;267
000246  d004              BEQ      |L1.594|
000248  2802              CMP      r0,#2                 ;268
00024a  d004              BEQ      |L1.598|
00024c  2803              CMP      r0,#3                 ;269
00024e  d004              BEQ      |L1.602|
000250  e1e6              B        |L1.1568|
                  |L1.594|
000252  2219              MOVS     r2,#0x19              ;267
000254  e781              B        |L1.346|
                  |L1.598|
000256  221a              MOVS     r2,#0x1a              ;268
000258  e77f              B        |L1.346|
                  |L1.602|
00025a  221b              MOVS     r2,#0x1b              ;269
00025c  e77d              B        |L1.346|
                  |L1.606|
00025e  7860              LDRB     r0,[r4,#1]            ;273
000260  2801              CMP      r0,#1                 ;273
000262  d004              BEQ      |L1.622|
000264  2802              CMP      r0,#2                 ;274
000266  d004              BEQ      |L1.626|
000268  2803              CMP      r0,#3                 ;275
00026a  d004              BEQ      |L1.630|
00026c  e1d8              B        |L1.1568|
                  |L1.622|
00026e  221c              MOVS     r2,#0x1c              ;273
000270  e773              B        |L1.346|
                  |L1.626|
000272  221d              MOVS     r2,#0x1d              ;274
000274  e771              B        |L1.346|
                  |L1.630|
000276  221e              MOVS     r2,#0x1e              ;275
000278  e76f              B        |L1.346|
                  |L1.634|
00027a  7860              LDRB     r0,[r4,#1]            ;279
00027c  2801              CMP      r0,#1                 ;279
00027e  d004              BEQ      |L1.650|
000280  2802              CMP      r0,#2                 ;280
000282  d004              BEQ      |L1.654|
000284  2803              CMP      r0,#3                 ;281
000286  d004              BEQ      |L1.658|
000288  e1ca              B        |L1.1568|
                  |L1.650|
00028a  221f              MOVS     r2,#0x1f              ;279
00028c  e765              B        |L1.346|
                  |L1.654|
00028e  2220              MOVS     r2,#0x20              ;280
000290  e763              B        |L1.346|
                  |L1.658|
000292  2221              MOVS     r2,#0x21              ;281
000294  e761              B        |L1.346|
                  |L1.662|
000296  6920              LDR      r0,[r4,#0x10]         ;291
000298  2200              MOVS     r2,#0                 ;290
00029a  2800              CMP      r0,#0                 ;291
00029c  d084              BEQ      |L1.424|
00029e  68c0              LDR      r0,[r0,#0xc]          ;293
0002a0  e001              B        |L1.678|
                  |L1.674|
0002a2  68c0              LDR      r0,[r0,#0xc]          ;297
0002a4  1c52              ADDS     r2,r2,#1              ;297
                  |L1.678|
0002a6  2800              CMP      r0,#0                 ;294
0002a8  d1fb              BNE      |L1.674|
0002aa  6848              LDR      r0,[r1,#4]            ;304  ; finsh_compile_pc
0002ac  232c              MOVS     r3,#0x2c              ;304
0002ae  7003              STRB     r3,[r0,#0]            ;304
0002b0  e011              B        |L1.726|
                  |L1.690|
0002b2  6920              LDR      r0,[r4,#0x10]         ;312
0002b4  2800              CMP      r0,#0                 ;312
0002b6  d002              BEQ      |L1.702|
0002b8  7802              LDRB     r2,[r0,#0]            ;312
0002ba  2a01              CMP      r2,#1                 ;312
0002bc  d003              BEQ      |L1.710|
                  |L1.702|
;;;318    
;;;319                        /* load value again */
;;;320                        finsh_code_byte(FINSH_OP_LD_VALUE_BYTE_STACK);
;;;321                        break;
;;;322    
;;;323                    case FINSH_DATA_TYPE_WORD:
;;;324                        finsh_code_byte(FINSH_OP_ST_WORD);
;;;325    
;;;326                        /* load value again */
;;;327                        finsh_code_byte(FINSH_OP_LD_VALUE_WORD_STACK);
;;;328                        break;
;;;329    
;;;330                    case FINSH_DATA_TYPE_DWORD:
;;;331                        finsh_code_byte(FINSH_OP_ST_DWORD);
;;;332    
;;;333                        /* load value again */
;;;334                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
;;;335                        break;
;;;336    
;;;337                    default:
;;;338                        finsh_error_set(FINSH_ERROR_UNKNOWN_TYPE);
;;;339                    }
;;;340                }
;;;341                else if (finsh_node_child(node)->node_type == FINSH_NODE_SYS_GETVALUE)
0002be  7802              LDRB     r2,[r0,#0]
0002c0  2a19              CMP      r2,#0x19
0002c2  d00b              BEQ      |L1.732|
                  |L1.708|
0002c4  e1ac              B        |L1.1568|
                  |L1.710|
0002c6  7840              LDRB     r0,[r0,#1]            ;314
0002c8  e00b              B        |L1.738|
                  |L1.714|
0002ca  2803              CMP      r0,#3                 ;314
0002cc  d016              BEQ      |L1.764|
;;;342                {
;;;343                    switch ((finsh_node_child(node)->data_type) & 0x0F)
;;;344                    {
;;;345                    case FINSH_DATA_TYPE_BYTE:
;;;346                        finsh_code_byte(FINSH_OP_ST_BYTE);
;;;347    
;;;348                        /* load value again */
;;;349                        finsh_code_byte(FINSH_OP_LD_VALUE_BYTE_STACK);
;;;350                        break;
;;;351    
;;;352                    case FINSH_DATA_TYPE_WORD:
;;;353                        finsh_code_byte(FINSH_OP_ST_WORD);
;;;354    
;;;355                        /* load value again */
;;;356                        finsh_code_byte(FINSH_OP_LD_VALUE_WORD_STACK);
;;;357                        break;
;;;358    
;;;359                    case FINSH_DATA_TYPE_DWORD:
;;;360                        finsh_code_byte(FINSH_OP_ST_DWORD);
;;;361    
;;;362                        /* load value again */
;;;363                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
;;;364                        break;
;;;365    
;;;366                    default:
;;;367                        finsh_error_set(FINSH_ERROR_UNKNOWN_TYPE);
0002ce  2003              MOVS     r0,#3
                  |L1.720|
0002d0  f7fffffe          BL       finsh_error_set
                  |L1.724|
0002d4  e1a4              B        |L1.1568|
                  |L1.726|
0002d6  7042              STRB     r2,[r0,#1]            ;201
0002d8  1c80              ADDS     r0,r0,#2              ;201
0002da  e195              B        |L1.1544|
                  |L1.732|
0002dc  7840              LDRB     r0,[r0,#1]            ;343
0002de  0700              LSLS     r0,r0,#28             ;343
0002e0  0f00              LSRS     r0,r0,#28             ;343
                  |L1.738|
0002e2  2801              CMP      r0,#1                 ;314
0002e4  d006              BEQ      |L1.756|
0002e6  2802              CMP      r0,#2                 ;343
0002e8  d1ef              BNE      |L1.714|
0002ea  6848              LDR      r0,[r1,#4]            ;353  ; finsh_compile_pc
0002ec  2229              MOVS     r2,#0x29              ;353
0002ee  7002              STRB     r2,[r0,#0]            ;353
0002f0  222e              MOVS     r2,#0x2e              ;356
0002f2  e7f0              B        |L1.726|
                  |L1.756|
0002f4  6848              LDR      r0,[r1,#4]            ;346  ; finsh_compile_pc
0002f6  222d              MOVS     r2,#0x2d              ;349
0002f8  7006              STRB     r6,[r0,#0]            ;346
0002fa  e7ec              B        |L1.726|
                  |L1.764|
0002fc  6848              LDR      r0,[r1,#4]            ;360  ; finsh_compile_pc
0002fe  222a              MOVS     r2,#0x2a              ;360
000300  7002              STRB     r2,[r0,#0]            ;360
000302  222f              MOVS     r2,#0x2f              ;363
000304  e7e7              B        |L1.726|
                  |L1.774|
;;;368                    }
;;;369                }
;;;370                break;
;;;371    
;;;372            /* pre-increase */
;;;373            case FINSH_NODE_SYS_PREINC:
;;;374                if (finsh_node_child(node) && finsh_node_child(node)->node_type == FINSH_NODE_ID)
000306  6923              LDR      r3,[r4,#0x10]
000308  2b00              CMP      r3,#0
00030a  d085              BEQ      |L1.536|
00030c  781f              LDRB     r7,[r3,#0]
00030e  2f01              CMP      r7,#1
000310  d190              BNE      |L1.564|
;;;375                {
;;;376                    struct finsh_var* var;
;;;377                    var = finsh_node_child(node)->id.var;
;;;378    
;;;379                    /* ld_dword &id */
;;;380                    // finsh_code_byte(FINSH_OP_LD_DWORD);
;;;381    
;;;382                    switch (node->data_type)
000312  7867              LDRB     r7,[r4,#1]
000314  689b              LDR      r3,[r3,#8]            ;377
000316  2f01              CMP      r7,#1
000318  d004              BEQ      |L1.804|
00031a  2f02              CMP      r7,#2
00031c  d011              BEQ      |L1.834|
00031e  2f03              CMP      r7,#3
000320  d188              BNE      |L1.564|
000322  e026              B        |L1.882|
                  |L1.804|
;;;383                    {
;;;384                    case FINSH_DATA_TYPE_BYTE:
;;;385                        /* address */
;;;386                        // finsh_code_dword((long)&(var->value.char_value));
;;;387    
;;;388                        /* ld_value_byte &id */
;;;389                        finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
000324  684a              LDR      r2,[r1,#4]  ; finsh_compile_pc
000326  2525              MOVS     r5,#0x25
000328  7015              STRB     r5,[r2,#0]
00032a  3314              ADDS     r3,r3,#0x14
;;;390                        finsh_code_dword((long)&(var->value.char_value));
00032c  7053              STRB     r3,[r2,#1]
00032e  0a1d              LSRS     r5,r3,#8
000330  7095              STRB     r5,[r2,#2]
000332  0c1d              LSRS     r5,r3,#16
000334  70d5              STRB     r5,[r2,#3]
000336  0e1b              LSRS     r3,r3,#24
000338  7113              STRB     r3,[r2,#4]
;;;391    
;;;392                        /* ld_byte 1 */
;;;393                        finsh_code_byte(FINSH_OP_LD_BYTE);
00033a  2322              MOVS     r3,#0x22
00033c  7153              STRB     r3,[r2,#5]
;;;394                        finsh_code_byte(1);
00033e  7190              STRB     r0,[r2,#6]
;;;395    
;;;396                        /* add_byte */
;;;397                        finsh_code_byte(FINSH_OP_ADD_BYTE);
;;;398                        /* st_byte */
;;;399                        finsh_code_byte(FINSH_OP_ST_BYTE);
;;;400    
;;;401                        /* load value again */
;;;402                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
;;;403    
;;;404                        break;
000340  e04e              B        |L1.992|
                  |L1.834|
;;;405    
;;;406                    case FINSH_DATA_TYPE_WORD:
;;;407                        /* address */
;;;408                        // finsh_code_dword((long)&(var->value.short_value));
;;;409    
;;;410                        /* ld_value_word &id */
;;;411                        finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
000342  684d              LDR      r5,[r1,#4]  ; finsh_compile_pc
000344  2626              MOVS     r6,#0x26
000346  702e              STRB     r6,[r5,#0]
000348  3314              ADDS     r3,r3,#0x14
;;;412                        finsh_code_dword((long)&(var->value.short_value));
00034a  706b              STRB     r3,[r5,#1]
00034c  0a1e              LSRS     r6,r3,#8
00034e  70ae              STRB     r6,[r5,#2]
000350  0c1e              LSRS     r6,r3,#16
000352  70ee              STRB     r6,[r5,#3]
000354  0e1b              LSRS     r3,r3,#24
000356  712b              STRB     r3,[r5,#4]
;;;413    
;;;414                        /* ld_word 1 */
;;;415                        finsh_code_byte(FINSH_OP_LD_WORD);
000358  2323              MOVS     r3,#0x23
00035a  716b              STRB     r3,[r5,#5]
;;;416                        finsh_code_word(1);
00035c  71a8              STRB     r0,[r5,#6]
00035e  71ea              STRB     r2,[r5,#7]
;;;417    
;;;418                        /* add_word */
;;;419                        finsh_code_byte(FINSH_OP_ADD_WORD);
000360  2002              MOVS     r0,#2
000362  7228              STRB     r0,[r5,#8]
;;;420                        /* st_word */
;;;421                        finsh_code_byte(FINSH_OP_ST_WORD);
000364  2029              MOVS     r0,#0x29
000366  7268              STRB     r0,[r5,#9]
;;;422    
;;;423                        /* load value again */
;;;424                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
000368  202f              MOVS     r0,#0x2f
00036a  72a8              STRB     r0,[r5,#0xa]
00036c  350b              ADDS     r5,r5,#0xb
;;;425    
;;;426                        break;
00036e  604d              STR      r5,[r1,#4]  ; finsh_compile_pc
000370  e156              B        |L1.1568|
                  |L1.882|
;;;427    
;;;428                    case FINSH_DATA_TYPE_DWORD:
;;;429                        /* address */
;;;430                        // finsh_code_dword((long)&(var->value.long_value));
;;;431    
;;;432                        /* ld_dword &id */
;;;433                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
000372  684e              LDR      r6,[r1,#4]  ; finsh_compile_pc
000374  3314              ADDS     r3,r3,#0x14
000376  7035              STRB     r5,[r6,#0]
;;;434                        finsh_code_dword((long)&(var->value.long_value));
000378  7073              STRB     r3,[r6,#1]
00037a  0a1d              LSRS     r5,r3,#8
00037c  70b5              STRB     r5,[r6,#2]
00037e  0c1d              LSRS     r5,r3,#16
000380  70f5              STRB     r5,[r6,#3]
000382  0e1b              LSRS     r3,r3,#24
000384  7133              STRB     r3,[r6,#4]
;;;435    
;;;436                        /* ld_dword 1 */
;;;437                        finsh_code_byte(FINSH_OP_LD_DWORD);
000386  2324              MOVS     r3,#0x24
000388  7173              STRB     r3,[r6,#5]
;;;438                        finsh_code_dword(1);
00038a  71b0              STRB     r0,[r6,#6]
00038c  71f2              STRB     r2,[r6,#7]
00038e  7232              STRB     r2,[r6,#8]
000390  7272              STRB     r2,[r6,#9]
;;;439    
;;;440                        /* add_dword */
;;;441                        finsh_code_byte(FINSH_OP_ADD_DWORD);
000392  2203              MOVS     r2,#3
000394  72b2              STRB     r2,[r6,#0xa]
;;;442                        /* st_dword */
;;;443                        finsh_code_byte(FINSH_OP_ST_DWORD);
000396  222a              MOVS     r2,#0x2a
000398  72f2              STRB     r2,[r6,#0xb]
;;;444    
;;;445                        /* load value again */
;;;446                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
00039a  222f              MOVS     r2,#0x2f
00039c  7332              STRB     r2,[r6,#0xc]
00039e  360d              ADDS     r6,r6,#0xd
;;;447    
;;;448                        break;
0003a0  604e              STR      r6,[r1,#4]  ; finsh_compile_pc
0003a2  e13d              B        |L1.1568|
                  |L1.932|
;;;449                    }
;;;450                }
;;;451                break;
;;;452    
;;;453            /* pre-decrease */
;;;454            case FINSH_NODE_SYS_PREDEC:
;;;455                if (finsh_node_child(node) && finsh_node_child(node)->node_type == FINSH_NODE_ID)
0003a4  6923              LDR      r3,[r4,#0x10]
0003a6  2b00              CMP      r3,#0
0003a8  d08c              BEQ      |L1.708|
0003aa  781f              LDRB     r7,[r3,#0]
0003ac  2f01              CMP      r7,#1
0003ae  d189              BNE      |L1.708|
;;;456                {
;;;457                    struct finsh_var* var;
;;;458                    var = finsh_node_child(node)->id.var;
;;;459    
;;;460                    /* ld_dword &id */
;;;461                    // finsh_code_byte(FINSH_OP_LD_DWORD);
;;;462    
;;;463                    switch (node->data_type)
0003b0  689f              LDR      r7,[r3,#8]
0003b2  7863              LDRB     r3,[r4,#1]
0003b4  2b01              CMP      r3,#1
0003b6  d004              BEQ      |L1.962|
0003b8  2b02              CMP      r3,#2
0003ba  d018              BEQ      |L1.1006|
0003bc  2b03              CMP      r3,#3
0003be  d189              BNE      |L1.724|
0003c0  e02f              B        |L1.1058|
                  |L1.962|
;;;464                    {
;;;465                    case FINSH_DATA_TYPE_BYTE:
;;;466                        /* address */
;;;467                        // finsh_code_dword((long)&(var->value.char_value));
;;;468    
;;;469                        /* ld_value_byte &id */
;;;470                        finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
0003c2  684a              LDR      r2,[r1,#4]  ; finsh_compile_pc
0003c4  2325              MOVS     r3,#0x25
0003c6  7013              STRB     r3,[r2,#0]
0003c8  3714              ADDS     r7,r7,#0x14
;;;471                        finsh_code_dword((long)&(var->value.char_value));
0003ca  7057              STRB     r7,[r2,#1]
0003cc  0a3b              LSRS     r3,r7,#8
0003ce  7093              STRB     r3,[r2,#2]
0003d0  0c3b              LSRS     r3,r7,#16
0003d2  70d3              STRB     r3,[r2,#3]
0003d4  0e3b              LSRS     r3,r7,#24
0003d6  7113              STRB     r3,[r2,#4]
;;;472    
;;;473                        /* ld_byte 1 */
;;;474                        finsh_code_byte(FINSH_OP_LD_BYTE);
0003d8  2322              MOVS     r3,#0x22
0003da  7153              STRB     r3,[r2,#5]
;;;475                        finsh_code_byte(1);
0003dc  7190              STRB     r0,[r2,#6]
;;;476    
;;;477                        /* add_byte */
;;;478                        finsh_code_byte(FINSH_OP_SUB_BYTE);
0003de  2004              MOVS     r0,#4
                  |L1.992|
0003e0  71d0              STRB     r0,[r2,#7]
;;;479                        /* st_byte */
;;;480                        finsh_code_byte(FINSH_OP_ST_BYTE);
0003e2  7216              STRB     r6,[r2,#8]
;;;481    
;;;482                        /* load value again */
;;;483                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
0003e4  202f              MOVS     r0,#0x2f
0003e6  7250              STRB     r0,[r2,#9]
0003e8  320a              ADDS     r2,r2,#0xa
                  |L1.1002|
0003ea  604a              STR      r2,[r1,#4]  ; finsh_compile_pc
0003ec  e118              B        |L1.1568|
                  |L1.1006|
;;;484    
;;;485                        break;
;;;486    
;;;487                    case FINSH_DATA_TYPE_WORD:
;;;488                        /* address */
;;;489                        // finsh_code_dword((long)&(var->value.short_value));
;;;490    
;;;491                        /* ld_value_word &id */
;;;492                        finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
0003ee  684b              LDR      r3,[r1,#4]  ; finsh_compile_pc
0003f0  2526              MOVS     r5,#0x26
0003f2  701d              STRB     r5,[r3,#0]
0003f4  3714              ADDS     r7,r7,#0x14
;;;493                        finsh_code_dword((long)&(var->value.short_value));
0003f6  705f              STRB     r7,[r3,#1]
0003f8  0a3d              LSRS     r5,r7,#8
0003fa  709d              STRB     r5,[r3,#2]
0003fc  0c3d              LSRS     r5,r7,#16
0003fe  70dd              STRB     r5,[r3,#3]
000400  0e3d              LSRS     r5,r7,#24
000402  711d              STRB     r5,[r3,#4]
;;;494    
;;;495                        /* ld_word 1 */
;;;496                        finsh_code_byte(FINSH_OP_LD_WORD);
000404  2523              MOVS     r5,#0x23
000406  715d              STRB     r5,[r3,#5]
;;;497                        finsh_code_word(1);
000408  7198              STRB     r0,[r3,#6]
00040a  71da              STRB     r2,[r3,#7]
;;;498    
;;;499                        /* add_word */
;;;500                        finsh_code_byte(FINSH_OP_SUB_WORD);
00040c  2005              MOVS     r0,#5
00040e  7218              STRB     r0,[r3,#8]
;;;501                        /* st_word */
;;;502                        finsh_code_byte(FINSH_OP_ST_WORD);
000410  2029              MOVS     r0,#0x29
000412  e001              B        |L1.1048|
                  |L1.1044|
                          DCD      ||.data||
                  |L1.1048|
000418  7258              STRB     r0,[r3,#9]
;;;503    
;;;504                        /* load value again */
;;;505                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
00041a  202f              MOVS     r0,#0x2f
00041c  7298              STRB     r0,[r3,#0xa]
00041e  330b              ADDS     r3,r3,#0xb
;;;506    
;;;507                        break;
000420  e016              B        |L1.1104|
                  |L1.1058|
;;;508    
;;;509                    case FINSH_DATA_TYPE_DWORD:
;;;510                        /* address */
;;;511                        // finsh_code_dword((long)&(var->value.long_value));
;;;512    
;;;513                        /* ld_dword &id */
;;;514                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
000422  684b              LDR      r3,[r1,#4]  ; finsh_compile_pc
000424  3714              ADDS     r7,r7,#0x14
000426  701d              STRB     r5,[r3,#0]
;;;515                        finsh_code_dword((long)&(var->value.long_value));
000428  705f              STRB     r7,[r3,#1]
00042a  0a3d              LSRS     r5,r7,#8
00042c  709d              STRB     r5,[r3,#2]
00042e  0c3d              LSRS     r5,r7,#16
000430  70dd              STRB     r5,[r3,#3]
000432  0e3d              LSRS     r5,r7,#24
000434  711d              STRB     r5,[r3,#4]
;;;516    
;;;517                        /* ld_dword 1 */
;;;518                        finsh_code_byte(FINSH_OP_LD_DWORD);
000436  2524              MOVS     r5,#0x24
000438  715d              STRB     r5,[r3,#5]
;;;519                        finsh_code_dword(1);
00043a  7198              STRB     r0,[r3,#6]
00043c  71da              STRB     r2,[r3,#7]
00043e  721a              STRB     r2,[r3,#8]
000440  725a              STRB     r2,[r3,#9]
;;;520    
;;;521                        /* add_dword */
;;;522                        finsh_code_byte(FINSH_OP_SUB_DWORD);
000442  2006              MOVS     r0,#6
000444  7298              STRB     r0,[r3,#0xa]
;;;523                        /* st_dword */
;;;524                        finsh_code_byte(FINSH_OP_ST_DWORD);
000446  202a              MOVS     r0,#0x2a
000448  72d8              STRB     r0,[r3,#0xb]
;;;525    
;;;526                        /* load value again */
;;;527                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
00044a  202f              MOVS     r0,#0x2f
00044c  7318              STRB     r0,[r3,#0xc]
00044e  330d              ADDS     r3,r3,#0xd
                  |L1.1104|
000450  604b              STR      r3,[r1,#4]            ;505  ; finsh_compile_pc
000452  e0e5              B        |L1.1568|
                  |L1.1108|
;;;528    
;;;529                        break;
;;;530                    }
;;;531                }
;;;532                break;
;;;533    
;;;534            /* increase */
;;;535            case FINSH_NODE_SYS_INC:
;;;536                if (finsh_node_child(node) && finsh_node_child(node)->node_type == FINSH_NODE_ID)
000454  6923              LDR      r3,[r4,#0x10]
000456  2b00              CMP      r3,#0
000458  d07e              BEQ      |L1.1368|
00045a  781f              LDRB     r7,[r3,#0]
00045c  2f01              CMP      r7,#1
00045e  d17b              BNE      |L1.1368|
;;;537                {
;;;538                    struct finsh_var* var;
;;;539                    var = finsh_node_child(node)->id.var;
;;;540    
;;;541                    switch (node->data_type)
000460  7867              LDRB     r7,[r4,#1]
000462  689b              LDR      r3,[r3,#8]            ;539
000464  2f01              CMP      r7,#1
000466  d004              BEQ      |L1.1138|
000468  2f02              CMP      r7,#2
00046a  d01a              BEQ      |L1.1186|
00046c  2f03              CMP      r7,#3
00046e  d173              BNE      |L1.1368|
000470  e031              B        |L1.1238|
                  |L1.1138|
;;;542                    {
;;;543                    case FINSH_DATA_TYPE_BYTE:
;;;544                        /* ld_value_byte &id */
;;;545                        // finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
;;;546                        // finsh_code_dword((long)&(var->value.char_value));
;;;547    
;;;548                        /* ld_dword &id */
;;;549                        finsh_code_byte(FINSH_OP_LD_DWORD);
000472  4973              LDR      r1,|L1.1600|
000474  3314              ADDS     r3,r3,#0x14
000476  6849              LDR      r1,[r1,#4]  ; finsh_compile_pc
000478  2224              MOVS     r2,#0x24
00047a  700a              STRB     r2,[r1,#0]
;;;550                        finsh_code_dword((long)&(var->value.char_value));
00047c  0a1f              LSRS     r7,r3,#8
00047e  704b              STRB     r3,[r1,#1]
000480  708f              STRB     r7,[r1,#2]
000482  0c1a              LSRS     r2,r3,#16
000484  46bc              MOV      r12,r7
000486  70ca              STRB     r2,[r1,#3]
000488  0e1d              LSRS     r5,r3,#24
00048a  710d              STRB     r5,[r1,#4]
;;;551    
;;;552                        /* ld_value_byte &id */
;;;553                        finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
00048c  2725              MOVS     r7,#0x25
00048e  714f              STRB     r7,[r1,#5]
;;;554                        finsh_code_dword((long)&(var->value.char_value));
000490  718b              STRB     r3,[r1,#6]
000492  4667              MOV      r7,r12
000494  71cf              STRB     r7,[r1,#7]
000496  720a              STRB     r2,[r1,#8]
000498  724d              STRB     r5,[r1,#9]
;;;555    
;;;556                        /* ld_byte 1 */
;;;557                        finsh_code_byte(FINSH_OP_LD_BYTE);
00049a  2322              MOVS     r3,#0x22
00049c  728b              STRB     r3,[r1,#0xa]
;;;558                        finsh_code_byte(1);
00049e  72c8              STRB     r0,[r1,#0xb]
;;;559    
;;;560                        /* add_byte */
;;;561                        finsh_code_byte(FINSH_OP_ADD_BYTE);
;;;562                        /* get byte */
;;;563                        finsh_code_byte(FINSH_OP_ST_BYTE);
;;;564    
;;;565                        /* pop */
;;;566                        finsh_code_byte(FINSH_OP_POP);
;;;567                        break;
0004a0  e05f              B        |L1.1378|
                  |L1.1186|
;;;568    
;;;569                    case FINSH_DATA_TYPE_WORD:
;;;570                        /* ld_value_word &id */
;;;571                        // finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
;;;572                        // finsh_code_dword((long)&(var->value.short_value));
;;;573    
;;;574                        /* ld_dword &id */
;;;575                        finsh_code_byte(FINSH_OP_LD_DWORD);
0004a2  4967              LDR      r1,|L1.1600|
0004a4  2524              MOVS     r5,#0x24
0004a6  6849              LDR      r1,[r1,#4]  ; finsh_compile_pc
0004a8  3314              ADDS     r3,r3,#0x14
0004aa  700d              STRB     r5,[r1,#0]
;;;576                        finsh_code_dword((long)&(var->value.short_value));
0004ac  0a1f              LSRS     r7,r3,#8
0004ae  0c1d              LSRS     r5,r3,#16
0004b0  704b              STRB     r3,[r1,#1]
0004b2  708f              STRB     r7,[r1,#2]
0004b4  70cd              STRB     r5,[r1,#3]
0004b6  46ac              MOV      r12,r5
0004b8  0e1e              LSRS     r6,r3,#24
0004ba  710e              STRB     r6,[r1,#4]
;;;577    
;;;578                        /* ld_value_word &id */
;;;579                        finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
0004bc  2526              MOVS     r5,#0x26
0004be  714d              STRB     r5,[r1,#5]
;;;580                        finsh_code_dword((long)&(var->value.short_value));
0004c0  718b              STRB     r3,[r1,#6]
0004c2  71cf              STRB     r7,[r1,#7]
0004c4  4665              MOV      r5,r12
0004c6  720d              STRB     r5,[r1,#8]
0004c8  724e              STRB     r6,[r1,#9]
;;;581    
;;;582                        /* ld_word 1 */
;;;583                        finsh_code_byte(FINSH_OP_LD_WORD);
0004ca  2523              MOVS     r5,#0x23
0004cc  728d              STRB     r5,[r1,#0xa]
;;;584                        finsh_code_word(1);
0004ce  72c8              STRB     r0,[r1,#0xb]
0004d0  730a              STRB     r2,[r1,#0xc]
;;;585    
;;;586                        /* add_byte */
;;;587                        finsh_code_byte(FINSH_OP_ADD_WORD);
0004d2  2002              MOVS     r0,#2
;;;588                        /* get byte */
;;;589                        finsh_code_byte(FINSH_OP_ST_WORD);
;;;590    
;;;591                        /* pop */
;;;592                        finsh_code_byte(FINSH_OP_POP);
;;;593                        break;
0004d4  e065              B        |L1.1442|
                  |L1.1238|
;;;594    
;;;595                    case FINSH_DATA_TYPE_DWORD:
;;;596                        /* ld_value_dword &id */
;;;597                        // finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
;;;598                        // finsh_code_dword((long)&(var->value.long_value));
;;;599    
;;;600                        /* ld_dword &id */
;;;601                        finsh_code_byte(FINSH_OP_LD_DWORD);
0004d6  495a              LDR      r1,|L1.1600|
0004d8  3314              ADDS     r3,r3,#0x14
0004da  6849              LDR      r1,[r1,#4]  ; finsh_compile_pc
0004dc  2624              MOVS     r6,#0x24
0004de  700e              STRB     r6,[r1,#0]
;;;602                        finsh_code_dword((long)&(var->value.long_value));
0004e0  0a1e              LSRS     r6,r3,#8
0004e2  704b              STRB     r3,[r1,#1]
0004e4  0c1f              LSRS     r7,r3,#16
0004e6  708e              STRB     r6,[r1,#2]
0004e8  46b4              MOV      r12,r6
0004ea  70cf              STRB     r7,[r1,#3]
0004ec  0e1e              LSRS     r6,r3,#24
0004ee  710e              STRB     r6,[r1,#4]
;;;603    
;;;604                        /* ld_value_dword &id */
;;;605                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
0004f0  714d              STRB     r5,[r1,#5]
0004f2  46be              MOV      lr,r7                 ;602
;;;606                        finsh_code_dword((long)&(var->value.long_value));
0004f4  718b              STRB     r3,[r1,#6]
0004f6  4667              MOV      r7,r12
0004f8  71cf              STRB     r7,[r1,#7]
0004fa  4677              MOV      r7,lr
0004fc  720f              STRB     r7,[r1,#8]
0004fe  724e              STRB     r6,[r1,#9]
;;;607    
;;;608                        /* ld_dword 1 */
;;;609                        finsh_code_byte(FINSH_OP_LD_DWORD);
000500  2524              MOVS     r5,#0x24
000502  728d              STRB     r5,[r1,#0xa]
;;;610                        finsh_code_dword(1);
000504  72c8              STRB     r0,[r1,#0xb]
000506  730a              STRB     r2,[r1,#0xc]
000508  734a              STRB     r2,[r1,#0xd]
00050a  738a              STRB     r2,[r1,#0xe]
;;;611    
;;;612                        /* add_byte */
;;;613                        finsh_code_byte(FINSH_OP_ADD_DWORD);
00050c  2003              MOVS     r0,#3
;;;614                        /* get byte */
;;;615                        finsh_code_byte(FINSH_OP_ST_DWORD);
;;;616    
;;;617                        /* pop */
;;;618                        finsh_code_byte(FINSH_OP_POP);
;;;619                        break;
00050e  e06d              B        |L1.1516|
                  |L1.1296|
;;;620                    }
;;;621                }
;;;622                break;
;;;623    
;;;624            /* decrease */
;;;625            case FINSH_NODE_SYS_DEC:
;;;626                if (finsh_node_child(node) && finsh_node_child(node)->node_type == FINSH_NODE_ID)
000510  6923              LDR      r3,[r4,#0x10]
000512  2b00              CMP      r3,#0
000514  d020              BEQ      |L1.1368|
000516  781f              LDRB     r7,[r3,#0]
000518  2f01              CMP      r7,#1
00051a  d11d              BNE      |L1.1368|
;;;627                {
;;;628                    struct finsh_var* var;
;;;629                    var = finsh_node_child(node)->id.var;
;;;630    
;;;631                    switch (node->data_type)
00051c  7867              LDRB     r7,[r4,#1]
00051e  689b              LDR      r3,[r3,#8]            ;629
000520  2f01              CMP      r7,#1
000522  d004              BEQ      |L1.1326|
000524  2f02              CMP      r7,#2
000526  d023              BEQ      |L1.1392|
000528  2f03              CMP      r7,#3
00052a  d179              BNE      |L1.1568|
00052c  e042              B        |L1.1460|
                  |L1.1326|
;;;632                    {
;;;633                    case FINSH_DATA_TYPE_BYTE:
;;;634                        /* ld_value_byte &id */
;;;635                        // finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
;;;636                        // finsh_code_dword((long)&(var->value.char_value));
;;;637    
;;;638                        /* ld_dword &id */
;;;639                        finsh_code_byte(FINSH_OP_LD_DWORD);
00052e  4944              LDR      r1,|L1.1600|
000530  3314              ADDS     r3,r3,#0x14
000532  6849              LDR      r1,[r1,#4]  ; finsh_compile_pc
000534  2224              MOVS     r2,#0x24
000536  700a              STRB     r2,[r1,#0]
;;;640                        finsh_code_dword((long)&(var->value.char_value));
000538  0a1f              LSRS     r7,r3,#8
00053a  704b              STRB     r3,[r1,#1]
00053c  0c1a              LSRS     r2,r3,#16
00053e  708f              STRB     r7,[r1,#2]
000540  0e1d              LSRS     r5,r3,#24
000542  46bc              MOV      r12,r7
000544  70ca              STRB     r2,[r1,#3]
000546  710d              STRB     r5,[r1,#4]
;;;641    
;;;642                        /* ld_value_byte &id */
;;;643                        finsh_code_byte(FINSH_OP_LD_VALUE_BYTE);
000548  2725              MOVS     r7,#0x25
00054a  714f              STRB     r7,[r1,#5]
;;;644                        finsh_code_dword((long)&(var->value.char_value));
00054c  718b              STRB     r3,[r1,#6]
00054e  4667              MOV      r7,r12
000550  71cf              STRB     r7,[r1,#7]
000552  720a              STRB     r2,[r1,#8]
000554  724d              STRB     r5,[r1,#9]
;;;645    
;;;646                        /* ld_byte 1 */
;;;647                        finsh_code_byte(FINSH_OP_LD_BYTE);
000556  e000              B        |L1.1370|
                  |L1.1368|
000558  e062              B        |L1.1568|
                  |L1.1370|
00055a  2322              MOVS     r3,#0x22
00055c  728b              STRB     r3,[r1,#0xa]
;;;648                        finsh_code_byte(1);
00055e  72c8              STRB     r0,[r1,#0xb]
;;;649    
;;;650                        /* add_byte */
;;;651                        finsh_code_byte(FINSH_OP_SUB_BYTE);
000560  2004              MOVS     r0,#4
                  |L1.1378|
000562  7308              STRB     r0,[r1,#0xc]          ;561
000564  734e              STRB     r6,[r1,#0xd]          ;563
000566  202b              MOVS     r0,#0x2b              ;566
000568  7388              STRB     r0,[r1,#0xe]          ;566
00056a  4835              LDR      r0,|L1.1600|
00056c  310f              ADDS     r1,r1,#0xf            ;566
00056e  e01f              B        |L1.1456|
                  |L1.1392|
;;;652                        /* get byte */
;;;653                        finsh_code_byte(FINSH_OP_ST_BYTE);
;;;654    
;;;655                        /* pop */
;;;656                        finsh_code_byte(FINSH_OP_POP);
;;;657                        break;
;;;658    
;;;659                    case FINSH_DATA_TYPE_WORD:
;;;660                        /* ld_value_word &id */
;;;661                        // finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
;;;662                        // finsh_code_dword((long)&(var->value.short_value));
;;;663    
;;;664                        /* ld_dword &id */
;;;665                        finsh_code_byte(FINSH_OP_LD_DWORD);
000570  4933              LDR      r1,|L1.1600|
000572  2524              MOVS     r5,#0x24
000574  6849              LDR      r1,[r1,#4]  ; finsh_compile_pc
000576  3314              ADDS     r3,r3,#0x14
000578  700d              STRB     r5,[r1,#0]
;;;666                        finsh_code_dword((long)&(var->value.short_value));
00057a  0a1f              LSRS     r7,r3,#8
00057c  0c1d              LSRS     r5,r3,#16
00057e  704b              STRB     r3,[r1,#1]
000580  708f              STRB     r7,[r1,#2]
000582  70cd              STRB     r5,[r1,#3]
000584  46ac              MOV      r12,r5
000586  0e1e              LSRS     r6,r3,#24
000588  710e              STRB     r6,[r1,#4]
;;;667    
;;;668                        /* ld_value_word &id */
;;;669                        finsh_code_byte(FINSH_OP_LD_VALUE_WORD);
00058a  2526              MOVS     r5,#0x26
00058c  714d              STRB     r5,[r1,#5]
;;;670                        finsh_code_dword((long)&(var->value.short_value));
00058e  718b              STRB     r3,[r1,#6]
000590  71cf              STRB     r7,[r1,#7]
000592  4665              MOV      r5,r12
000594  720d              STRB     r5,[r1,#8]
000596  724e              STRB     r6,[r1,#9]
;;;671    
;;;672                        /* ld_word 1 */
;;;673                        finsh_code_byte(FINSH_OP_LD_WORD);
000598  2523              MOVS     r5,#0x23
00059a  728d              STRB     r5,[r1,#0xa]
;;;674                        finsh_code_word(1);
00059c  72c8              STRB     r0,[r1,#0xb]
00059e  730a              STRB     r2,[r1,#0xc]
;;;675    
;;;676                        /* add_byte */
;;;677                        finsh_code_byte(FINSH_OP_SUB_WORD);
0005a0  2005              MOVS     r0,#5
                  |L1.1442|
0005a2  7348              STRB     r0,[r1,#0xd]          ;587
0005a4  2029              MOVS     r0,#0x29              ;589
0005a6  7388              STRB     r0,[r1,#0xe]          ;589
0005a8  202b              MOVS     r0,#0x2b              ;592
0005aa  73c8              STRB     r0,[r1,#0xf]          ;592
0005ac  4824              LDR      r0,|L1.1600|
0005ae  3110              ADDS     r1,r1,#0x10           ;592
                  |L1.1456|
0005b0  6041              STR      r1,[r0,#4]            ;656  ; finsh_compile_pc
0005b2  e035              B        |L1.1568|
                  |L1.1460|
;;;678                        /* get byte */
;;;679                        finsh_code_byte(FINSH_OP_ST_WORD);
;;;680    
;;;681                        /* pop */
;;;682                        finsh_code_byte(FINSH_OP_POP);
;;;683                        break;
;;;684    
;;;685                    case FINSH_DATA_TYPE_DWORD:
;;;686                        /* ld_value_dword &id */
;;;687                        // finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
;;;688                        // finsh_code_dword((long)&(var->value.long_value));
;;;689    
;;;690                        /* ld_dword &id */
;;;691                        finsh_code_byte(FINSH_OP_LD_DWORD);
0005b4  4922              LDR      r1,|L1.1600|
0005b6  3314              ADDS     r3,r3,#0x14
0005b8  6849              LDR      r1,[r1,#4]  ; finsh_compile_pc
0005ba  2624              MOVS     r6,#0x24
0005bc  700e              STRB     r6,[r1,#0]
;;;692                        finsh_code_dword((long)&(var->value.long_value));
0005be  0a1e              LSRS     r6,r3,#8
0005c0  704b              STRB     r3,[r1,#1]
0005c2  0c1f              LSRS     r7,r3,#16
0005c4  708e              STRB     r6,[r1,#2]
0005c6  46b6              MOV      lr,r6
0005c8  70cf              STRB     r7,[r1,#3]
0005ca  0e1e              LSRS     r6,r3,#24
0005cc  710e              STRB     r6,[r1,#4]
;;;693    
;;;694                        /* ld_value_dword &id */
;;;695                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD);
0005ce  714d              STRB     r5,[r1,#5]
0005d0  46bc              MOV      r12,r7                ;692
;;;696                        finsh_code_dword((long)&(var->value.long_value));
0005d2  718b              STRB     r3,[r1,#6]
0005d4  4677              MOV      r7,lr
0005d6  71cf              STRB     r7,[r1,#7]
0005d8  4667              MOV      r7,r12
0005da  720f              STRB     r7,[r1,#8]
0005dc  724e              STRB     r6,[r1,#9]
;;;697    
;;;698                        /* ld_dword 1 */
;;;699                        finsh_code_byte(FINSH_OP_LD_DWORD);
0005de  2324              MOVS     r3,#0x24
0005e0  728b              STRB     r3,[r1,#0xa]
;;;700                        finsh_code_dword(1);
0005e2  72c8              STRB     r0,[r1,#0xb]
0005e4  730a              STRB     r2,[r1,#0xc]
0005e6  734a              STRB     r2,[r1,#0xd]
0005e8  738a              STRB     r2,[r1,#0xe]
;;;701    
;;;702                        /* add_byte */
;;;703                        finsh_code_byte(FINSH_OP_SUB_DWORD);
0005ea  2006              MOVS     r0,#6
                  |L1.1516|
0005ec  73c8              STRB     r0,[r1,#0xf]          ;613
0005ee  202a              MOVS     r0,#0x2a              ;615
0005f0  7408              STRB     r0,[r1,#0x10]         ;615
0005f2  202b              MOVS     r0,#0x2b              ;618
0005f4  7448              STRB     r0,[r1,#0x11]         ;618
0005f6  4812              LDR      r0,|L1.1600|
0005f8  3112              ADDS     r1,r1,#0x12           ;618
0005fa  e7d9              B        |L1.1456|
                  |L1.1532|
;;;704                        /* get byte */
;;;705                        finsh_code_byte(FINSH_OP_ST_DWORD);
;;;706    
;;;707                        /* pop */
;;;708                        finsh_code_byte(FINSH_OP_POP);
;;;709                        break;
;;;710                    }
;;;711                }
;;;712                break;
;;;713    
;;;714            case FINSH_NODE_SYS_NULL:
;;;715                finsh_code_dword(0);
0005fc  6848              LDR      r0,[r1,#4]  ; finsh_compile_pc
0005fe  7002              STRB     r2,[r0,#0]
000600  7042              STRB     r2,[r0,#1]
000602  7082              STRB     r2,[r0,#2]
000604  70c2              STRB     r2,[r0,#3]
000606  1d00              ADDS     r0,r0,#4
                  |L1.1544|
000608  6048              STR      r0,[r1,#4]            ;305  ; finsh_compile_pc
00060a  e009              B        |L1.1568|
                  |L1.1548|
;;;716                break;
;;;717    
;;;718            case FINSH_NODE_SYS_GETVALUE:
;;;719                if (node->idtype & FINSH_IDTYPE_ADDRESS)
00060c  78a0              LDRB     r0,[r4,#2]
00060e  0700              LSLS     r0,r0,#28
000610  d406              BMI      |L1.1568|
;;;720                {
;;;721                    /* nothing will be generated */
;;;722                }
;;;723                else
;;;724                {
;;;725                    switch (node->data_type)
000612  7860              LDRB     r0,[r4,#1]
000614  2801              CMP      r0,#1
000616  d00a              BEQ      |L1.1582|
000618  2802              CMP      r0,#2
00061a  d00a              BEQ      |L1.1586|
00061c  2803              CMP      r0,#3
00061e  d00a              BEQ      |L1.1590|
                  |L1.1568|
;;;726                    {
;;;727                    case FINSH_DATA_TYPE_BYTE:
;;;728                        finsh_code_byte(FINSH_OP_LD_VALUE_BYTE_STACK);
;;;729                        break;
;;;730                    case FINSH_DATA_TYPE_WORD:
;;;731                        finsh_code_byte(FINSH_OP_LD_VALUE_WORD_STACK);
;;;732                        break;
;;;733                    case FINSH_DATA_TYPE_DWORD:
;;;734                        finsh_code_byte(FINSH_OP_LD_VALUE_DWORD_STACK);
;;;735                        break;
;;;736                    default:
;;;737                        break;
;;;738                    }
;;;739                }
;;;740                break;
;;;741    
;;;742            case FINSH_NODE_SYS_GETADDR:
;;;743                /* nothing will be generated */
;;;744                break;
;;;745    
;;;746            default:
;;;747                finsh_error_set(FINSH_ERROR_UNKNOWN_NODE);
;;;748                break;
;;;749            }
;;;750    
;;;751            /* compile sibling node */
;;;752            if (finsh_node_sibling(node) != NULL)
000620  68e0              LDR      r0,[r4,#0xc]
000622  2800              CMP      r0,#0
000624  d001              BEQ      |L1.1578|
;;;753                finsh_compile(finsh_node_sibling(node));
000626  f7fffffe          BL       finsh_compile
                  |L1.1578|
;;;754        }
;;;755    
;;;756        return 0;
00062a  2000              MOVS     r0,#0
;;;757    }
00062c  bdf8              POP      {r3-r7,pc}
                  |L1.1582|
00062e  222d              MOVS     r2,#0x2d              ;728
000630  e593              B        |L1.346|
                  |L1.1586|
000632  222e              MOVS     r2,#0x2e              ;731
000634  e591              B        |L1.346|
                  |L1.1590|
000636  222f              MOVS     r2,#0x2f              ;734
000638  e58f              B        |L1.346|
                  |L1.1594|
00063a  2008              MOVS     r0,#8                 ;747
00063c  e648              B        |L1.720|
;;;758    
                          ENDP

00063e  0000              DCW      0x0000
                  |L1.1600|
                          DCD      ||.data||

                          AREA ||i.finsh_compiler_run||, CODE, READONLY, ALIGN=2

                  finsh_compiler_run PROC
;;;902    
;;;903    int finsh_compiler_run(struct finsh_node* node)
000000  b5f8              PUSH     {r3-r7,lr}
;;;904    {
000002  4604              MOV      r4,r0
;;;905        struct finsh_node* sibling;
;;;906    
;;;907        /* type check */
;;;908        finsh_type_check(node, FINSH_NODE_VALUE);
000004  2100              MOVS     r1,#0
000006  f7fffffe          BL       finsh_type_check
;;;909    
;;;910        /* clean text segment and vm stack */
;;;911        memset(&text_segment[0], 0, sizeof(text_segment));
00000a  2180              MOVS     r1,#0x80
00000c  480d              LDR      r0,|L2.68|
00000e  f7fffffe          BL       __aeabi_memclr
;;;912        memset(&finsh_vm_stack[0], 0, sizeof(finsh_vm_stack[0]));
000012  480d              LDR      r0,|L2.72|
000014  2600              MOVS     r6,#0
;;;913    
;;;914        /* reset compile stack pointer and pc */
;;;915        finsh_compile_sp = &finsh_vm_stack[0];
000016  4d0d              LDR      r5,|L2.76|
000018  6006              STR      r6,[r0,#0]  ; finsh_vm_stack
;;;916        finsh_compile_pc = &text_segment[0];
00001a  6028              STR      r0,[r5,#0]  ; finsh_compile_sp
00001c  4809              LDR      r0,|L2.68|
;;;917    
;;;918        /* compile node */
;;;919        sibling = node;
;;;920        while (sibling != NULL)
00001e  6068              STR      r0,[r5,#4]  ; finsh_compile_pc
000020  2c00              CMP      r4,#0
000022  d00c              BEQ      |L2.62|
;;;921        {
;;;922            struct finsh_node* current_node;
;;;923            current_node = sibling;
;;;924    
;;;925            /* get sibling node */
;;;926            sibling = current_node->sibling;
;;;927    
;;;928            /* clean sibling node */
;;;929            current_node->sibling = NULL;
;;;930            finsh_compile(current_node);
;;;931    
;;;932            /* pop current value */
;;;933            if (sibling != NULL) finsh_code_byte(FINSH_OP_POP);
000024  272b              MOVS     r7,#0x2b
                  |L2.38|
000026  4620              MOV      r0,r4                 ;923
000028  68e4              LDR      r4,[r4,#0xc]          ;926
00002a  60c6              STR      r6,[r0,#0xc]          ;930
00002c  f7fffffe          BL       finsh_compile
000030  2c00              CMP      r4,#0
000032  d004              BEQ      |L2.62|
000034  6868              LDR      r0,[r5,#4]  ; finsh_compile_pc
000036  7007              STRB     r7,[r0,#0]
000038  1c40              ADDS     r0,r0,#1
00003a  6068              STR      r0,[r5,#4]  ; finsh_compile_pc
00003c  e7f3              B        |L2.38|
                  |L2.62|
;;;934        }
;;;935    
;;;936        return 0;
00003e  2000              MOVS     r0,#0
;;;937    }
000040  bdf8              POP      {r3-r7,pc}
                          ENDP

000042  0000              DCW      0x0000
                  |L2.68|
                          DCD      text_segment
                  |L2.72|
                          DCD      finsh_vm_stack
                  |L2.76|
                          DCD      ||.data||

                          AREA ||i.finsh_type_check||, CODE, READONLY, ALIGN=1

                  finsh_type_check PROC
;;;758    
;;;759    static int finsh_type_check(struct finsh_node* node, u_char is_addr)
000000  b570              PUSH     {r4-r6,lr}
;;;760    {
000002  0004              MOVS     r4,r0
000004  460d              MOV      r5,r1
000006  d034              BEQ      |L3.114|
;;;761        if (node != NULL)
;;;762        {
;;;763            /* address & value */
;;;764            if (node->node_type == FINSH_NODE_SYS_ASSIGN ||
000008  7820              LDRB     r0,[r4,#0]
00000a  2813              CMP      r0,#0x13
00000c  d008              BEQ      |L3.32|
;;;765                node->node_type == FINSH_NODE_SYS_PREINC ||
00000e  2815              CMP      r0,#0x15
000010  d006              BEQ      |L3.32|
;;;766                node->node_type == FINSH_NODE_SYS_PREDEC ||
000012  2816              CMP      r0,#0x16
000014  d004              BEQ      |L3.32|
;;;767                node->node_type == FINSH_NODE_SYS_GETADDR)
000016  281a              CMP      r0,#0x1a
000018  d002              BEQ      |L3.32|
;;;768            {
;;;769                /* address */
;;;770                finsh_type_check(finsh_node_child(node), FINSH_IDTYPE_ADDRESS);
;;;771            }
;;;772            else if (node->node_type == FINSH_NODE_SYS_GETVALUE && is_addr)
00001a  2819              CMP      r0,#0x19
00001c  d003              BEQ      |L3.38|
00001e  e007              B        |L3.48|
                  |L3.32|
000020  2108              MOVS     r1,#8                 ;770
000022  6920              LDR      r0,[r4,#0x10]         ;770
000024  e005              B        |L3.50|
                  |L3.38|
000026  2d00              CMP      r5,#0
000028  d002              BEQ      |L3.48|
;;;773            {
;;;774                /* change the attribute of getvalue in left expr */
;;;775                finsh_type_check(finsh_node_child(node), 0);
00002a  2100              MOVS     r1,#0
00002c  6920              LDR      r0,[r4,#0x10]
00002e  e000              B        |L3.50|
                  |L3.48|
;;;776            }
;;;777            else
;;;778            {
;;;779                /* transfer 'av' to child node */
;;;780                finsh_type_check(finsh_node_child(node), is_addr);
000030  6920              LDR      r0,[r4,#0x10]
                  |L3.50|
000032  f7fffffe          BL       finsh_type_check
;;;781            }
;;;782    
;;;783            /* always does not load address in sibling */
;;;784            finsh_type_check(finsh_node_sibling(node), FINSH_NODE_VALUE);
000036  2100              MOVS     r1,#0
000038  68e0              LDR      r0,[r4,#0xc]
00003a  f7fffffe          BL       finsh_type_check
;;;785    
;;;786            /** set attribute of current node */
;;;787    
;;;788            /* make sure the current node is address or value */
;;;789            if (node->idtype != FINSH_IDTYPE_SYSCALL) node->idtype |= is_addr;
00003e  78a0              LDRB     r0,[r4,#2]
000040  2804              CMP      r0,#4
000042  d001              BEQ      |L3.72|
000044  4328              ORRS     r0,r0,r5
000046  70a0              STRB     r0,[r4,#2]
                  |L3.72|
;;;790    
;;;791            if (finsh_node_child(node) != NULL)
000048  6920              LDR      r0,[r4,#0x10]
00004a  2800              CMP      r0,#0
00004c  d002              BEQ      |L3.84|
;;;792            {
;;;793                node->data_type = finsh_node_child(node)->data_type;
00004e  7840              LDRB     r0,[r0,#1]
000050  7060              STRB     r0,[r4,#1]
;;;794                return 0;
000052  e00e              B        |L3.114|
                  |L3.84|
;;;795            }
;;;796    
;;;797            if (node->node_type == FINSH_NODE_ID)
000054  7820              LDRB     r0,[r4,#0]
000056  2201              MOVS     r2,#1                 ;764
;;;798            {
;;;799                if (node->idtype & FINSH_IDTYPE_VAR)
;;;800                {
;;;801                    struct finsh_var* var;
;;;802    
;;;803                    var = node->id.var;
;;;804                    if (var != NULL)
;;;805                    {
;;;806                        switch (var->type)
;;;807                        {
;;;808                        case finsh_type_void:
;;;809                            node->data_type = FINSH_DATA_TYPE_VOID;
;;;810                            break;
;;;811    
;;;812                        case finsh_type_char:
;;;813                        case finsh_type_uchar:
;;;814                            node->data_type = FINSH_DATA_TYPE_BYTE;
;;;815                            break;
;;;816    
;;;817                        case finsh_type_short:
;;;818                        case finsh_type_ushort:
;;;819                            node->data_type = FINSH_DATA_TYPE_WORD;
;;;820                            break;
;;;821    
;;;822                        case finsh_type_int:
;;;823                        case finsh_type_uint:
;;;824                        case finsh_type_long:
;;;825                        case finsh_type_ulong:
;;;826                            node->data_type = FINSH_DATA_TYPE_DWORD;
000058  2103              MOVS     r1,#3
00005a  2801              CMP      r0,#1                 ;797
00005c  d00b              BEQ      |L3.118|
;;;827                            break;
;;;828    
;;;829                        case finsh_type_charp:
;;;830                        case finsh_type_voidp:
;;;831                        case finsh_type_shortp:
;;;832                        case finsh_type_intp:
;;;833                        case finsh_type_longp:
;;;834                            node->data_type = FINSH_DATA_TYPE_DWORD;
;;;835                            break;
;;;836    
;;;837                        default:
;;;838                            finsh_error_set(FINSH_ERROR_UNKNOWN_TYPE);
;;;839                            break;
;;;840                        }
;;;841                    }
;;;842                }
;;;843                else if (node->idtype & FINSH_IDTYPE_SYSVAR)
;;;844                {
;;;845                    struct finsh_sysvar *sysvar;
;;;846    
;;;847                    sysvar = node->id.sysvar;
;;;848                    if (sysvar != NULL)
;;;849                    {
;;;850                        switch (sysvar->type)
;;;851                        {
;;;852                        case finsh_type_void:
;;;853                            node->data_type = FINSH_DATA_TYPE_VOID;
;;;854                            break;
;;;855    
;;;856                        case finsh_type_char:
;;;857                        case finsh_type_uchar:
;;;858                            node->data_type = FINSH_DATA_TYPE_BYTE;
;;;859                            break;
;;;860    
;;;861                        case finsh_type_short:
;;;862                        case finsh_type_ushort:
;;;863                            node->data_type = FINSH_DATA_TYPE_WORD;
;;;864                            break;
;;;865    
;;;866                        case finsh_type_int:
;;;867                        case finsh_type_uint:
;;;868                        case finsh_type_long:
;;;869                        case finsh_type_ulong:
;;;870                            node->data_type = FINSH_DATA_TYPE_DWORD;
;;;871                            break;
;;;872    
;;;873                        case finsh_type_charp:
;;;874                        case finsh_type_voidp:
;;;875                        case finsh_type_shortp:
;;;876                        case finsh_type_intp:
;;;877                        case finsh_type_longp:
;;;878                            node->data_type = FINSH_DATA_TYPE_DWORD;
;;;879                            break;
;;;880    
;;;881                        default:
;;;882                            finsh_error_set(FINSH_ERROR_UNKNOWN_TYPE);
;;;883                            break;
;;;884                        }
;;;885                    }
;;;886                }
;;;887            }
;;;888            else if (node->node_type == FINSH_NODE_VALUE_CHAR)
00005e  2802              CMP      r0,#2
000060  d033              BEQ      |L3.202|
;;;889            {
;;;890                node->data_type = FINSH_DATA_TYPE_BYTE;
;;;891            }
;;;892            else if (node->node_type == FINSH_NODE_VALUE_INT ||
000062  2803              CMP      r0,#3
000064  d035              BEQ      |L3.210|
;;;893                node->node_type == FINSH_NODE_VALUE_LONG    ||
000066  2804              CMP      r0,#4
000068  d033              BEQ      |L3.210|
;;;894                node->node_type == FINSH_NODE_VALUE_STRING  ||
00006a  2805              CMP      r0,#5
00006c  d031              BEQ      |L3.210|
;;;895                node->node_type == FINSH_NODE_VALUE_NULL)
00006e  2806              CMP      r0,#6
000070  d02f              BEQ      |L3.210|
                  |L3.114|
;;;896            {
;;;897                node->data_type = FINSH_DATA_TYPE_DWORD;
;;;898            }
;;;899        }
;;;900        return 0;
000072  2000              MOVS     r0,#0
;;;901    }
000074  bd70              POP      {r4-r6,pc}
                  |L3.118|
000076  78a0              LDRB     r0,[r4,#2]            ;799
000078  2500              MOVS     r5,#0                 ;799
00007a  07c3              LSLS     r3,r0,#31             ;799
00007c  2602              MOVS     r6,#2                 ;819
00007e  2b00              CMP      r3,#0                 ;799
000080  d00f              BEQ      |L3.162|
000082  68a0              LDR      r0,[r4,#8]            ;804
000084  2800              CMP      r0,#0                 ;804
000086  d0f4              BEQ      |L3.114|
000088  7c40              LDRB     r0,[r0,#0x11]         ;806
00008a  0003              MOVS     r3,r0                 ;806
00008c  f7fffffe          BL       __ARM_common_switch8
000090  0f231b21          DCB      0x0f,0x23,0x1b,0x21
000094  1d1d211f          DCB      0x1d,0x1d,0x21,0x1f
000098  1f212121          DCB      0x1f,0x21,0x21,0x21
00009c  21212121          DCB      0x21,0x21,0x21,0x21
0000a0  2300              DCB      0x23,0x00
                  |L3.162|
0000a2  0780              LSLS     r0,r0,#30             ;843
0000a4  d5e5              BPL      |L3.114|
0000a6  68a0              LDR      r0,[r4,#8]            ;848
0000a8  2800              CMP      r0,#0                 ;848
0000aa  d0e2              BEQ      |L3.114|
0000ac  7a00              LDRB     r0,[r0,#8]            ;850
0000ae  0003              MOVS     r3,r0                 ;850
0000b0  f7fffffe          BL       __ARM_common_switch8
0000b4  0f11090f          DCB      0x0f,0x11,0x09,0x0f
0000b8  0b0b0f0d          DCB      0x0b,0x0b,0x0f,0x0d
0000bc  0d0f0f0f          DCB      0x0d,0x0f,0x0f,0x0f
0000c0  0f0f0f0f          DCB      0x0f,0x0f,0x0f,0x0f
0000c4  1100              DCB      0x11,0x00
0000c6  7065              STRB     r5,[r4,#1]            ;853
0000c8  e7d3              B        |L3.114|
                  |L3.202|
0000ca  7062              STRB     r2,[r4,#1]            ;858
0000cc  e7d1              B        |L3.114|
0000ce  7066              STRB     r6,[r4,#1]            ;863
0000d0  e7cf              B        |L3.114|
                  |L3.210|
0000d2  7061              STRB     r1,[r4,#1]            ;870
0000d4  e7cd              B        |L3.114|
0000d6  2003              MOVS     r0,#3                 ;882
0000d8  f7fffffe          BL       finsh_error_set
0000dc  e7c9              B        |L3.114|
;;;902    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  finsh_compile_sp
                          DCD      0x00000000
                  finsh_compile_pc
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L26.16|
00000e  461d              MOV      r5,r3
                  |L26.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

