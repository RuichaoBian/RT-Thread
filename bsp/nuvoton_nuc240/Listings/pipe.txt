; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\pipe.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\pipe.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 --omf_browse=.\objects\pipe.crf ..\..\components\drivers\src\pipe.c]
                          THUMB

                          AREA ||i._rt_pipe_resume_reader||, CODE, READONLY, ALIGN=1

                  _rt_pipe_resume_reader PROC
;;;104    
;;;105    static void _rt_pipe_resume_reader(struct rt_pipe_device *pipe)
000000  b510              PUSH     {r4,lr}
;;;106    {
000002  4604              MOV      r4,r0
;;;107        if (pipe->parent.rx_indicate)
000004  69c0              LDR      r0,[r0,#0x1c]
000006  2800              CMP      r0,#0
000008  d007              BEQ      |L1.26|
;;;108            pipe->parent.rx_indicate(&pipe->parent,
00000a  4620              MOV      r0,r4
00000c  3040              ADDS     r0,r0,#0x40
00000e  f7fffffe          BL       rt_ringbuffer_data_len
000012  4601              MOV      r1,r0
000014  69e2              LDR      r2,[r4,#0x1c]
000016  4620              MOV      r0,r4
000018  4790              BLX      r2
                  |L1.26|
;;;109                                     rt_ringbuffer_data_len(&pipe->ringbuffer));
;;;110    
;;;111        if (!rt_list_isempty(&pipe->suspended_read_list))
00001a  4620              MOV      r0,r4
00001c  3050              ADDS     r0,r0,#0x50
00001e  f7fffffe          BL       rt_list_isempty
000022  2800              CMP      r0,#0
000024  d105              BNE      |L1.50|
;;;112        {
;;;113            rt_thread_t thread;
;;;114    
;;;115            RT_ASSERT(pipe->flag & RT_PIPE_FLAG_BLOCK_RD);
;;;116    
;;;117            /* get suspended thread */
;;;118            thread = rt_list_entry(pipe->suspended_read_list.next,
000026  6d20              LDR      r0,[r4,#0x50]
000028  3814              SUBS     r0,r0,#0x14
;;;119                    struct rt_thread,
;;;120                    tlist);
;;;121    
;;;122            /* resume the read thread */
;;;123            rt_thread_resume(thread);
00002a  f7fffffe          BL       rt_thread_resume
;;;124    
;;;125            rt_schedule();
00002e  f7fffffe          BL       rt_schedule
                  |L1.50|
;;;126        }
;;;127    }
000032  bd10              POP      {r4,pc}
;;;128    
                          ENDP


                          AREA ||i._rt_pipe_resume_writer||, CODE, READONLY, ALIGN=1

                  _rt_pipe_resume_writer PROC
;;;28     
;;;29     static void _rt_pipe_resume_writer(struct rt_pipe_device *pipe)
000000  b510              PUSH     {r4,lr}
;;;30     {
000002  4604              MOV      r4,r0
;;;31         if (!rt_list_isempty(&pipe->suspended_write_list))
000004  3058              ADDS     r0,r0,#0x58
000006  f7fffffe          BL       rt_list_isempty
00000a  2800              CMP      r0,#0
00000c  d105              BNE      |L2.26|
;;;32         {
;;;33             rt_thread_t thread;
;;;34     
;;;35             RT_ASSERT(pipe->flag & RT_PIPE_FLAG_BLOCK_WR);
;;;36     
;;;37             /* get suspended thread */
;;;38             thread = rt_list_entry(pipe->suspended_write_list.next,
00000e  6da0              LDR      r0,[r4,#0x58]
000010  3814              SUBS     r0,r0,#0x14
;;;39                     struct rt_thread,
;;;40                     tlist);
;;;41     
;;;42             /* resume the write thread */
;;;43             rt_thread_resume(thread);
000012  f7fffffe          BL       rt_thread_resume
;;;44     
;;;45             rt_schedule();
000016  f7fffffe          BL       rt_schedule
                  |L2.26|
;;;46         }
;;;47     }
00001a  bd10              POP      {r4,pc}
;;;48     
                          ENDP


                          AREA ||i.rt_list_insert_before||, CODE, READONLY, ALIGN=1

                  rt_list_insert_before PROC
;;;76      */
;;;77     rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
000000  6842              LDR      r2,[r0,#4]
;;;78     {
;;;79         l->prev->next = n;
;;;80         n->prev = l->prev;
000002  6011              STR      r1,[r2,#0]
000004  6842              LDR      r2,[r0,#4]
;;;81     
;;;82         l->prev = n;
000006  604a              STR      r2,[r1,#4]
;;;83         n->next = l;
000008  6041              STR      r1,[r0,#4]
00000a  6008              STR      r0,[r1,#0]
;;;84     }
00000c  4770              BX       lr
;;;85     
                          ENDP


                          AREA ||i.rt_list_isempty||, CODE, READONLY, ALIGN=1

                  rt_list_isempty PROC
;;;101     */
;;;102    rt_inline int rt_list_isempty(const rt_list_t *l)
000000  6801              LDR      r1,[r0,#0]
;;;103    {
;;;104        return l->next == l;
000002  4281              CMP      r1,r0
000004  d101              BNE      |L4.10|
000006  2001              MOVS     r0,#1
;;;105    }
000008  4770              BX       lr
                  |L4.10|
00000a  2000              MOVS     r0,#0                 ;104
00000c  4770              BX       lr
;;;106    
                          ENDP


                          AREA ||i.rt_pipe_control||, CODE, READONLY, ALIGN=1

                  rt_pipe_control PROC
;;;190    
;;;191    static rt_err_t rt_pipe_control(rt_device_t dev, rt_uint8_t cmd, void *args)
000000  b570              PUSH     {r4-r6,lr}
;;;192    {
000002  4614              MOV      r4,r2
;;;193        if (cmd == PIPE_CTRL_GET_SPACE && args)
000004  2914              CMP      r1,#0x14
000006  d109              BNE      |L5.28|
000008  2c00              CMP      r4,#0
00000a  d007              BEQ      |L5.28|
00000c  3040              ADDS     r0,r0,#0x40
;;;194            *(rt_size_t*)args = rt_ringbuffer_space_len(&PIPE_DEVICE(dev)->ringbuffer);
00000e  4605              MOV      r5,r0
000010  f7fffffe          BL       rt_ringbuffer_data_len
000014  2108              MOVS     r1,#8
000016  5e69              LDRSH    r1,[r5,r1]
000018  1a08              SUBS     r0,r1,r0
00001a  6020              STR      r0,[r4,#0]
                  |L5.28|
;;;195        return RT_EOK;
00001c  2000              MOVS     r0,#0
;;;196    }
00001e  bd70              POP      {r4-r6,pc}
;;;197    
                          ENDP


                          AREA ||i.rt_pipe_create||, CODE, READONLY, ALIGN=2

                  rt_pipe_create PROC
;;;254    #ifdef RT_USING_HEAP
;;;255    rt_err_t rt_pipe_create(const char *name, enum rt_pipe_flag flag, rt_size_t size)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;256    {
000002  1cd2              ADDS     r2,r2,#3
000004  460f              MOV      r7,r1
;;;257        rt_uint8_t *rb_memptr = RT_NULL;
;;;258        struct rt_pipe_device *pipe = RT_NULL;
;;;259    
;;;260        /* get aligned size */
;;;261        size = RT_ALIGN(size, RT_ALIGN_SIZE);
000006  0895              LSRS     r5,r2,#2
000008  b082              SUB      sp,sp,#8              ;256
00000a  00ad              LSLS     r5,r5,#2
;;;262        pipe = (struct rt_pipe_device *)rt_calloc(1, sizeof(struct rt_pipe_device));
00000c  2168              MOVS     r1,#0x68
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       rt_calloc
;;;263        if (pipe == RT_NULL)
;;;264            return -RT_ENOMEM;
000014  4e0a              LDR      r6,|L6.64|
000016  0004              MOVS     r4,r0                 ;262
000018  d00c              BEQ      |L6.52|
;;;265    
;;;266        /* create ring buffer of pipe */
;;;267        rb_memptr = rt_malloc(size);
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       rt_malloc
000020  0003              MOVS     r3,r0
;;;268        if (rb_memptr == RT_NULL)
000022  d009              BEQ      |L6.56|
;;;269        {
;;;270            rt_free(pipe);
;;;271            return -RT_ENOMEM;
;;;272        }
;;;273    
;;;274        return rt_pipe_init(pipe, name, flag, rb_memptr, size);
000024  463a              MOV      r2,r7
000026  9500              STR      r5,[sp,#0]
000028  4620              MOV      r0,r4
00002a  9902              LDR      r1,[sp,#8]
00002c  f7fffffe          BL       rt_pipe_init
                  |L6.48|
;;;275    }
000030  b005              ADD      sp,sp,#0x14
000032  bdf0              POP      {r4-r7,pc}
                  |L6.52|
000034  4630              MOV      r0,r6                 ;264
000036  e7fb              B        |L6.48|
                  |L6.56|
000038  4620              MOV      r0,r4                 ;270
00003a  f7fffffe          BL       rt_free
00003e  e7f9              B        |L6.52|
;;;276    RTM_EXPORT(rt_pipe_create);
                          ENDP

                  |L6.64|
                          DCD      0xfffffffb

                          AREA ||i.rt_pipe_destroy||, CODE, READONLY, ALIGN=1

                  rt_pipe_destroy PROC
;;;277    
;;;278    void rt_pipe_destroy(struct rt_pipe_device *pipe)
000000  b510              PUSH     {r4,lr}
;;;279    {
000002  0004              MOVS     r4,r0
000004  d007              BEQ      |L7.22|
000006  f7fffffe          BL       rt_device_unregister
;;;280        if (pipe == RT_NULL)
;;;281            return;
;;;282    
;;;283        /* un-register pipe device */
;;;284        rt_pipe_detach(pipe);
;;;285    
;;;286        /* release memory */
;;;287        rt_free(pipe->ringbuffer.buffer_ptr);
00000a  6c20              LDR      r0,[r4,#0x40]
00000c  f7fffffe          BL       rt_free
;;;288        rt_free(pipe);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       rt_free
                  |L7.22|
;;;289    
;;;290        return;
;;;291    }
000016  bd10              POP      {r4,pc}
;;;292    RTM_EXPORT(rt_pipe_destroy);
                          ENDP


                          AREA ||i.rt_pipe_detach||, CODE, READONLY, ALIGN=1

                  rt_pipe_detach PROC
;;;247     */
;;;248    rt_err_t rt_pipe_detach(struct rt_pipe_device *pipe)
000000  b510              PUSH     {r4,lr}
;;;249    {
;;;250        return rt_device_unregister(&pipe->parent);
000002  f7fffffe          BL       rt_device_unregister
;;;251    }
000006  bd10              POP      {r4,pc}
;;;252    RTM_EXPORT(rt_pipe_detach);
                          ENDP


                          AREA ||i.rt_pipe_init||, CODE, READONLY, ALIGN=2

                  rt_pipe_init PROC
;;;209     */
;;;210    rt_err_t rt_pipe_init(struct rt_pipe_device *pipe,
000000  b5f8              PUSH     {r3-r7,lr}
;;;211                          const char *name,
;;;212                          enum rt_pipe_flag flag,
;;;213                          rt_uint8_t *buf,
;;;214                          rt_size_t size)
;;;215    {
000002  460e              MOV      r6,r1
000004  9906              LDR      r1,[sp,#0x18]
000006  4604              MOV      r4,r0
;;;216        RT_ASSERT(pipe);
;;;217        RT_ASSERT(buf);
;;;218    
;;;219        /* initialize suspended list */
;;;220        rt_list_init(&pipe->suspended_read_list);
000008  3050              ADDS     r0,r0,#0x50
00000a  6040              STR      r0,[r0,#4]
00000c  6000              STR      r0,[r0,#0]
;;;221        rt_list_init(&pipe->suspended_write_list);
00000e  4620              MOV      r0,r4
000010  3058              ADDS     r0,r0,#0x58
000012  65e0              STR      r0,[r4,#0x5c]
000014  4615              MOV      r5,r2                 ;215
;;;222    
;;;223        /* initialize ring buffer */
;;;224        rt_ringbuffer_init(&pipe->ringbuffer, buf, size);
000016  65a0              STR      r0,[r4,#0x58]
000018  b20a              SXTH     r2,r1
00001a  3818              SUBS     r0,r0,#0x18
00001c  4619              MOV      r1,r3
00001e  4607              MOV      r7,r0
000020  f7fffffe          BL       rt_ringbuffer_init
;;;225    
;;;226        pipe->flag = flag;
000024  733d              STRB     r5,[r7,#0xc]
;;;227    
;;;228        /* create pipe */
;;;229        pipe->parent.type    = RT_Device_Class_Pipe;
000026  200f              MOVS     r0,#0xf
000028  7520              STRB     r0,[r4,#0x14]
;;;230        pipe->parent.init    = RT_NULL;
00002a  2000              MOVS     r0,#0
;;;231        pipe->parent.open    = RT_NULL;
00002c  6260              STR      r0,[r4,#0x24]
;;;232        pipe->parent.close   = RT_NULL;
00002e  62a0              STR      r0,[r4,#0x28]
;;;233        pipe->parent.read    = rt_pipe_read;
000030  62e0              STR      r0,[r4,#0x2c]
000032  4806              LDR      r0,|L9.76|
;;;234        pipe->parent.write   = rt_pipe_write;
000034  6320              STR      r0,[r4,#0x30]
000036  4806              LDR      r0,|L9.80|
;;;235        pipe->parent.control = rt_pipe_control;
000038  6360              STR      r0,[r4,#0x34]
00003a  4806              LDR      r0,|L9.84|
;;;236    
;;;237        return rt_device_register(&(pipe->parent), name, RT_DEVICE_FLAG_RDWR);
00003c  63a0              STR      r0,[r4,#0x38]
00003e  2203              MOVS     r2,#3
000040  4631              MOV      r1,r6
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       rt_device_register
;;;238    }
000048  bdf8              POP      {r3-r7,pc}
;;;239    RTM_EXPORT(rt_pipe_init);
                          ENDP

00004a  0000              DCW      0x0000
                  |L9.76|
                          DCD      rt_pipe_read
                  |L9.80|
                          DCD      rt_pipe_write
                  |L9.84|
                          DCD      rt_pipe_control

                          AREA ||i.rt_pipe_read||, CODE, READONLY, ALIGN=1

                  rt_pipe_read PROC
;;;48     
;;;49     static rt_size_t rt_pipe_read(rt_device_t dev,
000000  b5ff              PUSH     {r0-r7,lr}
;;;50                                   rt_off_t    pos,
;;;51                                   void       *buffer,
;;;52                                   rt_size_t   size)
;;;53     {
;;;54         rt_uint32_t level;
;;;55         rt_thread_t thread;
;;;56         struct rt_pipe_device *pipe;
;;;57         rt_size_t read_nbytes;
;;;58     
;;;59         pipe = PIPE_DEVICE(dev);
;;;60         RT_ASSERT(pipe != RT_NULL);
;;;61     
;;;62         if (!(pipe->flag & RT_PIPE_FLAG_BLOCK_RD))
000002  4607              MOV      r7,r0
000004  4605              MOV      r5,r0                 ;53
000006  3740              ADDS     r7,r7,#0x40
000008  7b38              LDRB     r0,[r7,#0xc]
00000a  b085              SUB      sp,sp,#0x14           ;53
00000c  461e              MOV      r6,r3                 ;53
00000e  07c0              LSLS     r0,r0,#31
000010  d01a              BEQ      |L10.72|
;;;63         {
;;;64             level = rt_hw_interrupt_disable();
;;;65             read_nbytes = rt_ringbuffer_get(&(pipe->ringbuffer), buffer, size);
;;;66     
;;;67             /* if the ringbuffer is empty, there won't be any writer waiting */
;;;68             if (read_nbytes)
;;;69                 _rt_pipe_resume_writer(pipe);
;;;70     
;;;71             rt_hw_interrupt_enable(level);
;;;72     
;;;73             return read_nbytes;
;;;74         }
;;;75     
;;;76         thread = rt_thread_self();
000012  f7fffffe          BL       rt_thread_self
000016  9002              STR      r0,[sp,#8]
000018  3014              ADDS     r0,r0,#0x14
;;;77     
;;;78         /* current context checking */
;;;79         RT_DEBUG_NOT_IN_INTERRUPT;
;;;80     
;;;81         do {
;;;82             level = rt_hw_interrupt_disable();
;;;83             read_nbytes = rt_ringbuffer_get(&(pipe->ringbuffer), buffer, size);
;;;84             if (read_nbytes == 0)
;;;85             {
;;;86                 rt_thread_suspend(thread);
;;;87                 /* waiting on suspended read list */
;;;88                 rt_list_insert_before(&(pipe->suspended_read_list),
00001a  9000              STR      r0,[sp,#0]
00001c  4628              MOV      r0,r5
00001e  3050              ADDS     r0,r0,#0x50
000020  9001              STR      r0,[sp,#4]
                  |L10.34|
000022  f7fffffe          BL       rt_hw_interrupt_disable
000026  9003              STR      r0,[sp,#0xc]          ;83
000028  b2b2              UXTH     r2,r6                 ;83
00002a  4638              MOV      r0,r7                 ;83
00002c  9907              LDR      r1,[sp,#0x1c]         ;83
00002e  f7fffffe          BL       rt_ringbuffer_get
000032  0004              MOVS     r4,r0                 ;83
000034  d01a              BEQ      |L10.108|
;;;89                                       &(thread->tlist));
;;;90                 rt_hw_interrupt_enable(level);
;;;91     
;;;92                 rt_schedule();
;;;93             }
;;;94             else
;;;95             {
;;;96                 _rt_pipe_resume_writer(pipe);
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       _rt_pipe_resume_writer
;;;97                 rt_hw_interrupt_enable(level);
00003c  9803              LDR      r0,[sp,#0xc]
00003e  f7fffffe          BL       rt_hw_interrupt_enable
;;;98                 break;
;;;99             }
;;;100        } while (read_nbytes == 0);
;;;101    
;;;102        return read_nbytes;
000042  4620              MOV      r0,r4
                  |L10.68|
;;;103    }
000044  b009              ADD      sp,sp,#0x24
000046  bdf0              POP      {r4-r7,pc}
                  |L10.72|
000048  f7fffffe          BL       rt_hw_interrupt_disable
00004c  4604              MOV      r4,r0                 ;64
00004e  b2b2              UXTH     r2,r6                 ;65
000050  4638              MOV      r0,r7                 ;65
000052  9907              LDR      r1,[sp,#0x1c]         ;65
000054  f7fffffe          BL       rt_ringbuffer_get
000058  0006              MOVS     r6,r0                 ;65
00005a  d002              BEQ      |L10.98|
00005c  4628              MOV      r0,r5                 ;69
00005e  f7fffffe          BL       _rt_pipe_resume_writer
                  |L10.98|
000062  4620              MOV      r0,r4                 ;71
000064  f7fffffe          BL       rt_hw_interrupt_enable
000068  4630              MOV      r0,r6                 ;73
00006a  e7eb              B        |L10.68|
                  |L10.108|
00006c  9802              LDR      r0,[sp,#8]            ;86
00006e  f7fffffe          BL       rt_thread_suspend
000072  9900              LDR      r1,[sp,#0]            ;88
000074  9801              LDR      r0,[sp,#4]            ;88
000076  f7fffffe          BL       rt_list_insert_before
00007a  9803              LDR      r0,[sp,#0xc]          ;90
00007c  f7fffffe          BL       rt_hw_interrupt_enable
000080  f7fffffe          BL       rt_schedule
000084  e7cd              B        |L10.34|
;;;104    
                          ENDP


                          AREA ||i.rt_pipe_write||, CODE, READONLY, ALIGN=1

                  rt_pipe_write PROC
;;;128    
;;;129    static rt_size_t rt_pipe_write(rt_device_t dev,
000000  b5ff              PUSH     {r0-r7,lr}
;;;130                                   rt_off_t    pos,
;;;131                                   const void *buffer,
;;;132                                   rt_size_t   size)
;;;133    {
;;;134        rt_uint32_t level;
;;;135        rt_thread_t thread;
;;;136        struct rt_pipe_device *pipe;
;;;137        rt_size_t write_nbytes;
;;;138    
;;;139        pipe = PIPE_DEVICE(dev);
;;;140        RT_ASSERT(pipe != RT_NULL);
;;;141    
;;;142        if ((pipe->flag & RT_PIPE_FLAG_FORCE_WR) ||
000002  4607              MOV      r7,r0
000004  4606              MOV      r6,r0                 ;133
000006  3740              ADDS     r7,r7,#0x40
000008  7b38              LDRB     r0,[r7,#0xc]
00000a  b085              SUB      sp,sp,#0x14           ;133
00000c  461d              MOV      r5,r3                 ;133
00000e  0741              LSLS     r1,r0,#29
000010  d401              BMI      |L11.22|
;;;143           !(pipe->flag & RT_PIPE_FLAG_BLOCK_WR))
000012  0780              LSLS     r0,r0,#30
000014  d41a              BMI      |L11.76|
                  |L11.22|
;;;144        {
;;;145            level = rt_hw_interrupt_disable();
000016  f7fffffe          BL       rt_hw_interrupt_disable
00001a  4604              MOV      r4,r0
;;;146    
;;;147            if (pipe->flag & RT_PIPE_FLAG_FORCE_WR)
00001c  7b38              LDRB     r0,[r7,#0xc]
00001e  0740              LSLS     r0,r0,#29
000020  d505              BPL      |L11.46|
;;;148                write_nbytes = rt_ringbuffer_put_force(&(pipe->ringbuffer),
000022  b2aa              UXTH     r2,r5
000024  4638              MOV      r0,r7
000026  9907              LDR      r1,[sp,#0x1c]
000028  f7fffffe          BL       rt_ringbuffer_put_force
00002c  e004              B        |L11.56|
                  |L11.46|
;;;149                                                       buffer, size);
;;;150            else
;;;151                write_nbytes = rt_ringbuffer_put(&(pipe->ringbuffer),
00002e  b2aa              UXTH     r2,r5
000030  4638              MOV      r0,r7
000032  9907              LDR      r1,[sp,#0x1c]
000034  f7fffffe          BL       rt_ringbuffer_put
                  |L11.56|
000038  4605              MOV      r5,r0
;;;152                                                 buffer, size);
;;;153    
;;;154            _rt_pipe_resume_reader(pipe);
00003a  4630              MOV      r0,r6
00003c  f7fffffe          BL       _rt_pipe_resume_reader
;;;155    
;;;156            rt_hw_interrupt_enable(level);
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       rt_hw_interrupt_enable
;;;157    
;;;158            return write_nbytes;
000046  4628              MOV      r0,r5
                  |L11.72|
;;;159        }
;;;160    
;;;161        thread = rt_thread_self();
;;;162    
;;;163        /* current context checking */
;;;164        RT_DEBUG_NOT_IN_INTERRUPT;
;;;165    
;;;166        do {
;;;167            level = rt_hw_interrupt_disable();
;;;168            write_nbytes = rt_ringbuffer_put(&(pipe->ringbuffer), buffer, size);
;;;169            if (write_nbytes == 0)
;;;170            {
;;;171                /* pipe full, waiting on suspended write list */
;;;172                rt_thread_suspend(thread);
;;;173                /* waiting on suspended read list */
;;;174                rt_list_insert_before(&(pipe->suspended_write_list),
;;;175                                      &(thread->tlist));
;;;176                rt_hw_interrupt_enable(level);
;;;177    
;;;178                rt_schedule();
;;;179            }
;;;180            else
;;;181            {
;;;182                _rt_pipe_resume_reader(pipe);
;;;183                rt_hw_interrupt_enable(level);
;;;184                break;
;;;185            }
;;;186        } while (write_nbytes == 0);
;;;187    
;;;188        return write_nbytes;
;;;189    }
000048  b009              ADD      sp,sp,#0x24
00004a  bdf0              POP      {r4-r7,pc}
                  |L11.76|
00004c  f7fffffe          BL       rt_thread_self
000050  9002              STR      r0,[sp,#8]            ;161
000052  3014              ADDS     r0,r0,#0x14           ;161
000054  9000              STR      r0,[sp,#0]            ;174
000056  4630              MOV      r0,r6                 ;174
000058  3058              ADDS     r0,r0,#0x58           ;174
00005a  9001              STR      r0,[sp,#4]            ;174
                  |L11.92|
00005c  f7fffffe          BL       rt_hw_interrupt_disable
000060  9003              STR      r0,[sp,#0xc]          ;168
000062  b2aa              UXTH     r2,r5                 ;168
000064  4638              MOV      r0,r7                 ;168
000066  9907              LDR      r1,[sp,#0x1c]         ;168
000068  f7fffffe          BL       rt_ringbuffer_put
00006c  0004              MOVS     r4,r0                 ;168
00006e  d007              BEQ      |L11.128|
000070  4630              MOV      r0,r6                 ;182
000072  f7fffffe          BL       _rt_pipe_resume_reader
000076  9803              LDR      r0,[sp,#0xc]          ;183
000078  f7fffffe          BL       rt_hw_interrupt_enable
00007c  4620              MOV      r0,r4                 ;188
00007e  e7e3              B        |L11.72|
                  |L11.128|
000080  9802              LDR      r0,[sp,#8]            ;172
000082  f7fffffe          BL       rt_thread_suspend
000086  9900              LDR      r1,[sp,#0]            ;174
000088  9801              LDR      r0,[sp,#4]            ;174
00008a  f7fffffe          BL       rt_list_insert_before
00008e  9803              LDR      r0,[sp,#0xc]          ;176
000090  f7fffffe          BL       rt_hw_interrupt_enable
000094  f7fffffe          BL       rt_schedule
000098  e7e0              B        |L11.92|
;;;190    
                          ENDP


                          AREA ||i.rt_ringbuffer_data_len||, CODE, READONLY, ALIGN=1

                  rt_ringbuffer_data_len PROC
;;;225    /** return the size of data in rb */
;;;226    rt_inline rt_uint16_t rt_ringbuffer_data_len(struct rt_ringbuffer *rb)
000000  b510              PUSH     {r4,lr}
000002  8884              LDRH     r4,[r0,#4]
000004  88c3              LDRH     r3,[r0,#6]
000006  0861              LSRS     r1,r4,#1
000008  085a              LSRS     r2,r3,#1
00000a  4291              CMP      r1,r2
;;;227    {
00000c  d109              BNE      |L12.34|
00000e  07e1              LSLS     r1,r4,#31
000010  07da              LSLS     r2,r3,#31
000012  0fc9              LSRS     r1,r1,#31
000014  0fd2              LSRS     r2,r2,#31
000016  4291              CMP      r1,r2
000018  d101              BNE      |L12.30|
;;;228        switch (rt_ringbuffer_status(rb))
;;;229        {
;;;230        case RT_RINGBUFFER_EMPTY:
;;;231            return 0;
00001a  2000              MOVS     r0,#0
;;;232        case RT_RINGBUFFER_FULL:
;;;233            return rb->buffer_size;
;;;234        case RT_RINGBUFFER_HALFFULL:
;;;235        default:
;;;236            if (rb->write_index > rb->read_index)
;;;237                return rb->write_index - rb->read_index;
;;;238            else
;;;239                return rb->buffer_size - (rb->read_index - rb->write_index);
;;;240        };
;;;241    }
00001c  bd10              POP      {r4,pc}
                  |L12.30|
00001e  8900              LDRH     r0,[r0,#8]            ;233
000020  bd10              POP      {r4,pc}
                  |L12.34|
000022  428a              CMP      r2,r1                 ;236
000024  d901              BLS      |L12.42|
000026  1a50              SUBS     r0,r2,r1              ;237
000028  e002              B        |L12.48|
                  |L12.42|
00002a  8900              LDRH     r0,[r0,#8]            ;239
00002c  1a89              SUBS     r1,r1,r2              ;239
00002e  1a40              SUBS     r0,r0,r1              ;239
                  |L12.48|
000030  b280              UXTH     r0,r0                 ;239
000032  bd10              POP      {r4,pc}
;;;242    
                          ENDP

