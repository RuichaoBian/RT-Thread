; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\device.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\device.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 --omf_browse=.\objects\device.crf ..\..\src\device.c]
                          THUMB

                          AREA ||i.rt_device_close||, CODE, READONLY, ALIGN=1

                  rt_device_close PROC
;;;238     */
;;;239    rt_err_t rt_device_close(rt_device_t dev)
000000  b510              PUSH     {r4,lr}
;;;240    {
000002  4604              MOV      r4,r0
;;;241        rt_err_t result = RT_EOK;
;;;242    
;;;243        RT_ASSERT(dev != RT_NULL);
;;;244    
;;;245        if (dev->ref_count == 0)
000004  7ea1              LDRB     r1,[r4,#0x1a]
000006  2000              MOVS     r0,#0                 ;241
000008  2900              CMP      r1,#0
00000a  d005              BEQ      |L1.24|
00000c  1e49              SUBS     r1,r1,#1              ;240
;;;246            return -RT_ERROR;
;;;247    
;;;248        dev->ref_count--;
00000e  0609              LSLS     r1,r1,#24
000010  0e09              LSRS     r1,r1,#24
000012  76a1              STRB     r1,[r4,#0x1a]
;;;249    
;;;250        if (dev->ref_count != 0)
000014  d003              BEQ      |L1.30|
;;;251            return RT_EOK;
;;;252    
;;;253        /* call device close interface */
;;;254        if (dev->close != RT_NULL)
;;;255        {
;;;256            result = dev->close(dev);
;;;257        }
;;;258    
;;;259        /* set open flag */
;;;260        if (result == RT_EOK || result == -RT_ENOSYS)
;;;261            dev->open_flag = RT_DEVICE_OFLAG_CLOSE;
;;;262    
;;;263        return result;
;;;264    }
000016  bd10              POP      {r4,pc}
                  |L1.24|
000018  2000              MOVS     r0,#0                 ;246
00001a  43c0              MVNS     r0,r0                 ;246
                  |L1.28|
00001c  bd10              POP      {r4,pc}
                  |L1.30|
00001e  6ae1              LDR      r1,[r4,#0x2c]         ;254
000020  2900              CMP      r1,#0                 ;254
000022  d005              BEQ      |L1.48|
000024  4620              MOV      r0,r4                 ;256
000026  4788              BLX      r1                    ;256
000028  2800              CMP      r0,#0                 ;260
00002a  d001              BEQ      |L1.48|
00002c  1d81              ADDS     r1,r0,#6              ;260
00002e  d1f5              BNE      |L1.28|
                  |L1.48|
000030  2100              MOVS     r1,#0                 ;261
000032  8321              STRH     r1,[r4,#0x18]         ;261
000034  bd10              POP      {r4,pc}
;;;265    RTM_EXPORT(rt_device_close);
                          ENDP


                          AREA ||i.rt_device_control||, CODE, READONLY, ALIGN=1

                  rt_device_control PROC
;;;351     */
;;;352    rt_err_t rt_device_control(rt_device_t dev, rt_uint8_t cmd, void *arg)
000000  6b83              LDR      r3,[r0,#0x38]
;;;353    {
;;;354        RT_ASSERT(dev != RT_NULL);
;;;355    
;;;356        /* call device write interface */
;;;357        if (dev->control != RT_NULL)
000002  2b00              CMP      r3,#0
000004  d000              BEQ      |L2.8|
;;;358        {
;;;359            return dev->control(dev, cmd, arg);
000006  4718              BX       r3
                  |L2.8|
;;;360        }
;;;361    
;;;362        return RT_EOK;
000008  2000              MOVS     r0,#0
;;;363    }
00000a  4770              BX       lr
;;;364    RTM_EXPORT(rt_device_control);
                          ENDP


                          AREA ||i.rt_device_find||, CODE, READONLY, ALIGN=2

                  rt_device_find PROC
;;;99      */
;;;100    rt_device_t rt_device_find(const char *name)
000000  b5f8              PUSH     {r3-r7,lr}
;;;101    {
000002  4607              MOV      r7,r0
;;;102        struct rt_object *object;
;;;103        struct rt_list_node *node;
;;;104        struct rt_object_information *information;
;;;105    
;;;106        extern struct rt_object_information rt_object_container[];
;;;107    
;;;108        /* enter critical */
;;;109        if (rt_thread_self() != RT_NULL)
000004  f7fffffe          BL       rt_thread_self
000008  2800              CMP      r0,#0
00000a  d001              BEQ      |L3.16|
;;;110            rt_enter_critical();
00000c  f7fffffe          BL       rt_enter_critical
                  |L3.16|
;;;111    
;;;112        /* try to find device object */
;;;113        information = &rt_object_container[RT_Object_Class_Device];
000010  4e0f              LDR      r6,|L3.80|
;;;114        for (node  = information->object_list.next;
000012  6f74              LDR      r4,[r6,#0x74]
000014  3674              ADDS     r6,r6,#0x74
000016  e009              B        |L3.44|
                  |L3.24|
;;;115             node != &(information->object_list);
;;;116             node  = node->next)
;;;117        {
;;;118            object = rt_list_entry(node, struct rt_object, list);
000018  4625              MOV      r5,r4
00001a  3d0c              SUBS     r5,r5,#0xc
;;;119            if (rt_strncmp(object->name, name, RT_NAME_MAX) == 0)
00001c  2208              MOVS     r2,#8
00001e  4639              MOV      r1,r7
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       rt_strncmp
000026  2800              CMP      r0,#0
000028  d00a              BEQ      |L3.64|
00002a  6824              LDR      r4,[r4,#0]            ;116
                  |L3.44|
00002c  42b4              CMP      r4,r6                 ;115
00002e  d1f3              BNE      |L3.24|
;;;120            {
;;;121                /* leave critical */
;;;122                if (rt_thread_self() != RT_NULL)
;;;123                    rt_exit_critical();
;;;124    
;;;125                return (rt_device_t)object;
;;;126            }
;;;127        }
;;;128    
;;;129        /* leave critical */
;;;130        if (rt_thread_self() != RT_NULL)
000030  f7fffffe          BL       rt_thread_self
000034  2800              CMP      r0,#0
000036  d001              BEQ      |L3.60|
;;;131            rt_exit_critical();
000038  f7fffffe          BL       rt_exit_critical
                  |L3.60|
;;;132    
;;;133        /* not found */
;;;134        return RT_NULL;
00003c  2000              MOVS     r0,#0
;;;135    }
00003e  bdf8              POP      {r3-r7,pc}
                  |L3.64|
000040  f7fffffe          BL       rt_thread_self
000044  2800              CMP      r0,#0                 ;122
000046  d001              BEQ      |L3.76|
000048  f7fffffe          BL       rt_exit_critical
                  |L3.76|
00004c  4628              MOV      r0,r5                 ;125
00004e  bdf8              POP      {r3-r7,pc}
;;;136    RTM_EXPORT(rt_device_find);
                          ENDP

                  |L3.80|
                          DCD      rt_object_container

                          AREA ||i.rt_device_init||, CODE, READONLY, ALIGN=2

                  rt_device_init PROC
;;;144     */
;;;145    rt_err_t rt_device_init(rt_device_t dev)
000000  b570              PUSH     {r4-r6,lr}
;;;146    {
;;;147        rt_err_t result = RT_EOK;
;;;148    
;;;149        RT_ASSERT(dev != RT_NULL);
;;;150    
;;;151        /* get device init handler */
;;;152        if (dev->init != RT_NULL)
000002  6a41              LDR      r1,[r0,#0x24]
000004  2500              MOVS     r5,#0                 ;147
000006  4604              MOV      r4,r0                 ;146
000008  2900              CMP      r1,#0
00000a  d010              BEQ      |L4.46|
;;;153        {
;;;154            if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
00000c  7da0              LDRB     r0,[r4,#0x16]
00000e  06c0              LSLS     r0,r0,#27
000010  d40d              BMI      |L4.46|
;;;155            {
;;;156                result = dev->init(dev);
000012  4620              MOV      r0,r4
000014  4788              BLX      r1
000016  0005              MOVS     r5,r0
;;;157                if (result != RT_EOK)
000018  d005              BEQ      |L4.38|
;;;158                {
;;;159                    rt_kprintf("To initialize device:%s failed. The error code is %d\n",
00001a  4602              MOV      r2,r0
00001c  4621              MOV      r1,r4
00001e  a005              ADR      r0,|L4.52|
000020  f7fffffe          BL       rt_kprintf
000024  e003              B        |L4.46|
                  |L4.38|
;;;160                               dev->parent.name, result);
;;;161                }
;;;162                else
;;;163                {
;;;164                    dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
000026  8ae0              LDRH     r0,[r4,#0x16]
000028  2110              MOVS     r1,#0x10
00002a  4308              ORRS     r0,r0,r1
00002c  82e0              STRH     r0,[r4,#0x16]
                  |L4.46|
;;;165                }
;;;166            }
;;;167        }
;;;168    
;;;169        return result;
00002e  4628              MOV      r0,r5
;;;170    }
000030  bd70              POP      {r4-r6,pc}
;;;171    
                          ENDP

000032  0000              DCW      0x0000
                  |L4.52|
000034  546f2069          DCB      "To initialize device:%s failed. The error code is %d\n",0
000038  6e697469
00003c  616c697a
000040  65206465
000044  76696365
000048  3a257320
00004c  6661696c
000050  65642e20
000054  54686520
000058  6572726f
00005c  7220636f
000060  64652069
000064  73202564
000068  0a00    
00006a  00                DCB      0
00006b  00                DCB      0

                          AREA ||i.rt_device_init_all||, CODE, READONLY, ALIGN=1

                  rt_device_init_all PROC
;;;87      */
;;;88     rt_err_t rt_device_init_all(void)
000000  2000              MOVS     r0,#0
;;;89     {
;;;90         return RT_EOK;
;;;91     }
000002  4770              BX       lr
;;;92     
                          ENDP


                          AREA ||i.rt_device_open||, CODE, READONLY, ALIGN=2

                  rt_device_open PROC
;;;179     */
;;;180    rt_err_t rt_device_open(rt_device_t dev, rt_uint16_t oflag)
000000  b570              PUSH     {r4-r6,lr}
;;;181    {
000002  4604              MOV      r4,r0
;;;182        rt_err_t result = RT_EOK;
;;;183    
;;;184        RT_ASSERT(dev != RT_NULL);
;;;185    
;;;186        /* if device is not initialized, initialize it. */
;;;187        if (!(dev->flag & RT_DEVICE_FLAG_ACTIVATED))
000004  7d80              LDRB     r0,[r0,#0x16]
000006  2500              MOVS     r5,#0                 ;182
000008  460e              MOV      r6,r1                 ;181
00000a  06c0              LSLS     r0,r0,#27
00000c  d410              BMI      |L6.48|
;;;188        {
;;;189            if (dev->init != RT_NULL)
00000e  6a61              LDR      r1,[r4,#0x24]
000010  2900              CMP      r1,#0
000012  d009              BEQ      |L6.40|
;;;190            {
;;;191                result = dev->init(dev);
000014  4620              MOV      r0,r4
000016  4788              BLX      r1
000018  0005              MOVS     r5,r0
;;;192                if (result != RT_EOK)
00001a  d005              BEQ      |L6.40|
;;;193                {
;;;194                    rt_kprintf("To initialize device:%s failed. The error code is %d\n",
00001c  4602              MOV      r2,r0
00001e  4621              MOV      r1,r4
000020  a011              ADR      r0,|L6.104|
000022  f7fffffe          BL       rt_kprintf
;;;195                               dev->parent.name, result);
;;;196    
;;;197                    return result;
000026  e01c              B        |L6.98|
                  |L6.40|
;;;198                }
;;;199            }
;;;200    
;;;201            dev->flag |= RT_DEVICE_FLAG_ACTIVATED;
000028  8ae0              LDRH     r0,[r4,#0x16]
00002a  2110              MOVS     r1,#0x10
00002c  4308              ORRS     r0,r0,r1
00002e  82e0              STRH     r0,[r4,#0x16]
                  |L6.48|
;;;202        }
;;;203    
;;;204        /* device is a stand alone device and opened */
;;;205        if ((dev->flag & RT_DEVICE_FLAG_STANDALONE) &&
000030  7da0              LDRB     r0,[r4,#0x16]
000032  0700              LSLS     r0,r0,#28
000034  d505              BPL      |L6.66|
;;;206            (dev->open_flag & RT_DEVICE_OFLAG_OPEN))
000036  7e20              LDRB     r0,[r4,#0x18]
000038  0700              LSLS     r0,r0,#28
00003a  d502              BPL      |L6.66|
;;;207        {
;;;208            return -RT_EBUSY;
00003c  2006              MOVS     r0,#6
00003e  43c0              MVNS     r0,r0
;;;209        }
;;;210    
;;;211        /* call device open interface */
;;;212        if (dev->open != RT_NULL)
;;;213        {
;;;214            result = dev->open(dev, oflag);
;;;215        }
;;;216    
;;;217        /* set open flag */
;;;218        if (result == RT_EOK || result == -RT_ENOSYS)
;;;219        {
;;;220            dev->open_flag = oflag | RT_DEVICE_OFLAG_OPEN;
;;;221    
;;;222            dev->ref_count++;
;;;223            /* don't let bad things happen silently. If you are bitten by this assert,
;;;224             * please set the ref_count to a bigger type. */
;;;225            RT_ASSERT(dev->ref_count != 0);
;;;226        }
;;;227    
;;;228        return result;
;;;229    }
000040  bd70              POP      {r4-r6,pc}
                  |L6.66|
000042  6aa2              LDR      r2,[r4,#0x28]         ;212
000044  2a00              CMP      r2,#0                 ;212
000046  d006              BEQ      |L6.86|
000048  4631              MOV      r1,r6                 ;214
00004a  4620              MOV      r0,r4                 ;214
00004c  4790              BLX      r2                    ;214
00004e  0005              MOVS     r5,r0                 ;214
000050  d001              BEQ      |L6.86|
000052  1da8              ADDS     r0,r5,#6              ;218
000054  d105              BNE      |L6.98|
                  |L6.86|
000056  2008              MOVS     r0,#8                 ;220
000058  4306              ORRS     r6,r6,r0              ;220
00005a  8326              STRH     r6,[r4,#0x18]         ;220
00005c  7ea0              LDRB     r0,[r4,#0x1a]         ;222
00005e  1c40              ADDS     r0,r0,#1              ;222
000060  76a0              STRB     r0,[r4,#0x1a]         ;222
                  |L6.98|
000062  4628              MOV      r0,r5                 ;228
000064  bd70              POP      {r4-r6,pc}
;;;230    RTM_EXPORT(rt_device_open);
                          ENDP

000066  0000              DCW      0x0000
                  |L6.104|
000068  546f2069          DCB      "To initialize device:%s failed. The error code is %d\n",0
00006c  6e697469
000070  616c697a
000074  65206465
000078  76696365
00007c  3a257320
000080  6661696c
000084  65642e20
000088  54686520
00008c  6572726f
000090  7220636f
000094  64652069
000098  73202564
00009c  0a00    
00009e  00                DCB      0
00009f  00                DCB      0

                          AREA ||i.rt_device_read||, CODE, READONLY, ALIGN=1

                  rt_device_read PROC
;;;278     */
;;;279    rt_size_t rt_device_read(rt_device_t dev,
000000  b510              PUSH     {r4,lr}
;;;280                             rt_off_t    pos,
;;;281                             void       *buffer,
;;;282                             rt_size_t   size)
;;;283    {
;;;284        RT_ASSERT(dev != RT_NULL);
;;;285    
;;;286        if (dev->ref_count == 0)
000002  7e84              LDRB     r4,[r0,#0x1a]
000004  2c00              CMP      r4,#0
000006  d004              BEQ      |L7.18|
;;;287        {
;;;288            rt_set_errno(-RT_ERROR);
;;;289            return 0;
;;;290        }
;;;291    
;;;292        /* call device read interface */
;;;293        if (dev->read != RT_NULL)
000008  6b04              LDR      r4,[r0,#0x30]
00000a  2c00              CMP      r4,#0
00000c  d004              BEQ      |L7.24|
;;;294        {
;;;295            return dev->read(dev, pos, buffer, size);
00000e  47a0              BLX      r4
;;;296        }
;;;297    
;;;298        /* set error code */
;;;299        rt_set_errno(-RT_ENOSYS);
;;;300    
;;;301        return 0;
;;;302    }
000010  bd10              POP      {r4,pc}
                  |L7.18|
000012  2000              MOVS     r0,#0                 ;288
000014  43c0              MVNS     r0,r0                 ;288
000016  e001              B        |L7.28|
                  |L7.24|
000018  2005              MOVS     r0,#5                 ;299
00001a  43c0              MVNS     r0,r0                 ;299
                  |L7.28|
00001c  f7fffffe          BL       rt_set_errno
000020  2000              MOVS     r0,#0                 ;301
000022  bd10              POP      {r4,pc}
;;;303    RTM_EXPORT(rt_device_read);
                          ENDP


                          AREA ||i.rt_device_register||, CODE, READONLY, ALIGN=2

                  rt_device_register PROC
;;;43      */
;;;44     rt_err_t rt_device_register(rt_device_t dev,
000000  b5f8              PUSH     {r3-r7,lr}
;;;45                                 const char *name,
;;;46                                 rt_uint16_t flags)
;;;47     {
;;;48         if (dev == RT_NULL)
;;;49             return -RT_ERROR;
000002  4d0b              LDR      r5,|L8.48|
000004  4616              MOV      r6,r2                 ;47
000006  0004              MOVS     r4,r0                 ;47
000008  460f              MOV      r7,r1                 ;47
00000a  d004              BEQ      |L8.22|
;;;50     
;;;51         if (rt_device_find(name) != RT_NULL)
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       rt_device_find
000012  2800              CMP      r0,#0
000014  d001              BEQ      |L8.26|
                  |L8.22|
;;;52             return -RT_ERROR;
000016  4628              MOV      r0,r5
;;;53     
;;;54         rt_object_init(&(dev->parent), RT_Object_Class_Device, name);
;;;55         dev->flag = flags;
;;;56         dev->ref_count = 0;
;;;57         dev->open_flag = 0;
;;;58     
;;;59         return RT_EOK;
;;;60     }
000018  bdf8              POP      {r3-r7,pc}
                  |L8.26|
00001a  463a              MOV      r2,r7                 ;54
00001c  2107              MOVS     r1,#7                 ;54
00001e  4620              MOV      r0,r4                 ;54
000020  f7fffffe          BL       rt_object_init
000024  82e6              STRH     r6,[r4,#0x16]         ;55
000026  2000              MOVS     r0,#0                 ;56
000028  76a0              STRB     r0,[r4,#0x1a]         ;56
00002a  8320              STRH     r0,[r4,#0x18]         ;57
00002c  bdf8              POP      {r3-r7,pc}
;;;61     RTM_EXPORT(rt_device_register);
                          ENDP

00002e  0000              DCW      0x0000
                  |L8.48|
                          DCD      0xffffffff

                          AREA ||i.rt_device_set_rx_indicate||, CODE, READONLY, ALIGN=1

                  rt_device_set_rx_indicate PROC
;;;375    rt_err_t
;;;376    rt_device_set_rx_indicate(rt_device_t dev,
000000  61c1              STR      r1,[r0,#0x1c]
;;;377                              rt_err_t (*rx_ind)(rt_device_t dev, rt_size_t size))
;;;378    {
;;;379        RT_ASSERT(dev != RT_NULL);
;;;380    
;;;381        dev->rx_indicate = rx_ind;
;;;382    
;;;383        return RT_EOK;
000002  2000              MOVS     r0,#0
;;;384    }
000004  4770              BX       lr
;;;385    RTM_EXPORT(rt_device_set_rx_indicate);
                          ENDP


                          AREA ||i.rt_device_set_tx_complete||, CODE, READONLY, ALIGN=1

                  rt_device_set_tx_complete PROC
;;;396    rt_err_t
;;;397    rt_device_set_tx_complete(rt_device_t dev,
000000  6201              STR      r1,[r0,#0x20]
;;;398                              rt_err_t (*tx_done)(rt_device_t dev, void *buffer))
;;;399    {
;;;400        RT_ASSERT(dev != RT_NULL);
;;;401    
;;;402        dev->tx_complete = tx_done;
;;;403    
;;;404        return RT_EOK;
000002  2000              MOVS     r0,#0
;;;405    }
000004  4770              BX       lr
;;;406    RTM_EXPORT(rt_device_set_tx_complete);
                          ENDP


                          AREA ||i.rt_device_unregister||, CODE, READONLY, ALIGN=1

                  rt_device_unregister PROC
;;;69      */
;;;70     rt_err_t rt_device_unregister(rt_device_t dev)
000000  b510              PUSH     {r4,lr}
;;;71     {
;;;72         RT_ASSERT(dev != RT_NULL);
;;;73     
;;;74         rt_object_detach(&(dev->parent));
000002  f7fffffe          BL       rt_object_detach
;;;75     
;;;76         return RT_EOK;
000006  2000              MOVS     r0,#0
;;;77     }
000008  bd10              POP      {r4,pc}
;;;78     RTM_EXPORT(rt_device_unregister);
                          ENDP


                          AREA ||i.rt_device_write||, CODE, READONLY, ALIGN=1

                  rt_device_write PROC
;;;316     */
;;;317    rt_size_t rt_device_write(rt_device_t dev,
000000  b510              PUSH     {r4,lr}
;;;318                              rt_off_t    pos,
;;;319                              const void *buffer,
;;;320                              rt_size_t   size)
;;;321    {
;;;322        RT_ASSERT(dev != RT_NULL);
;;;323    
;;;324        if (dev->ref_count == 0)
000002  7e84              LDRB     r4,[r0,#0x1a]
000004  2c00              CMP      r4,#0
000006  d004              BEQ      |L12.18|
;;;325        {
;;;326            rt_set_errno(-RT_ERROR);
;;;327            return 0;
;;;328        }
;;;329    
;;;330        /* call device write interface */
;;;331        if (dev->write != RT_NULL)
000008  6b44              LDR      r4,[r0,#0x34]
00000a  2c00              CMP      r4,#0
00000c  d004              BEQ      |L12.24|
;;;332        {
;;;333            return dev->write(dev, pos, buffer, size);
00000e  47a0              BLX      r4
;;;334        }
;;;335    
;;;336        /* set error code */
;;;337        rt_set_errno(-RT_ENOSYS);
;;;338    
;;;339        return 0;
;;;340    }
000010  bd10              POP      {r4,pc}
                  |L12.18|
000012  2000              MOVS     r0,#0                 ;326
000014  43c0              MVNS     r0,r0                 ;326
000016  e001              B        |L12.28|
                  |L12.24|
000018  2005              MOVS     r0,#5                 ;337
00001a  43c0              MVNS     r0,r0                 ;337
                  |L12.28|
00001c  f7fffffe          BL       rt_set_errno
000020  2000              MOVS     r0,#0                 ;339
000022  bd10              POP      {r4,pc}
;;;341    RTM_EXPORT(rt_device_write);
                          ENDP

