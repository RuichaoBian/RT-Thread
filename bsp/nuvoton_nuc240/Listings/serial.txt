; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\serial.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\serial.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 --omf_browse=.\objects\serial.crf ..\..\components\drivers\serial\serial.c]
                          THUMB

                          AREA ||i._serial_dma_rx||, CODE, READONLY, ALIGN=1

                  _serial_dma_rx PROC
;;;257     */
;;;258    rt_inline int _serial_dma_rx(struct rt_serial_device *serial, rt_uint8_t *data, int length)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;259    {
000002  b082              SUB      sp,sp,#8
000004  4616              MOV      r6,r2
000006  4604              MOV      r4,r0
;;;260        rt_base_t level;
;;;261    
;;;262        RT_ASSERT((serial != RT_NULL) && (data != RT_NULL));
;;;263    
;;;264        level = rt_hw_interrupt_disable();
000008  f7fffffe          BL       rt_hw_interrupt_disable
;;;265    
;;;266        if (serial->config.bufsz == 0)
00000c  9000              STR      r0,[sp,#0]
00000e  6ca0              LDR      r0,[r4,#0x48]
000010  0180              LSLS     r0,r0,#6
000012  0c00              LSRS     r0,r0,#16
000014  d012              BEQ      |L1.60|
;;;267        {
;;;268            int result = RT_EOK;
;;;269            struct rt_serial_rx_dma *rx_dma;
;;;270    
;;;271            rx_dma = (struct rt_serial_rx_dma*)serial->serial_rx;
;;;272            RT_ASSERT(rx_dma != RT_NULL);
;;;273    
;;;274            if (rx_dma->activated != RT_TRUE)
;;;275            {
;;;276                rx_dma->activated = RT_TRUE;
;;;277                RT_ASSERT(serial->ops->dma_transmit != RT_NULL);
;;;278                serial->ops->dma_transmit(serial, data, length, RT_SERIAL_DMA_RX);
;;;279            }
;;;280            else result = -RT_EBUSY;
;;;281            rt_hw_interrupt_enable(level);
;;;282    
;;;283            if (result == RT_EOK) return length;
;;;284    
;;;285            rt_set_errno(result);
;;;286            return 0;
;;;287        }
;;;288        else
;;;289        {
;;;290            struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
;;;291            rt_size_t recv_len = 0, fifo_recved_len = rt_dma_calc_recved_len(serial);
000016  4620              MOV      r0,r4
000018  6ce5              LDR      r5,[r4,#0x4c]
00001a  f7fffffe          BL       rt_dma_calc_recved_len
;;;292    
;;;293            RT_ASSERT(rx_fifo != RT_NULL);
;;;294    
;;;295            if (length < fifo_recved_len)
00001e  4286              CMP      r6,r0
000020  d300              BCC      |L1.36|
;;;296                recv_len = length;
;;;297            else
;;;298                recv_len = fifo_recved_len;
000022  4606              MOV      r6,r0
                  |L1.36|
;;;299    
;;;300            if (rx_fifo->get_index + recv_len < serial->config.bufsz)
000024  6ca1              LDR      r1,[r4,#0x48]
000026  88e8              LDRH     r0,[r5,#6]
000028  0189              LSLS     r1,r1,#6
00002a  1982              ADDS     r2,r0,r6
00002c  0c09              LSRS     r1,r1,#16
00002e  428a              CMP      r2,r1
000030  d222              BCS      |L1.120|
;;;301                rt_memcpy(data, rx_fifo->buffer + rx_fifo->get_index, recv_len);
000032  6829              LDR      r1,[r5,#0]
000034  4632              MOV      r2,r6
000036  1809              ADDS     r1,r1,r0
000038  9803              LDR      r0,[sp,#0xc]
00003a  e02d              B        |L1.152|
                  |L1.60|
00003c  6ce0              LDR      r0,[r4,#0x4c]         ;274
00003e  2500              MOVS     r5,#0                 ;268
000040  6801              LDR      r1,[r0,#0]            ;274
000042  2901              CMP      r1,#1                 ;274
000044  d009              BEQ      |L1.90|
000046  2101              MOVS     r1,#1                 ;276
000048  6001              STR      r1,[r0,#0]            ;278
00004a  6c20              LDR      r0,[r4,#0x40]         ;278
00004c  460b              MOV      r3,r1                 ;278
00004e  6907              LDR      r7,[r0,#0x10]         ;278
000050  4632              MOV      r2,r6                 ;278
000052  4620              MOV      r0,r4                 ;278
000054  9903              LDR      r1,[sp,#0xc]          ;278
000056  47b8              BLX      r7                    ;278
000058  e001              B        |L1.94|
                  |L1.90|
00005a  2506              MOVS     r5,#6                 ;280
00005c  43ed              MVNS     r5,r5                 ;280
                  |L1.94|
00005e  9800              LDR      r0,[sp,#0]            ;281
000060  f7fffffe          BL       rt_hw_interrupt_enable
000064  2d00              CMP      r5,#0                 ;283
000066  d005              BEQ      |L1.116|
000068  4628              MOV      r0,r5                 ;285
00006a  f7fffffe          BL       rt_set_errno
00006e  2000              MOVS     r0,#0                 ;286
                  |L1.112|
;;;302            else
;;;303            {
;;;304                rt_memcpy(data, rx_fifo->buffer + rx_fifo->get_index,
;;;305                        serial->config.bufsz - rx_fifo->get_index);
;;;306                rt_memcpy(data + serial->config.bufsz - rx_fifo->get_index, rx_fifo->buffer,
;;;307                        recv_len + rx_fifo->get_index - serial->config.bufsz);
;;;308            }
;;;309            rt_dma_recv_update_get_index(serial, recv_len);
;;;310            rt_hw_interrupt_enable(level);
;;;311            return recv_len;
;;;312        }
;;;313    }
000070  b005              ADD      sp,sp,#0x14
000072  bdf0              POP      {r4-r7,pc}
                  |L1.116|
000074  4630              MOV      r0,r6                 ;283
000076  e7fb              B        |L1.112|
                  |L1.120|
000078  1a0a              SUBS     r2,r1,r0              ;304
00007a  6829              LDR      r1,[r5,#0]            ;304
00007c  1809              ADDS     r1,r1,r0              ;304
00007e  9803              LDR      r0,[sp,#0xc]          ;304
000080  f7fffffe          BL       rt_memcpy
000084  6ca1              LDR      r1,[r4,#0x48]         ;306
000086  88e8              LDRH     r0,[r5,#6]            ;306
000088  0189              LSLS     r1,r1,#6              ;306
00008a  1982              ADDS     r2,r0,r6              ;306
00008c  0c09              LSRS     r1,r1,#16             ;306
00008e  9b03              LDR      r3,[sp,#0xc]          ;306
000090  1a52              SUBS     r2,r2,r1              ;306
000092  18c9              ADDS     r1,r1,r3              ;306
000094  1a08              SUBS     r0,r1,r0              ;306
000096  6829              LDR      r1,[r5,#0]            ;306
                  |L1.152|
000098  f7fffffe          BL       rt_memcpy
00009c  6ce5              LDR      r5,[r4,#0x4c]         ;306
00009e  68a8              LDR      r0,[r5,#8]            ;306
0000a0  2800              CMP      r0,#0                 ;306
0000a2  d003              BEQ      |L1.172|
0000a4  2e00              CMP      r6,#0                 ;306
0000a6  d001              BEQ      |L1.172|
0000a8  2000              MOVS     r0,#0                 ;306
0000aa  60a8              STR      r0,[r5,#8]            ;306
                  |L1.172|
0000ac  88e9              LDRH     r1,[r5,#6]            ;306
0000ae  1988              ADDS     r0,r1,r6              ;306
0000b0  b280              UXTH     r0,r0                 ;306
0000b2  80e8              STRH     r0,[r5,#6]            ;306
0000b4  6ca1              LDR      r1,[r4,#0x48]         ;306
0000b6  0189              LSLS     r1,r1,#6              ;306
0000b8  0c09              LSRS     r1,r1,#16             ;306
0000ba  4288              CMP      r0,r1                 ;306
0000bc  d902              BLS      |L1.196|
0000be  f7fffffe          BL       __aeabi_uidivmod
0000c2  80e9              STRH     r1,[r5,#6]            ;306
                  |L1.196|
0000c4  9800              LDR      r0,[sp,#0]            ;310
0000c6  f7fffffe          BL       rt_hw_interrupt_enable
0000ca  e7d3              B        |L1.116|
;;;314    
                          ENDP


                          AREA ||i.rt_dma_calc_recved_len||, CODE, READONLY, ALIGN=1

                  rt_dma_calc_recved_len PROC
;;;168     */
;;;169    static rt_size_t rt_dma_calc_recved_len(struct rt_serial_device *serial)
000000  6cc3              LDR      r3,[r0,#0x4c]
;;;170    {
;;;171        struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
;;;172    
;;;173        RT_ASSERT(rx_fifo != RT_NULL);
;;;174    
;;;175        if (rx_fifo->put_index > rx_fifo->get_index)
000002  889a              LDRH     r2,[r3,#4]
000004  88d9              LDRH     r1,[r3,#6]
000006  428a              CMP      r2,r1
000008  d901              BLS      |L2.14|
;;;176            return rx_fifo->put_index - rx_fifo->get_index;
00000a  1a50              SUBS     r0,r2,r1
;;;177        else if (rx_fifo->put_index < rx_fifo->get_index)
;;;178            return serial->config.bufsz - (rx_fifo->get_index - rx_fifo->put_index);
;;;179        else
;;;180        {
;;;181            if (rx_fifo->is_full)
;;;182                return serial->config.bufsz;
;;;183            else
;;;184                return 0;
;;;185        }
;;;186    }
00000c  4770              BX       lr
                  |L2.14|
00000e  428a              CMP      r2,r1                 ;177
000010  d205              BCS      |L2.30|
000012  6c80              LDR      r0,[r0,#0x48]         ;178
000014  1a89              SUBS     r1,r1,r2              ;178
000016  0180              LSLS     r0,r0,#6              ;178
000018  0c00              LSRS     r0,r0,#16             ;178
00001a  1a40              SUBS     r0,r0,r1              ;178
00001c  4770              BX       lr
                  |L2.30|
00001e  6899              LDR      r1,[r3,#8]            ;181
000020  2900              CMP      r1,#0                 ;181
000022  d003              BEQ      |L2.44|
000024  6c80              LDR      r0,[r0,#0x48]         ;182
000026  0180              LSLS     r0,r0,#6              ;182
000028  0c00              LSRS     r0,r0,#16             ;182
00002a  4770              BX       lr
                  |L2.44|
00002c  2000              MOVS     r0,#0                 ;184
00002e  4770              BX       lr
;;;187    
                          ENDP


                          AREA ||i.rt_dma_recv_update_put_index||, CODE, READONLY, ALIGN=1

                  rt_dma_recv_update_put_index PROC
;;;215     */
;;;216    static void rt_dma_recv_update_put_index(struct rt_serial_device *serial, rt_size_t len)
000000  b570              PUSH     {r4-r6,lr}
;;;217    {
;;;218        struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *)serial->serial_rx;
;;;219    
;;;220        RT_ASSERT(rx_fifo != RT_NULL);
;;;221    
;;;222        if (rx_fifo->get_index <= rx_fifo->put_index)
000002  6cc4              LDR      r4,[r0,#0x4c]
000004  4605              MOV      r5,r0                 ;217
000006  88a2              LDRH     r2,[r4,#4]
000008  88e3              LDRH     r3,[r4,#6]
;;;223        {
;;;224            rx_fifo->put_index += len;
00000a  1850              ADDS     r0,r2,r1
;;;225            /* beyond the fifo end */
;;;226            if (rx_fifo->put_index >= serial->config.bufsz)
;;;227            {
;;;228                rx_fifo->put_index %= serial->config.bufsz;
;;;229                /* force overwrite get index */
;;;230                if (rx_fifo->put_index >= rx_fifo->get_index)
;;;231                {
;;;232                    rx_fifo->get_index = rx_fifo->put_index;
;;;233                    rx_fifo->is_full = RT_TRUE;
00000c  2601              MOVS     r6,#1
00000e  b280              UXTH     r0,r0                 ;224
000010  4293              CMP      r3,r2                 ;222
;;;234                }
;;;235            }
;;;236        }
;;;237        else
;;;238        {
;;;239            rx_fifo->put_index += len;
000012  80a0              STRH     r0,[r4,#4]
000014  d80c              BHI      |L3.48|
000016  6ca9              LDR      r1,[r5,#0x48]         ;226
000018  0189              LSLS     r1,r1,#6              ;226
00001a  0c09              LSRS     r1,r1,#16             ;226
00001c  4288              CMP      r0,r1                 ;226
00001e  d315              BCC      |L3.76|
000020  f7fffffe          BL       __aeabi_uidivmod
000024  80a1              STRH     r1,[r4,#4]            ;228
000026  88e0              LDRH     r0,[r4,#6]            ;230
000028  4281              CMP      r1,r0                 ;230
00002a  d30f              BCC      |L3.76|
00002c  80e1              STRH     r1,[r4,#6]            ;232
00002e  e00c              B        |L3.74|
                  |L3.48|
;;;240            if (rx_fifo->put_index >= rx_fifo->get_index)
000030  88e1              LDRH     r1,[r4,#6]
000032  4288              CMP      r0,r1
000034  d30a              BCC      |L3.76|
;;;241            {
;;;242                /* beyond the fifo end */
;;;243                if (rx_fifo->put_index >= serial->config.bufsz)
000036  6ca9              LDR      r1,[r5,#0x48]
000038  0189              LSLS     r1,r1,#6
00003a  0c09              LSRS     r1,r1,#16
00003c  4288              CMP      r0,r1
00003e  d302              BCC      |L3.70|
;;;244                {
;;;245                    rx_fifo->put_index %= serial->config.bufsz;
000040  f7fffffe          BL       __aeabi_uidivmod
000044  80a1              STRH     r1,[r4,#4]
                  |L3.70|
;;;246                }
;;;247                /* force overwrite get index */
;;;248                rx_fifo->get_index = rx_fifo->put_index;
000046  88a0              LDRH     r0,[r4,#4]
000048  80e0              STRH     r0,[r4,#6]
                  |L3.74|
;;;249                rx_fifo->is_full = RT_TRUE;
00004a  60a6              STR      r6,[r4,#8]
                  |L3.76|
;;;250            }
;;;251        }
;;;252        if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
00004c  6ca9              LDR      r1,[r5,#0x48]
00004e  88e0              LDRH     r0,[r4,#6]
000050  0189              LSLS     r1,r1,#6
000052  0c09              LSRS     r1,r1,#16
000054  4288              CMP      r0,r1
000056  d301              BCC      |L3.92|
000058  2000              MOVS     r0,#0
00005a  80e0              STRH     r0,[r4,#6]
                  |L3.92|
;;;253    }
00005c  bd70              POP      {r4-r6,pc}
;;;254    
                          ENDP


                          AREA ||i.rt_hw_serial_isr||, CODE, READONLY, ALIGN=1

                  rt_hw_serial_isr PROC
;;;686    /* ISR for serial interrupt */
;;;687    void rt_hw_serial_isr(struct rt_serial_device *serial, int event)
000000  b5fe              PUSH     {r1-r7,lr}
;;;688    {
000002  4605              MOV      r5,r0
;;;689        switch (event & 0xff)
000004  b2c8              UXTB     r0,r1
000006  2700              MOVS     r7,#0
000008  2801              CMP      r0,#1
00000a  d01b              BEQ      |L4.68|
00000c  2802              CMP      r0,#2
00000e  d058              BEQ      |L4.194|
000010  2803              CMP      r0,#3
000012  d064              BEQ      |L4.222|
000014  2804              CMP      r0,#4
000016  d114              BNE      |L4.66|
;;;690        {
;;;691            case RT_SERIAL_EVENT_RX_IND:
;;;692            {
;;;693                int ch = -1;
;;;694                rt_base_t level;
;;;695                struct rt_serial_rx_fifo* rx_fifo;
;;;696    
;;;697                /* interrupt mode receive */
;;;698                rx_fifo = (struct rt_serial_rx_fifo*)serial->serial_rx;
;;;699                RT_ASSERT(rx_fifo != RT_NULL);
;;;700    
;;;701                while (1)
;;;702                {
;;;703                    ch = serial->ops->getc(serial);
;;;704                    if (ch == -1) break;
;;;705    								//serial->ops->putc(serial,ch);	
;;;706    
;;;707                    /* disable interrupt */
;;;708                    level = rt_hw_interrupt_disable();
;;;709    
;;;710                    rx_fifo->buffer[rx_fifo->put_index] = ch;
;;;711                    rx_fifo->put_index += 1;
;;;712                    if (rx_fifo->put_index >= serial->config.bufsz) rx_fifo->put_index = 0;
;;;713    
;;;714                    /* if the next position is read index, discard this 'read char' */
;;;715                    if (rx_fifo->put_index == rx_fifo->get_index)
;;;716                    {
;;;717                        rx_fifo->get_index += 1;
;;;718                        if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
;;;719                    }
;;;720    
;;;721                    /* enable interrupt */
;;;722                    rt_hw_interrupt_enable(level);
;;;723                }
;;;724    
;;;725                /* invoke callback */
;;;726                if (serial->parent.rx_indicate != RT_NULL)
;;;727                {
;;;728                    rt_size_t rx_length;
;;;729    
;;;730                    /* get rx length */
;;;731                    level = rt_hw_interrupt_disable();
;;;732                    rx_length = (rx_fifo->put_index >= rx_fifo->get_index)? (rx_fifo->put_index - rx_fifo->get_index):
;;;733                        (serial->config.bufsz - (rx_fifo->get_index - rx_fifo->put_index));
;;;734                    rt_hw_interrupt_enable(level);
;;;735    
;;;736                    serial->parent.rx_indicate(&serial->parent, rx_length);
;;;737                }
;;;738                break;
;;;739            }
;;;740            case RT_SERIAL_EVENT_TX_DONE:
;;;741            {
;;;742                struct rt_serial_tx_fifo* tx_fifo;
;;;743    
;;;744                tx_fifo = (struct rt_serial_tx_fifo*)serial->serial_tx;
;;;745                rt_completion_done(&(tx_fifo->completion));
;;;746                break;
;;;747            }
;;;748            case RT_SERIAL_EVENT_TX_DMADONE:
;;;749            {
;;;750                const void *data_ptr;
;;;751                rt_size_t data_size;
;;;752                const void *last_data_ptr;
;;;753                struct rt_serial_tx_dma* tx_dma;
;;;754    
;;;755                tx_dma = (struct rt_serial_tx_dma*) serial->serial_tx;
;;;756    
;;;757                rt_data_queue_pop(&(tx_dma->data_queue), &last_data_ptr, &data_size, 0);
000018  6d2c              LDR      r4,[r5,#0x50]
00001a  2300              MOVS     r3,#0
00001c  466a              MOV      r2,sp
00001e  a902              ADD      r1,sp,#8
000020  1d20              ADDS     r0,r4,#4
000022  f7fffffe          BL       rt_data_queue_pop
;;;758                if (rt_data_queue_peak(&(tx_dma->data_queue), &data_ptr, &data_size) == RT_EOK)
000026  466a              MOV      r2,sp
000028  a901              ADD      r1,sp,#4
00002a  1d20              ADDS     r0,r4,#4
00002c  f7fffffe          BL       rt_data_queue_peak
000030  2800              CMP      r0,#0
000032  d04a              BEQ      |L4.202|
;;;759                {
;;;760                    /* transmit next data node */
;;;761                    tx_dma->activated = RT_TRUE;
;;;762                    serial->ops->dma_transmit(serial, (rt_uint8_t *)data_ptr, data_size, RT_SERIAL_DMA_TX);
;;;763                }
;;;764                else
;;;765                {
;;;766                    tx_dma->activated = RT_FALSE;
000034  6027              STR      r7,[r4,#0]
                  |L4.54|
;;;767                }
;;;768    
;;;769                /* invoke callback */
;;;770                if (serial->parent.tx_complete != RT_NULL)
000036  6a2a              LDR      r2,[r5,#0x20]
000038  2a00              CMP      r2,#0
00003a  d002              BEQ      |L4.66|
;;;771                {
;;;772                    serial->parent.tx_complete(&serial->parent, (void*)last_data_ptr);
00003c  4628              MOV      r0,r5
00003e  9902              LDR      r1,[sp,#8]
000040  4790              BLX      r2
                  |L4.66|
;;;773                }
;;;774                break;
;;;775            }
;;;776            case RT_SERIAL_EVENT_RX_DMADONE:
;;;777            {
;;;778                int length;
;;;779                rt_base_t level;
;;;780    
;;;781                /* get DMA rx length */
;;;782                length = (event & (~0xff)) >> 8;
;;;783    
;;;784                if (serial->config.bufsz == 0)
;;;785                {
;;;786                    struct rt_serial_rx_dma* rx_dma;
;;;787    
;;;788                    rx_dma = (struct rt_serial_rx_dma*) serial->serial_rx;
;;;789                    RT_ASSERT(rx_dma != RT_NULL);
;;;790    
;;;791                    RT_ASSERT(serial->parent.rx_indicate != RT_NULL);
;;;792                    serial->parent.rx_indicate(&(serial->parent), length);
;;;793                    rx_dma->activated = RT_FALSE;
;;;794                }
;;;795                else
;;;796                {
;;;797                    /* disable interrupt */
;;;798                    level = rt_hw_interrupt_disable();
;;;799                    /* update fifo put index */
;;;800                    rt_dma_recv_update_put_index(serial, length);
;;;801                    /* calculate received total length */
;;;802                    length = rt_dma_calc_recved_len(serial);
;;;803                    /* enable interrupt */
;;;804                    rt_hw_interrupt_enable(level);
;;;805                    /* invoke callback */
;;;806                    if (serial->parent.rx_indicate != RT_NULL)
;;;807                    {
;;;808                        serial->parent.rx_indicate(&(serial->parent), length);
;;;809                    }
;;;810                }
;;;811                break;
;;;812            }
;;;813        }
;;;814    }
000042  bdfe              POP      {r1-r7,pc}
                  |L4.68|
000044  6cec              LDR      r4,[r5,#0x4c]         ;698
                  |L4.70|
000046  6c28              LDR      r0,[r5,#0x40]         ;703
000048  68c1              LDR      r1,[r0,#0xc]          ;703
00004a  4628              MOV      r0,r5                 ;703
00004c  4788              BLX      r1                    ;703
00004e  4606              MOV      r6,r0                 ;703
000050  1c40              ADDS     r0,r0,#1              ;704
000052  d020              BEQ      |L4.150|
000054  f7fffffe          BL       rt_hw_interrupt_disable
000058  4601              MOV      r1,r0                 ;708
00005a  88a2              LDRH     r2,[r4,#4]            ;710
00005c  6820              LDR      r0,[r4,#0]            ;710
00005e  5486              STRB     r6,[r0,r2]            ;710
000060  88a0              LDRH     r0,[r4,#4]            ;711
000062  1c40              ADDS     r0,r0,#1              ;711
000064  b280              UXTH     r0,r0                 ;711
000066  80a0              STRH     r0,[r4,#4]            ;711
000068  6caa              LDR      r2,[r5,#0x48]         ;712
00006a  0192              LSLS     r2,r2,#6              ;712
00006c  0c12              LSRS     r2,r2,#16             ;712
00006e  4290              CMP      r0,r2                 ;712
000070  d300              BCC      |L4.116|
000072  80a7              STRH     r7,[r4,#4]            ;712
                  |L4.116|
000074  88a2              LDRH     r2,[r4,#4]            ;715
000076  88e0              LDRH     r0,[r4,#6]            ;715
000078  4282              CMP      r2,r0                 ;715
00007a  d108              BNE      |L4.142|
00007c  1c40              ADDS     r0,r0,#1              ;715
00007e  b280              UXTH     r0,r0                 ;717
000080  80e0              STRH     r0,[r4,#6]            ;717
000082  6caa              LDR      r2,[r5,#0x48]         ;718
000084  0192              LSLS     r2,r2,#6              ;718
000086  0c12              LSRS     r2,r2,#16             ;718
000088  4290              CMP      r0,r2                 ;718
00008a  d300              BCC      |L4.142|
00008c  80e7              STRH     r7,[r4,#6]            ;718
                  |L4.142|
00008e  4608              MOV      r0,r1                 ;722
000090  f7fffffe          BL       rt_hw_interrupt_enable
000094  e7d7              B        |L4.70|
                  |L4.150|
000096  69e8              LDR      r0,[r5,#0x1c]         ;726
000098  2800              CMP      r0,#0                 ;726
00009a  d0d2              BEQ      |L4.66|
00009c  f7fffffe          BL       rt_hw_interrupt_disable
0000a0  4602              MOV      r2,r0                 ;731
0000a2  88a0              LDRH     r0,[r4,#4]            ;732
0000a4  88e1              LDRH     r1,[r4,#6]            ;732
0000a6  4288              CMP      r0,r1                 ;732
0000a8  d301              BCC      |L4.174|
0000aa  1a44              SUBS     r4,r0,r1              ;732
0000ac  e004              B        |L4.184|
                  |L4.174|
0000ae  1a08              SUBS     r0,r1,r0              ;733
0000b0  6ca9              LDR      r1,[r5,#0x48]         ;733
0000b2  0189              LSLS     r1,r1,#6              ;733
0000b4  0c09              LSRS     r1,r1,#16             ;733
0000b6  1a0c              SUBS     r4,r1,r0              ;733
                  |L4.184|
0000b8  4610              MOV      r0,r2                 ;734
0000ba  f7fffffe          BL       rt_hw_interrupt_enable
0000be  69ea              LDR      r2,[r5,#0x1c]         ;737
0000c0  e023              B        |L4.266|
                  |L4.194|
0000c2  6d28              LDR      r0,[r5,#0x50]         ;745
0000c4  f7fffffe          BL       rt_completion_done
                  |L4.200|
0000c8  bdfe              POP      {r1-r7,pc}
                  |L4.202|
0000ca  2001              MOVS     r0,#1                 ;761
0000cc  6020              STR      r0,[r4,#0]            ;762
0000ce  6c28              LDR      r0,[r5,#0x40]         ;762
0000d0  2302              MOVS     r3,#2                 ;762
0000d2  6904              LDR      r4,[r0,#0x10]         ;762
0000d4  4628              MOV      r0,r5                 ;762
0000d6  9a00              LDR      r2,[sp,#0]            ;762
0000d8  9901              LDR      r1,[sp,#4]            ;762
0000da  47a0              BLX      r4                    ;762
0000dc  e7ab              B        |L4.54|
                  |L4.222|
0000de  6ca8              LDR      r0,[r5,#0x48]         ;784
0000e0  120c              ASRS     r4,r1,#8              ;782
0000e2  0180              LSLS     r0,r0,#6              ;784
0000e4  0c00              LSRS     r0,r0,#16             ;784
0000e6  d014              BEQ      |L4.274|
0000e8  f7fffffe          BL       rt_hw_interrupt_disable
0000ec  4606              MOV      r6,r0                 ;798
0000ee  4621              MOV      r1,r4                 ;800
0000f0  4628              MOV      r0,r5                 ;800
0000f2  f7fffffe          BL       rt_dma_recv_update_put_index
0000f6  4628              MOV      r0,r5                 ;802
0000f8  f7fffffe          BL       rt_dma_calc_recved_len
0000fc  4604              MOV      r4,r0                 ;802
0000fe  4630              MOV      r0,r6                 ;804
000100  f7fffffe          BL       rt_hw_interrupt_enable
000104  69ea              LDR      r2,[r5,#0x1c]         ;806
000106  2a00              CMP      r2,#0                 ;806
000108  d0de              BEQ      |L4.200|
                  |L4.266|
00010a  4621              MOV      r1,r4                 ;808
00010c  4628              MOV      r0,r5                 ;808
00010e  4790              BLX      r2                    ;808
000110  bdfe              POP      {r1-r7,pc}
                  |L4.274|
000112  69ea              LDR      r2,[r5,#0x1c]         ;792
000114  4621              MOV      r1,r4                 ;792
000116  4628              MOV      r0,r5                 ;792
000118  6cee              LDR      r6,[r5,#0x4c]         ;792
00011a  4790              BLX      r2                    ;792
00011c  6037              STR      r7,[r6,#0]            ;793
00011e  bdfe              POP      {r1-r7,pc}
                          ENDP


                          AREA ||i.rt_hw_serial_register||, CODE, READONLY, ALIGN=2

                  rt_hw_serial_register PROC
;;;659     */
;;;660    rt_err_t rt_hw_serial_register(struct rt_serial_device *serial,
000000  b510              PUSH     {r4,lr}
;;;661                                   const char              *name,
;;;662                                   rt_uint32_t              flag,
;;;663                                   void                    *data)
;;;664    {
;;;665        struct rt_device *device;
;;;666        RT_ASSERT(serial != RT_NULL);
;;;667    
;;;668        device = &(serial->parent);
;;;669    
;;;670        device->type        = RT_Device_Class_Char;
000002  2400              MOVS     r4,#0
000004  7504              STRB     r4,[r0,#0x14]
;;;671        device->rx_indicate = RT_NULL;
;;;672        device->tx_complete = RT_NULL;
000006  61c4              STR      r4,[r0,#0x1c]
;;;673    
;;;674        device->init        = rt_serial_init;
000008  6204              STR      r4,[r0,#0x20]
00000a  4c08              LDR      r4,|L5.44|
;;;675        device->open        = rt_serial_open;
00000c  6244              STR      r4,[r0,#0x24]
00000e  4c08              LDR      r4,|L5.48|
;;;676        device->close       = rt_serial_close;
000010  6284              STR      r4,[r0,#0x28]
000012  4c08              LDR      r4,|L5.52|
;;;677        device->read        = rt_serial_read;
000014  62c4              STR      r4,[r0,#0x2c]
000016  4c08              LDR      r4,|L5.56|
;;;678        device->write       = rt_serial_write;
000018  6304              STR      r4,[r0,#0x30]
00001a  4c08              LDR      r4,|L5.60|
;;;679        device->control     = rt_serial_control;
00001c  6344              STR      r4,[r0,#0x34]
00001e  4c08              LDR      r4,|L5.64|
;;;680        device->user_data   = data;
;;;681    
;;;682        /* register a character device */
;;;683        return rt_device_register(device, name, flag);
000020  6384              STR      r4,[r0,#0x38]
000022  b292              UXTH     r2,r2
000024  63c3              STR      r3,[r0,#0x3c]
000026  f7fffffe          BL       rt_device_register
;;;684    }
00002a  bd10              POP      {r4,pc}
;;;685    
                          ENDP

                  |L5.44|
                          DCD      rt_serial_init
                  |L5.48|
                          DCD      rt_serial_open
                  |L5.52|
                          DCD      rt_serial_close
                  |L5.56|
                          DCD      rt_serial_read
                  |L5.60|
                          DCD      rt_serial_write
                  |L5.64|
                          DCD      rt_serial_control

                          AREA ||i.rt_serial_close||, CODE, READONLY, ALIGN=1

                  rt_serial_close PROC
;;;482    
;;;483    static rt_err_t rt_serial_close(struct rt_device *dev)
000000  b570              PUSH     {r4-r6,lr}
;;;484    {
000002  4604              MOV      r4,r0
;;;485        struct rt_serial_device *serial;
;;;486    
;;;487        RT_ASSERT(dev != RT_NULL);
;;;488        serial = (struct rt_serial_device *)dev;
;;;489    
;;;490        /* this device has more reference count */
;;;491        if (dev->ref_count > 1) return RT_EOK;
000004  7e80              LDRB     r0,[r0,#0x1a]
000006  2801              CMP      r0,#1
000008  d841              BHI      |L6.142|
;;;492    
;;;493        if (dev->open_flag & RT_DEVICE_FLAG_INT_RX)
00000a  8b20              LDRH     r0,[r4,#0x18]
00000c  2500              MOVS     r5,#0
00000e  05c1              LSLS     r1,r0,#23
000010  2900              CMP      r1,#0
000012  da0e              BGE      |L6.50|
;;;494        {
;;;495            struct rt_serial_rx_fifo* rx_fifo;
;;;496    
;;;497            rx_fifo = (struct rt_serial_rx_fifo*)serial->serial_rx;
;;;498            RT_ASSERT(rx_fifo != RT_NULL);
;;;499    
;;;500            rt_free(rx_fifo);
000014  6ce0              LDR      r0,[r4,#0x4c]
000016  f7fffffe          BL       rt_free
;;;501            serial->serial_rx = RT_NULL;
;;;502            dev->open_flag &= ~RT_DEVICE_FLAG_INT_RX;
00001a  64e5              STR      r5,[r4,#0x4c]
00001c  8b20              LDRH     r0,[r4,#0x18]
00001e  22ff              MOVS     r2,#0xff
000020  3201              ADDS     r2,#1
000022  4390              BICS     r0,r0,r2
000024  8320              STRH     r0,[r4,#0x18]
;;;503            /* configure low level device */
;;;504            serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void*)RT_DEVICE_FLAG_INT_RX);
000026  6c20              LDR      r0,[r4,#0x40]
000028  2111              MOVS     r1,#0x11
00002a  6843              LDR      r3,[r0,#4]
00002c  4620              MOV      r0,r4
00002e  4798              BLX      r3
;;;505        }
000030  e010              B        |L6.84|
                  |L6.50|
;;;506        else if (dev->open_flag & RT_DEVICE_FLAG_DMA_RX)
000032  0580              LSLS     r0,r0,#22
000034  d50e              BPL      |L6.84|
;;;507        {
;;;508            if (serial->config.bufsz == 0) {
;;;509                struct rt_serial_rx_dma* rx_dma;
;;;510    
;;;511                rx_dma = (struct rt_serial_rx_dma*)serial->serial_rx;
;;;512                RT_ASSERT(rx_dma != RT_NULL);
;;;513    
;;;514                rt_free(rx_dma);
;;;515            } else {
;;;516                struct rt_serial_rx_fifo* rx_fifo;
;;;517    
;;;518                rx_fifo = (struct rt_serial_rx_fifo*)serial->serial_rx;
;;;519                RT_ASSERT(rx_fifo != RT_NULL);
;;;520    
;;;521                rt_free(rx_fifo);
000036  6ce0              LDR      r0,[r4,#0x4c]
000038  f7fffffe          BL       rt_free
;;;522            }
;;;523            /* configure low level device */
;;;524            serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void *) RT_DEVICE_FLAG_DMA_RX);
00003c  6c20              LDR      r0,[r4,#0x40]
00003e  2601              MOVS     r6,#1
000040  0276              LSLS     r6,r6,#9
000042  6843              LDR      r3,[r0,#4]
000044  4632              MOV      r2,r6
000046  2111              MOVS     r1,#0x11
000048  4620              MOV      r0,r4
00004a  4798              BLX      r3
;;;525            serial->serial_rx = RT_NULL;
;;;526            dev->open_flag &= ~RT_DEVICE_FLAG_DMA_RX;
00004c  64e5              STR      r5,[r4,#0x4c]
00004e  8b20              LDRH     r0,[r4,#0x18]
000050  43b0              BICS     r0,r0,r6
000052  8320              STRH     r0,[r4,#0x18]
                  |L6.84|
;;;527        }
;;;528    
;;;529        if (dev->open_flag & RT_DEVICE_FLAG_INT_TX)
000054  8b20              LDRH     r0,[r4,#0x18]
000056  0541              LSLS     r1,r0,#21
000058  d50e              BPL      |L6.120|
;;;530        {
;;;531            struct rt_serial_tx_fifo* tx_fifo;
;;;532    
;;;533            tx_fifo = (struct rt_serial_tx_fifo*)serial->serial_tx;
;;;534            RT_ASSERT(tx_fifo != RT_NULL);
;;;535    
;;;536            rt_free(tx_fifo);
00005a  6d20              LDR      r0,[r4,#0x50]
00005c  f7fffffe          BL       rt_free
;;;537            serial->serial_tx = RT_NULL;
;;;538            dev->open_flag &= ~RT_DEVICE_FLAG_INT_TX;
000060  6525              STR      r5,[r4,#0x50]
000062  8b20              LDRH     r0,[r4,#0x18]
000064  2201              MOVS     r2,#1
000066  0292              LSLS     r2,r2,#10
000068  4390              BICS     r0,r0,r2
00006a  8320              STRH     r0,[r4,#0x18]
;;;539            /* configure low level device */
;;;540            serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void*)RT_DEVICE_FLAG_INT_TX);
00006c  6c20              LDR      r0,[r4,#0x40]
00006e  2111              MOVS     r1,#0x11
000070  6843              LDR      r3,[r0,#4]
000072  4620              MOV      r0,r4
000074  4798              BLX      r3
;;;541        }
000076  e00a              B        |L6.142|
                  |L6.120|
;;;542        else if (dev->open_flag & RT_DEVICE_FLAG_DMA_TX)
000078  0500              LSLS     r0,r0,#20
00007a  d508              BPL      |L6.142|
;;;543        {
;;;544            struct rt_serial_tx_dma* tx_dma;
;;;545    
;;;546            tx_dma = (struct rt_serial_tx_dma*)serial->serial_tx;
;;;547            RT_ASSERT(tx_dma != RT_NULL);
;;;548    
;;;549            rt_free(tx_dma);
00007c  6d20              LDR      r0,[r4,#0x50]
00007e  f7fffffe          BL       rt_free
;;;550            serial->serial_tx = RT_NULL;
;;;551            dev->open_flag &= ~RT_DEVICE_FLAG_DMA_TX;
000082  6525              STR      r5,[r4,#0x50]
000084  8b20              LDRH     r0,[r4,#0x18]
000086  2101              MOVS     r1,#1
000088  02c9              LSLS     r1,r1,#11
00008a  4388              BICS     r0,r0,r1
00008c  8320              STRH     r0,[r4,#0x18]
                  |L6.142|
;;;552        }
;;;553    
;;;554        return RT_EOK;
00008e  2000              MOVS     r0,#0
;;;555    }
000090  bd70              POP      {r4-r6,pc}
;;;556    
                          ENDP


                          AREA ||i.rt_serial_control||, CODE, READONLY, ALIGN=1

                  rt_serial_control PROC
;;;606    
;;;607    static rt_err_t rt_serial_control(struct rt_device *dev,
000000  b510              PUSH     {r4,lr}
;;;608                                      rt_uint8_t        cmd,
;;;609                                      void             *args)
;;;610    {
;;;611        struct rt_serial_device *serial;
;;;612    
;;;613        RT_ASSERT(dev != RT_NULL);
;;;614        serial = (struct rt_serial_device *)dev;
;;;615    
;;;616        switch (cmd)
;;;617        {
;;;618            case RT_DEVICE_CTRL_SUSPEND:
;;;619                /* suspend device */
;;;620                dev->flag |= RT_DEVICE_FLAG_SUSPENDED;
000002  2320              MOVS     r3,#0x20
000004  2901              CMP      r1,#1                 ;616
000006  d00b              BEQ      |L7.32|
000008  2902              CMP      r1,#2                 ;616
00000a  d006              BEQ      |L7.26|
00000c  2903              CMP      r1,#3                 ;616
00000e  d00b              BEQ      |L7.40|
;;;621                break;
;;;622    
;;;623            case RT_DEVICE_CTRL_RESUME:
;;;624                /* resume device */
;;;625                dev->flag &= ~RT_DEVICE_FLAG_SUSPENDED;
;;;626                break;
;;;627    
;;;628            case RT_DEVICE_CTRL_CONFIG:
;;;629                if (args)
;;;630                {
;;;631                    struct serial_configure *pconfig = (struct serial_configure *) args;
;;;632                    if (pconfig->bufsz != serial->config.bufsz && serial->parent.ref_count)
;;;633                    {
;;;634                        /*can not change buffer size*/
;;;635                        return RT_EBUSY;
;;;636                    }
;;;637                    /* set serial configure */
;;;638                    serial->config = *pconfig;
;;;639                    if (serial->parent.ref_count)
;;;640                    {
;;;641                        /* serial device has been opened, to configure it */
;;;642                        serial->ops->configure(serial, (struct serial_configure *) args);
;;;643                    }
;;;644                }
;;;645    			
;;;646                break;
;;;647    
;;;648            default :
;;;649                /* control device */
;;;650                serial->ops->control(serial, cmd, args);
000010  6c03              LDR      r3,[r0,#0x40]
000012  685b              LDR      r3,[r3,#4]
000014  4798              BLX      r3
                  |L7.22|
;;;651                break;
;;;652        }
;;;653    
;;;654        return RT_EOK;
000016  2000              MOVS     r0,#0
;;;655    }
000018  bd10              POP      {r4,pc}
                  |L7.26|
00001a  8ac1              LDRH     r1,[r0,#0x16]         ;620
00001c  4319              ORRS     r1,r1,r3              ;620
00001e  e001              B        |L7.36|
                  |L7.32|
000020  8ac1              LDRH     r1,[r0,#0x16]         ;625
000022  4399              BICS     r1,r1,r3              ;625
                  |L7.36|
000024  82c1              STRH     r1,[r0,#0x16]         ;620
000026  e7f6              B        |L7.22|
                  |L7.40|
000028  2a00              CMP      r2,#0                 ;629
00002a  d0f4              BEQ      |L7.22|
00002c  6851              LDR      r1,[r2,#4]            ;632
00002e  6c84              LDR      r4,[r0,#0x48]         ;632
000030  018b              LSLS     r3,r1,#6              ;632
000032  01a4              LSLS     r4,r4,#6              ;632
000034  0c1b              LSRS     r3,r3,#16             ;632
000036  0c24              LSRS     r4,r4,#16             ;632
000038  42a3              CMP      r3,r4                 ;632
00003a  d004              BEQ      |L7.70|
00003c  7e83              LDRB     r3,[r0,#0x1a]         ;632
00003e  2b00              CMP      r3,#0                 ;632
000040  d001              BEQ      |L7.70|
000042  2007              MOVS     r0,#7                 ;635
000044  bd10              POP      {r4,pc}
                  |L7.70|
000046  6813              LDR      r3,[r2,#0]            ;638
000048  6443              STR      r3,[r0,#0x44]         ;639
00004a  6481              STR      r1,[r0,#0x48]         ;639
00004c  7e81              LDRB     r1,[r0,#0x1a]         ;639
00004e  2900              CMP      r1,#0                 ;639
000050  d0e1              BEQ      |L7.22|
000052  6c01              LDR      r1,[r0,#0x40]         ;642
000054  680b              LDR      r3,[r1,#0]            ;642
000056  4611              MOV      r1,r2                 ;642
000058  4798              BLX      r3                    ;642
00005a  e7dc              B        |L7.22|
;;;656    
                          ENDP


                          AREA ||i.rt_serial_init||, CODE, READONLY, ALIGN=1

                  rt_serial_init PROC
;;;352     */
;;;353    static rt_err_t rt_serial_init(struct rt_device *dev)
000000  b510              PUSH     {r4,lr}
;;;354    {
;;;355        rt_err_t result = RT_EOK;
000002  2100              MOVS     r1,#0
;;;356        struct rt_serial_device *serial;
;;;357    
;;;358        RT_ASSERT(dev != RT_NULL);
;;;359        serial = (struct rt_serial_device *)dev;
;;;360    
;;;361        /* initialize rx/tx */
;;;362        serial->serial_rx = RT_NULL;
;;;363        serial->serial_tx = RT_NULL;
000004  64c1              STR      r1,[r0,#0x4c]
;;;364    
;;;365        /* apply configuration */
;;;366        if (serial->ops->configure)
000006  6501              STR      r1,[r0,#0x50]
000008  6c02              LDR      r2,[r0,#0x40]
00000a  6812              LDR      r2,[r2,#0]
00000c  2a00              CMP      r2,#0
00000e  d003              BEQ      |L8.24|
;;;367            result = serial->ops->configure(serial, &serial->config);
000010  4601              MOV      r1,r0
000012  3144              ADDS     r1,r1,#0x44
000014  4790              BLX      r2
000016  4601              MOV      r1,r0
                  |L8.24|
;;;368    
;;;369        return result;
000018  4608              MOV      r0,r1
;;;370    }
00001a  bd10              POP      {r4,pc}
;;;371    
                          ENDP


                          AREA ||i.rt_serial_open||, CODE, READONLY, ALIGN=2

                  rt_serial_open PROC
;;;371    
;;;372    static rt_err_t rt_serial_open(struct rt_device *dev, rt_uint16_t oflag)
000000  b5f8              PUSH     {r3-r7,lr}
;;;373    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;374        struct rt_serial_device *serial;
;;;375    
;;;376        RT_ASSERT(dev != RT_NULL);
;;;377        serial = (struct rt_serial_device *)dev;
;;;378    
;;;379        /* check device flag with the open flag */
;;;380        if ((oflag & RT_DEVICE_FLAG_DMA_RX) && !(dev->flag & RT_DEVICE_FLAG_DMA_RX))
;;;381            return -RT_EIO;
000006  4847              LDR      r0,|L9.292|
000008  0589              LSLS     r1,r1,#22             ;380
00000a  d502              BPL      |L9.18|
00000c  8ae1              LDRH     r1,[r4,#0x16]         ;380
00000e  0589              LSLS     r1,r1,#22             ;380
000010  d572              BPL      |L9.248|
                  |L9.18|
;;;382        if ((oflag & RT_DEVICE_FLAG_DMA_TX) && !(dev->flag & RT_DEVICE_FLAG_DMA_TX))
000012  0529              LSLS     r1,r5,#20
000014  d502              BPL      |L9.28|
000016  8ae1              LDRH     r1,[r4,#0x16]
000018  0509              LSLS     r1,r1,#20
00001a  d56d              BPL      |L9.248|
                  |L9.28|
;;;383            return -RT_EIO;
;;;384        if ((oflag & RT_DEVICE_FLAG_INT_RX) && !(dev->flag & RT_DEVICE_FLAG_INT_RX))
00001c  05e9              LSLS     r1,r5,#23
00001e  d502              BPL      |L9.38|
000020  8ae1              LDRH     r1,[r4,#0x16]
000022  05c9              LSLS     r1,r1,#23
000024  d57d              BPL      |L9.290|
                  |L9.38|
;;;385            return -RT_EIO;
;;;386        if ((oflag & RT_DEVICE_FLAG_INT_TX) && !(dev->flag & RT_DEVICE_FLAG_INT_TX))
000026  0569              LSLS     r1,r5,#21
000028  d502              BPL      |L9.48|
00002a  8ae1              LDRH     r1,[r4,#0x16]
00002c  0549              LSLS     r1,r1,#21
00002e  d578              BPL      |L9.290|
                  |L9.48|
;;;387            return -RT_EIO;
;;;388    
;;;389        /* get open flags */
;;;390        dev->open_flag = oflag & 0xff;
000030  b2e9              UXTB     r1,r5
000032  8321              STRH     r1,[r4,#0x18]
;;;391    
;;;392        /* initialize the Rx/Tx structure according to open flag */
;;;393        if (serial->serial_rx == RT_NULL)
000034  6ce0              LDR      r0,[r4,#0x4c]
000036  2700              MOVS     r7,#0
000038  2800              CMP      r0,#0
00003a  d147              BNE      |L9.204|
;;;394        {
;;;395            if (oflag & RT_DEVICE_FLAG_DMA_RX)
00003c  05a8              LSLS     r0,r5,#22
00003e  d527              BPL      |L9.144|
;;;396            {
;;;397                if (serial->config.bufsz == 0) {
000040  6ca0              LDR      r0,[r4,#0x48]
000042  0180              LSLS     r0,r0,#6
000044  0c01              LSRS     r1,r0,#16
000046  d01d              BEQ      |L9.132|
;;;398                    struct rt_serial_rx_dma* rx_dma;
;;;399    
;;;400                    rx_dma = (struct rt_serial_rx_dma*) rt_malloc (sizeof(struct rt_serial_rx_dma));
;;;401                    RT_ASSERT(rx_dma != RT_NULL);
;;;402                    rx_dma->activated = RT_FALSE;
;;;403    
;;;404                    serial->serial_rx = rx_dma;
;;;405                } else {
;;;406                    struct rt_serial_rx_fifo* rx_fifo;
;;;407    
;;;408                    rx_fifo = (struct rt_serial_rx_fifo*) rt_malloc (sizeof(struct rt_serial_rx_fifo) +
000048  0c00              LSRS     r0,r0,#16
00004a  300c              ADDS     r0,r0,#0xc
00004c  f7fffffe          BL       rt_malloc
000050  4606              MOV      r6,r0
;;;409                        serial->config.bufsz);
;;;410                    RT_ASSERT(rx_fifo != RT_NULL);
;;;411                    rx_fifo->buffer = (rt_uint8_t*) (rx_fifo + 1);
000052  300c              ADDS     r0,r0,#0xc
;;;412                    rt_memset(rx_fifo->buffer, 0, serial->config.bufsz);
000054  6030              STR      r0,[r6,#0]
000056  6ca1              LDR      r1,[r4,#0x48]
000058  0189              LSLS     r1,r1,#6
00005a  0c0a              LSRS     r2,r1,#16
00005c  2100              MOVS     r1,#0
00005e  f7fffffe          BL       rt_memset
;;;413                    rx_fifo->put_index = 0;
000062  80b7              STRH     r7,[r6,#4]
;;;414                    rx_fifo->get_index = 0;
000064  80f7              STRH     r7,[r6,#6]
;;;415                    rx_fifo->is_full = RT_FALSE;
;;;416                    serial->serial_rx = rx_fifo;
000066  60b7              STR      r7,[r6,#8]
;;;417                    /* configure fifo address and length to low level device */
;;;418                    serial->ops->control(serial, RT_DEVICE_CTRL_CONFIG, (void *) RT_DEVICE_FLAG_DMA_RX);
000068  64e6              STR      r6,[r4,#0x4c]
00006a  6c20              LDR      r0,[r4,#0x40]
00006c  2201              MOVS     r2,#1
00006e  0252              LSLS     r2,r2,#9
000070  6843              LDR      r3,[r0,#4]
000072  2103              MOVS     r1,#3
000074  4620              MOV      r0,r4
000076  4798              BLX      r3
                  |L9.120|
;;;419                }
;;;420                dev->open_flag |= RT_DEVICE_FLAG_DMA_RX;
000078  8b20              LDRH     r0,[r4,#0x18]
00007a  2101              MOVS     r1,#1
00007c  0249              LSLS     r1,r1,#9
00007e  4308              ORRS     r0,r0,r1
000080  8320              STRH     r0,[r4,#0x18]
000082  e023              B        |L9.204|
                  |L9.132|
000084  2004              MOVS     r0,#4                 ;400
000086  f7fffffe          BL       rt_malloc
00008a  6007              STR      r7,[r0,#0]            ;404
00008c  64e0              STR      r0,[r4,#0x4c]         ;405
00008e  e7f3              B        |L9.120|
                  |L9.144|
;;;421            }
;;;422            else if (oflag & RT_DEVICE_FLAG_INT_RX)
000090  05e8              LSLS     r0,r5,#23
000092  d51b              BPL      |L9.204|
;;;423            {
;;;424                struct rt_serial_rx_fifo* rx_fifo;
;;;425    
;;;426                rx_fifo = (struct rt_serial_rx_fifo*) rt_malloc (sizeof(struct rt_serial_rx_fifo) +
000094  6ca0              LDR      r0,[r4,#0x48]
000096  0180              LSLS     r0,r0,#6
000098  0c00              LSRS     r0,r0,#16
00009a  300c              ADDS     r0,r0,#0xc
00009c  f7fffffe          BL       rt_malloc
0000a0  4606              MOV      r6,r0
;;;427                    serial->config.bufsz);
;;;428                RT_ASSERT(rx_fifo != RT_NULL);
;;;429                rx_fifo->buffer = (rt_uint8_t*) (rx_fifo + 1);
0000a2  300c              ADDS     r0,r0,#0xc
;;;430                rt_memset(rx_fifo->buffer, 0, serial->config.bufsz);
0000a4  6030              STR      r0,[r6,#0]
0000a6  6ca1              LDR      r1,[r4,#0x48]
0000a8  0189              LSLS     r1,r1,#6
0000aa  0c0a              LSRS     r2,r1,#16
0000ac  2100              MOVS     r1,#0
0000ae  f7fffffe          BL       rt_memset
;;;431                rx_fifo->put_index = 0;
0000b2  80b7              STRH     r7,[r6,#4]
;;;432                rx_fifo->get_index = 0;
0000b4  80f7              STRH     r7,[r6,#6]
;;;433    
;;;434                serial->serial_rx = rx_fifo;
;;;435                dev->open_flag |= RT_DEVICE_FLAG_INT_RX;
0000b6  64e6              STR      r6,[r4,#0x4c]
0000b8  8b20              LDRH     r0,[r4,#0x18]
0000ba  22ff              MOVS     r2,#0xff
0000bc  3201              ADDS     r2,#1
0000be  4310              ORRS     r0,r0,r2
0000c0  8320              STRH     r0,[r4,#0x18]
;;;436                /* configure low level device */
;;;437                serial->ops->control(serial, RT_DEVICE_CTRL_SET_INT, (void *)RT_DEVICE_FLAG_INT_RX);
0000c2  6c20              LDR      r0,[r4,#0x40]
0000c4  2110              MOVS     r1,#0x10
0000c6  6843              LDR      r3,[r0,#4]
0000c8  4620              MOV      r0,r4
0000ca  4798              BLX      r3
                  |L9.204|
;;;438            }
;;;439            else
;;;440            {
;;;441                serial->serial_rx = RT_NULL;
;;;442            }
;;;443        }
;;;444    
;;;445        if (serial->serial_tx == RT_NULL)
0000cc  6d20              LDR      r0,[r4,#0x50]
0000ce  2800              CMP      r0,#0
0000d0  d126              BNE      |L9.288|
;;;446        {
;;;447            if (oflag & RT_DEVICE_FLAG_DMA_TX)
0000d2  0528              LSLS     r0,r5,#20
0000d4  d511              BPL      |L9.250|
;;;448            {
;;;449                struct rt_serial_tx_dma* tx_dma;
;;;450    
;;;451                tx_dma = (struct rt_serial_tx_dma*) rt_malloc (sizeof(struct rt_serial_tx_dma));
0000d6  2024              MOVS     r0,#0x24
0000d8  f7fffffe          BL       rt_malloc
0000dc  4605              MOV      r5,r0
;;;452                RT_ASSERT(tx_dma != RT_NULL);
;;;453                tx_dma->activated = RT_FALSE;
0000de  c080              STM      r0!,{r7}
;;;454    
;;;455                rt_data_queue_init(&(tx_dma->data_queue), 8, 4, RT_NULL);
0000e0  2300              MOVS     r3,#0
0000e2  2204              MOVS     r2,#4
0000e4  2108              MOVS     r1,#8
0000e6  f7fffffe          BL       rt_data_queue_init
;;;456                serial->serial_tx = tx_dma;
;;;457    
;;;458                dev->open_flag |= RT_DEVICE_FLAG_DMA_TX;
0000ea  6525              STR      r5,[r4,#0x50]
0000ec  8b20              LDRH     r0,[r4,#0x18]
0000ee  2101              MOVS     r1,#1
0000f0  02c9              LSLS     r1,r1,#11
0000f2  4308              ORRS     r0,r0,r1
0000f4  8320              STRH     r0,[r4,#0x18]
;;;459            }
0000f6  e013              B        |L9.288|
                  |L9.248|
0000f8  e013              B        |L9.290|
                  |L9.250|
;;;460            else if (oflag & RT_DEVICE_FLAG_INT_TX)
0000fa  0568              LSLS     r0,r5,#21
0000fc  d510              BPL      |L9.288|
;;;461            {
;;;462                struct rt_serial_tx_fifo *tx_fifo;
;;;463    
;;;464                tx_fifo = (struct rt_serial_tx_fifo*) rt_malloc(sizeof(struct rt_serial_tx_fifo));
0000fe  200c              MOVS     r0,#0xc
000100  f7fffffe          BL       rt_malloc
000104  4605              MOV      r5,r0
;;;465                RT_ASSERT(tx_fifo != RT_NULL);
;;;466    
;;;467                rt_completion_init(&(tx_fifo->completion));
000106  f7fffffe          BL       rt_completion_init
;;;468                serial->serial_tx = tx_fifo;
;;;469    
;;;470                dev->open_flag |= RT_DEVICE_FLAG_INT_TX;
00010a  6525              STR      r5,[r4,#0x50]
00010c  8b20              LDRH     r0,[r4,#0x18]
00010e  2201              MOVS     r2,#1
000110  0292              LSLS     r2,r2,#10
000112  4310              ORRS     r0,r0,r2
000114  8320              STRH     r0,[r4,#0x18]
;;;471                /* configure low level device */
;;;472                serial->ops->control(serial, RT_DEVICE_CTRL_SET_INT, (void *)RT_DEVICE_FLAG_INT_TX);
000116  6c20              LDR      r0,[r4,#0x40]
000118  2110              MOVS     r1,#0x10
00011a  6843              LDR      r3,[r0,#4]
00011c  4620              MOV      r0,r4
00011e  4798              BLX      r3
                  |L9.288|
;;;473            }
;;;474            else
;;;475            {
;;;476                serial->serial_tx = RT_NULL;
;;;477            }
;;;478        }
;;;479    
;;;480        return RT_EOK;
000120  2000              MOVS     r0,#0
                  |L9.290|
;;;481    }
000122  bdf8              POP      {r3-r7,pc}
;;;482    
                          ENDP

                  |L9.292|
                          DCD      0xfffffff8

                          AREA ||i.rt_serial_read||, CODE, READONLY, ALIGN=1

                  rt_serial_read PROC
;;;556    
;;;557    static rt_size_t rt_serial_read(struct rt_device *dev,
000000  b5fe              PUSH     {r1-r7,lr}
;;;558                                    rt_off_t          pos,
;;;559                                    void             *buffer,
;;;560                                    rt_size_t         size)
;;;561    {
000002  4611              MOV      r1,r2
;;;562        struct rt_serial_device *serial;
;;;563    
;;;564        RT_ASSERT(dev != RT_NULL);
;;;565        if (size == 0) return 0;
000004  2b00              CMP      r3,#0
000006  d027              BEQ      |L10.88|
;;;566    
;;;567        serial = (struct rt_serial_device *)dev;
000008  4606              MOV      r6,r0
;;;568    
;;;569        if (dev->open_flag & RT_DEVICE_FLAG_INT_RX)
00000a  8b00              LDRH     r0,[r0,#0x18]
00000c  05c2              LSLS     r2,r0,#23
00000e  d529              BPL      |L10.100|
000010  9301              STR      r3,[sp,#4]
;;;570        {
;;;571            return _serial_int_rx(serial, buffer, size);
000012  460d              MOV      r5,r1
000014  461c              MOV      r4,r3
000016  6cf7              LDR      r7,[r6,#0x4c]
                  |L10.24|
000018  f7fffffe          BL       rt_hw_interrupt_disable
00001c  4601              MOV      r1,r0
00001e  88f8              LDRH     r0,[r7,#6]
000020  88ba              LDRH     r2,[r7,#4]
000022  4290              CMP      r0,r2
000024  d01a              BEQ      |L10.92|
000026  683a              LDR      r2,[r7,#0]
000028  5c12              LDRB     r2,[r2,r0]
00002a  1c40              ADDS     r0,r0,#1
00002c  b280              UXTH     r0,r0
00002e  9200              STR      r2,[sp,#0]
000030  80f8              STRH     r0,[r7,#6]
000032  6cb2              LDR      r2,[r6,#0x48]
000034  0192              LSLS     r2,r2,#6
000036  0c12              LSRS     r2,r2,#16
000038  4290              CMP      r0,r2
00003a  d301              BCC      |L10.64|
00003c  2000              MOVS     r0,#0
00003e  80f8              STRH     r0,[r7,#6]
                  |L10.64|
000040  4608              MOV      r0,r1
000042  f7fffffe          BL       rt_hw_interrupt_enable
000046  9800              LDR      r0,[sp,#0]
000048  7028              STRB     r0,[r5,#0]
00004a  1e64              SUBS     r4,r4,#1
00004c  1c6d              ADDS     r5,r5,#1
00004e  2c00              CMP      r4,#0
000050  d1e2              BNE      |L10.24|
                  |L10.82|
000052  9801              LDR      r0,[sp,#4]
000054  1b00              SUBS     r0,r0,r4
;;;572        }
;;;573        else if (dev->open_flag & RT_DEVICE_FLAG_DMA_RX)
;;;574        {
;;;575            return _serial_dma_rx(serial, buffer, size);
;;;576        }
;;;577    
;;;578        return _serial_poll_rx(serial, buffer, size);
;;;579    }
000056  bdfe              POP      {r1-r7,pc}
                  |L10.88|
000058  2000              MOVS     r0,#0                 ;565
00005a  bdfe              POP      {r1-r7,pc}
                  |L10.92|
00005c  4608              MOV      r0,r1
00005e  f7fffffe          BL       rt_hw_interrupt_enable
000062  e7f6              B        |L10.82|
                  |L10.100|
000064  0580              LSLS     r0,r0,#22             ;573
000066  d504              BPL      |L10.114|
000068  461a              MOV      r2,r3                 ;575
00006a  4630              MOV      r0,r6                 ;575
00006c  f7fffffe          BL       _serial_dma_rx
000070  bdfe              POP      {r1-r7,pc}
                  |L10.114|
000072  460d              MOV      r5,r1                 ;578
000074  461c              MOV      r4,r3                 ;578
000076  461f              MOV      r7,r3                 ;578
                  |L10.120|
000078  6c30              LDR      r0,[r6,#0x40]         ;578
00007a  68c1              LDR      r1,[r0,#0xc]          ;578
00007c  4630              MOV      r0,r6                 ;578
00007e  4788              BLX      r1                    ;578
000080  1c41              ADDS     r1,r0,#1              ;578
000082  d006              BEQ      |L10.146|
000084  7028              STRB     r0,[r5,#0]            ;578
000086  1e64              SUBS     r4,r4,#1              ;578
000088  1c6d              ADDS     r5,r5,#1              ;578
00008a  280a              CMP      r0,#0xa               ;578
00008c  d001              BEQ      |L10.146|
00008e  2c00              CMP      r4,#0                 ;578
000090  d1f2              BNE      |L10.120|
                  |L10.146|
000092  1b38              SUBS     r0,r7,r4              ;578
000094  bdfe              POP      {r1-r7,pc}
;;;580    
                          ENDP


                          AREA ||i.rt_serial_write||, CODE, READONLY, ALIGN=2

                  rt_serial_write PROC
;;;580    
;;;581    static rt_size_t rt_serial_write(struct rt_device *dev,
000000  b5f8              PUSH     {r3-r7,lr}
;;;582                                     rt_off_t          pos,
;;;583                                     const void       *buffer,
;;;584                                     rt_size_t         size)
;;;585    {
000002  001c              MOVS     r4,r3
000004  d014              BEQ      |L11.48|
;;;586        struct rt_serial_device *serial;
;;;587    
;;;588        RT_ASSERT(dev != RT_NULL);
;;;589        if (size == 0) return 0;
;;;590    
;;;591        serial = (struct rt_serial_device *)dev;
000006  4606              MOV      r6,r0
;;;592    
;;;593        if (dev->open_flag & RT_DEVICE_FLAG_INT_TX)
000008  8b00              LDRH     r0,[r0,#0x18]
00000a  4b2b              LDR      r3,|L11.184|
00000c  0541              LSLS     r1,r0,#21
00000e  d517              BPL      |L11.64|
000010  6d30              LDR      r0,[r6,#0x50]
;;;594        {
;;;595            return _serial_int_tx(serial, buffer, size);
000012  4615              MOV      r5,r2
000014  4627              MOV      r7,r4
000016  9000              STR      r0,[sp,#0]
                  |L11.24|
000018  6c30              LDR      r0,[r6,#0x40]
00001a  7829              LDRB     r1,[r5,#0]
00001c  6882              LDR      r2,[r0,#8]
00001e  4630              MOV      r0,r6
000020  4790              BLX      r2
000022  1c40              ADDS     r0,r0,#1
000024  d006              BEQ      |L11.52|
000026  1e64              SUBS     r4,r4,#1
000028  1c6d              ADDS     r5,r5,#1
                  |L11.42|
00002a  2c00              CMP      r4,#0
00002c  d1f4              BNE      |L11.24|
00002e  e040              B        |L11.178|
                  |L11.48|
000030  2000              MOVS     r0,#0                 ;589
;;;596        }
;;;597        else if (dev->open_flag & RT_DEVICE_FLAG_DMA_TX)
;;;598        {
;;;599            return _serial_dma_tx(serial, buffer, size);
;;;600        }
;;;601        else
;;;602        {
;;;603            return _serial_poll_tx(serial, buffer, size);
;;;604        }
;;;605    }
000032  bdf8              POP      {r3-r7,pc}
                  |L11.52|
000034  2100              MOVS     r1,#0
000036  43c9              MVNS     r1,r1
000038  9800              LDR      r0,[sp,#0]
00003a  f7fffffe          BL       rt_completion_wait
00003e  e7f4              B        |L11.42|
                  |L11.64|
000040  0500              LSLS     r0,r0,#20             ;597
000042  d520              BPL      |L11.134|
000044  4617              MOV      r7,r2                 ;599
000046  6d35              LDR      r5,[r6,#0x50]         ;599
000048  4622              MOV      r2,r4                 ;599
00004a  4639              MOV      r1,r7                 ;599
00004c  1d28              ADDS     r0,r5,#4              ;599
00004e  f7fffffe          BL       rt_data_queue_push
000052  2800              CMP      r0,#0                 ;599
000054  d002              BEQ      |L11.92|
000056  f7fffffe          BL       rt_set_errno
00005a  e7e9              B        |L11.48|
                  |L11.92|
00005c  f7fffffe          BL       rt_hw_interrupt_disable
000060  6829              LDR      r1,[r5,#0]            ;599
000062  2901              CMP      r1,#1                 ;599
000064  d00b              BEQ      |L11.126|
000066  2101              MOVS     r1,#1                 ;599
000068  6029              STR      r1,[r5,#0]            ;599
00006a  f7fffffe          BL       rt_hw_interrupt_enable
00006e  6c30              LDR      r0,[r6,#0x40]         ;599
000070  2302              MOVS     r3,#2                 ;599
000072  6905              LDR      r5,[r0,#0x10]         ;599
000074  4622              MOV      r2,r4                 ;599
000076  4639              MOV      r1,r7                 ;599
000078  4630              MOV      r0,r6                 ;599
00007a  47a8              BLX      r5                    ;599
00007c  e001              B        |L11.130|
                  |L11.126|
00007e  f7fffffe          BL       rt_hw_interrupt_enable
                  |L11.130|
000082  4620              MOV      r0,r4                 ;599
000084  bdf8              POP      {r3-r7,pc}
                  |L11.134|
000086  4615              MOV      r5,r2                 ;603
000088  4627              MOV      r7,r4                 ;603
                  |L11.138|
00008a  7828              LDRB     r0,[r5,#0]            ;603
00008c  280a              CMP      r0,#0xa               ;603
00008e  d107              BNE      |L11.160|
000090  7e30              LDRB     r0,[r6,#0x18]         ;603
000092  0640              LSLS     r0,r0,#25             ;603
000094  d504              BPL      |L11.160|
000096  6c30              LDR      r0,[r6,#0x40]         ;603
000098  210d              MOVS     r1,#0xd               ;603
00009a  6882              LDR      r2,[r0,#8]            ;603
00009c  4630              MOV      r0,r6                 ;603
00009e  4790              BLX      r2                    ;603
                  |L11.160|
0000a0  6c30              LDR      r0,[r6,#0x40]         ;603
0000a2  7829              LDRB     r1,[r5,#0]            ;603
0000a4  6882              LDR      r2,[r0,#8]            ;603
0000a6  4630              MOV      r0,r6                 ;603
0000a8  4790              BLX      r2                    ;603
0000aa  1e64              SUBS     r4,r4,#1              ;603
0000ac  1c6d              ADDS     r5,r5,#1              ;603
0000ae  2c00              CMP      r4,#0                 ;603
0000b0  d1eb              BNE      |L11.138|
                  |L11.178|
0000b2  4638              MOV      r0,r7                 ;603
0000b4  bdf8              POP      {r3-r7,pc}
;;;606    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L11.184|
                          DCD      0xffffffff
