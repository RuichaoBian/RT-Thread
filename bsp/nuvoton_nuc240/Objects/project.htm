<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Sat Aug 12 12:04:39 2017
<BR><P>
<H3>Maximum Stack Usage =        256 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; _list_thread &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[30]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[29]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ACMP_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[28]">ADC_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[b]">BOD_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1f]">CAN0_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[20]">CAN1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[29]">Default_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[d]">EINT0_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[e]">EINT1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[f]">GPAB_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[10]">GPCDEF_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[2d]">HID_ClassRequest</a> from hid_mousekeyboard.o(i.HID_ClassRequest) referenced from startup.o(i.USB_Init)
 <LI><a href="#[7]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1d]">I2C0_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1e]">I2C1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[26]">I2S_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[25]">PDMA_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[23]">PS2_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[11]">PWMA_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[12]">PWMB_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[27]">PWRWU_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[2a]">RTC_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[2e]">Reset_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[21]">SC012_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[19]">SPI0_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[1c]">SPI3_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[2b]">SystemInit</a> from system_nuc230_240.o(i.SystemInit) referenced from startup_nuc230_240.o(.text)
 <LI><a href="#[13]">TMR0_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[14]">TMR1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[15]">TMR2_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[16]">TMR3_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[17]">UART02_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[18]">UART1_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[22]">USBD_IRQHandler</a> from hid_mousekeyboard.o(i.USBD_IRQHandler) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[c]">WDT_IRQHandler</a> from startup_nuc230_240.o(.text) referenced from startup_nuc230_240.o(RESET)
 <LI><a href="#[2f]">__main</a> from __main.o(!!!main) referenced from startup_nuc230_240.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[31]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[33]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[74]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[75]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[34]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[76]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[38]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[77]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[78]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[79]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[7a]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[7b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[7c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[7d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[7e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[7f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[80]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[81]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[82]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[83]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[84]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[85]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[86]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[87]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[88]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[89]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3d]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[8c]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[8d]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[8e]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[8f]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[90]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[91]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[92]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[32]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[93]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[35]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[37]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[94]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[39]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[95]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[43]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3c]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[96]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3e]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2e]"></a>Reset_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GPCDEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>PS2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PWMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PWMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SC012_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TMR0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TMR1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TMR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_nuc230_240.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[65]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>

<P><STRONG><a name="[66]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>

<P><STRONG><a name="[70]"></a>rt_hw_context_switch</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[6f]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; _list_thread &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[41]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3b]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[3f]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a1]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[44]"></a>CLK_EnablePLL</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, clk.o(i.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[69]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[47]"></a>CLK_SetCoreClock</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, clk.o(i.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[48]"></a>CLK_SetHCLK</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[6b]"></a>CLK_SetModuleClock</STRONG> (Thumb, 180 bytes, Stack size 44 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[45]"></a>CLK_WaitClockReady</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, clk.o(i.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
</UL>

<P><STRONG><a name="[2d]"></a>HID_ClassRequest</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hid_mousekeyboard.o(i.HID_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HID_ClassRequest &rArr; USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlIn
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetSetupPacket
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SetStall
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(i.USB_Init)
</UL>
<P><STRONG><a name="[57]"></a>HID_Init</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hid_mousekeyboard.o(i.HID_Init))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[49]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, system_nuc230_240.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[2b]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_nuc230_240.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(.text)
</UL>
<P><STRONG><a name="[4d]"></a>USBD_CtrlIn</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, usbd.o(i.USBD_CtrlIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[4f]"></a>USBD_CtrlOut</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, usbd.o(i.USBD_CtrlOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_CtrlOut
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[50]"></a>USBD_GetDescriptor</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, usbd.o(i.USBD_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlIn
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlOut
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
</UL>

<P><STRONG><a name="[4a]"></a>USBD_GetSetupPacket</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbd.o(i.USBD_GetSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_GetSetupPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ClassRequest
</UL>

<P><STRONG><a name="[22]"></a>USBD_IRQHandler</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, hid_mousekeyboard.o(i.USBD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBD_IRQHandler &rArr; USBD_ProcessSetupPacket &rArr; USBD_StandardRequest &rArr; USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_SwReset
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOut
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlIn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USBD_Open</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbd.o(i.USBD_Open))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[4c]"></a>USBD_PrepareCtrlIn</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbd.o(i.USBD_PrepareCtrlIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ClassRequest
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>

<P><STRONG><a name="[51]"></a>USBD_PrepareCtrlOut</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usbd.o(i.USBD_PrepareCtrlOut))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>

<P><STRONG><a name="[53]"></a>USBD_ProcessSetupPacket</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, usbd.o(i.USBD_ProcessSetupPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBD_ProcessSetupPacket &rArr; USBD_StandardRequest &rArr; USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_StandardRequest
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_MemCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>USBD_StandardRequest</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, usbd.o(i.USBD_StandardRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBD_StandardRequest &rArr; USBD_GetDescriptor &rArr; USBD_PrepareCtrlIn
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlOut
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
</UL>

<P><STRONG><a name="[58]"></a>USBD_Start</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, usbd.o(i.USBD_Start))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>

<P><STRONG><a name="[52]"></a>USBD_SwReset</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, usbd.o(i.USBD_SwReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBD_SwReset
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>USB_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, startup.o(i.USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Start
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_Open
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[6e]"></a>__rt_ffs</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[5d]"></a>list_thread</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = list_thread &rArr; _list_thread &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[3a]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, startup.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_hw_board_init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[63]"></a>rt_device_write</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, device.o(i.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_device_write &rArr; rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[5f]"></a>rt_enter_critical</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>

<P><STRONG><a name="[61]"></a>rt_exit_critical</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>

<P><STRONG><a name="[68]"></a>rt_hw_board_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_hw_board_init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[6d]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[40]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; _list_thread &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[71]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(i.rt_interrupt_get_nest))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>

<P><STRONG><a name="[5b]"></a>rt_kprintf</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>

<P><STRONG><a name="[67]"></a>rt_schedule</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
</UL>

<P><STRONG><a name="[64]"></a>rt_set_errno</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, kservice.o(i.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>

<P><STRONG><a name="[60]"></a>rt_strlen</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, kservice.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>

<P><STRONG><a name="[72]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>

<P><STRONG><a name="[6c]"></a>rt_vsnprintf</STRONG> (Thumb, 606 bytes, Stack size 56 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[5e]"></a>rtthread_startup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, startup.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtthread_startup &rArr; rt_hw_board_init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[29]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_nuc230_240.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_nuc230_240.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USBD_SetStall</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, hid_mousekeyboard.o(i.USBD_SetStall))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HID_ClassRequest
</UL>

<P><STRONG><a name="[4e]"></a>USBD_MemCopy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usbd.o(i.USBD_MemCopy))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_ProcessSetupPacket
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_PrepareCtrlIn
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_GetSetupPacket
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlOut
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_CtrlIn
</UL>

<P><STRONG><a name="[62]"></a>print_number</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[73]"></a>skip_atoi</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[59]"></a>_list_thread</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, cmd.o(i._list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _list_thread &rArr; object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[5a]"></a>object_name_maxlen</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, cmd.o(i.object_name_maxlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = object_name_maxlen &rArr; rt_exit_critical &rArr; rt_schedule &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>

<P><STRONG><a name="[5c]"></a>object_split</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cmd.o(i.object_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
