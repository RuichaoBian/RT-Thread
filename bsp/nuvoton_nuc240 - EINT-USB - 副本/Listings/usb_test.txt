; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\usb_test.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\usb_test.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 -DRT_DEBUG --omf_browse=.\objects\usb_test.crf APP\USB_test.c]
                          THUMB

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;4      
;;;5      void SYS_Init(void)
000000  b510              PUSH     {r4,lr}
;;;6      {
;;;7      
;;;8          /*---------------------------------------------------------------------------------------------------------*/
;;;9          /* Init System Clock                                                                                       */
;;;10         /*---------------------------------------------------------------------------------------------------------*/
;;;11     
;;;12         /* Enable Internal RC 22.1184 MHz clock */
;;;13         CLK_EnableXtalRC(CLK_PWRCON_OSC22M_EN_Msk);
000002  2004              MOVS     r0,#4
000004  f7fffffe          BL       CLK_EnableXtalRC
;;;14     
;;;15         /* Waiting for Internal RC clock ready */
;;;16         CLK_WaitClockReady(CLK_CLKSTATUS_OSC22M_STB_Msk);
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       CLK_WaitClockReady
;;;17     
;;;18         /* Switch HCLK clock source to Internal RC and HCLK source divide 1 */
;;;19         CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_HIRC, CLK_CLKDIV_HCLK(1));
00000e  2100              MOVS     r1,#0
000010  2007              MOVS     r0,#7
000012  f7fffffe          BL       CLK_SetHCLK
;;;20     
;;;21         /* Enable external XTAL 12 MHz clock */
;;;22         CLK_EnableXtalRC(CLK_PWRCON_XTL12M_EN_Msk);
000016  2001              MOVS     r0,#1
000018  f7fffffe          BL       CLK_EnableXtalRC
;;;23     
;;;24         /* Waiting for external XTAL clock ready */
;;;25         CLK_WaitClockReady(CLK_CLKSTATUS_XTL12M_STB_Msk);
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       CLK_WaitClockReady
;;;26     
;;;27         /* Set core clock */
;;;28         CLK_SetCoreClock(72000000);
000022  4806              LDR      r0,|L1.60|
000024  f7fffffe          BL       CLK_SetCoreClock
;;;29     
;;;30         /* Enable module clock */
;;;31         //CLK_EnableModuleClock(UART0_MODULE);
;;;32         CLK_EnableModuleClock(USBD_MODULE);
000028  4c05              LDR      r4,|L1.64|
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       CLK_EnableModuleClock
;;;33     
;;;34         /* Select module clock source */
;;;35        // CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART_S_HXT, CLK_CLKDIV_UART(1));
;;;36         CLK_SetModuleClock(USBD_MODULE, 0, CLK_CLKDIV_USB(3));
000030  2220              MOVS     r2,#0x20
000032  2100              MOVS     r1,#0
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       CLK_SetModuleClock
;;;37     
;;;38     
;;;39         /*---------------------------------------------------------------------------------------------------------*/
;;;40         /* Init I/O Multi-function                                                                                 */
;;;41         /*---------------------------------------------------------------------------------------------------------*/
;;;42     
;;;43         /* Set GPB multi-function pins for UART0 RXD and TXD, and Clock Output */
;;;44        // SYS->GPB_MFP |= (SYS_GPB_MFP_PB0_UART0_RXD | SYS_GPB_MFP_PB1_UART0_TXD | SYS_GPB_MFP_PB8_CLKO);
;;;45         //SYS->ALT_MFP |=  SYS_ALT_MFP_PB8_CLKO;
;;;46     
;;;47         /* Enable CLKO (PB.8) for monitor HCLK. CLKO = HCLK/8 Hz*/
;;;48        // EnableCLKO((2 << CLK_CLKSEL2_FRQDIV_S_Pos), 2);
;;;49     }
00003a  bd10              POP      {r4,pc}
;;;50     
                          ENDP

                  |L1.60|
                          DCD      0x044aa200
                  |L1.64|
                          DCD      0x40003c9b

                          AREA ||i.ma1in||, CODE, READONLY, ALIGN=2

                  ma1in PROC
;;;53     /*---------------------------------------------------------------------------------------------------------*/
;;;54     int32_t ma1in(void)
000000  2159              MOVS     r1,#0x59
000002  2316              MOVS     r3,#0x16
000004  480b              LDR      r0,|L2.52|
000006  2288              MOVS     r2,#0x88
000008  e002              B        |L2.16|
                  |L2.10|
00000a  6001              STR      r1,[r0,#0]
00000c  6003              STR      r3,[r0,#0]
00000e  6002              STR      r2,[r0,#0]
                  |L2.16|
000010  6804              LDR      r4,[r0,#0]
000012  2c01              CMP      r4,#1
000014  d1f9              BNE      |L2.10|
;;;55     {
;;;56     
;;;57         /* Unlock protected registers */
;;;58         SYS_UnlockReg();
;;;59     
;;;60         SYS_Init();
000016  f7fffffe          BL       SYS_Init
;;;61     
;;;62          /*---------------------------------------------------------------------------------------------------------*/
;;;63         /* Init UART                                                                                               */
;;;64         /*---------------------------------------------------------------------------------------------------------*/
;;;65         /* Reset UART0 module */
;;;66        // SYS_ResetModule(UART0_RST);
;;;67     
;;;68         /* Configure UART0 and set UART0 Baudrate */
;;;69        // UART_Open(UART0, 115200);
;;;70     
;;;71       //  printf("\n");
;;;72       //  printf("+-----------------------------------------------------+\n");
;;;73       //  printf("|    NuMicro USB HID Mouse and Keyboard Sample Code   |\n");
;;;74       //  printf("+-----------------------------------------------------+\n");
;;;75     
;;;76       //  printf("Mouse draws circle on the screen.\n");
;;;77       //  printf("If PB.15 = 0, just report it is key 'a'.\n");
;;;78         /* Set PB.15 as Quasi-bidirectional mode */
;;;79       //  PB->PMD = (PB->PMD & ~GPIO_PMD_PMD15_Msk) | (GPIO_PMD_QUASI << GPIO_PMD_PMD15_Pos);
;;;80         
;;;81         USBD_Open(&gsInfo, HID_ClassRequest, NULL);
00001a  2200              MOVS     r2,#0
00001c  4906              LDR      r1,|L2.56|
00001e  4807              LDR      r0,|L2.60|
000020  f7fffffe          BL       USBD_Open
;;;82     
;;;83         /* Endpoint configuration */
;;;84         HID_Init();
000024  f7fffffe          BL       HID_Init
;;;85         USBD_Start();
000028  f7fffffe          BL       USBD_Start
00002c  4904              LDR      r1,|L2.64|
00002e  05e0              LSLS     r0,r4,#23
000030  6008              STR      r0,[r1,#0]
                  |L2.50|
;;;86         NVIC_EnableIRQ(USBD_IRQn);
;;;87     
;;;88         while(1)
000032  e7fe              B        |L2.50|
;;;89         {
;;;90            // HID_UpdateMouseData();
;;;91             //HID_UpdateKbData();
;;;92         }
;;;93     }
;;;94     
                          ENDP

                  |L2.52|
                          DCD      0x50000100
                  |L2.56|
                          DCD      HID_ClassRequest
                  |L2.60|
                          DCD      gsInfo
                  |L2.64|
                          DCD      0xe000e100

;*** Start embedded assembler ***

#line 1 "APP\\USB_test.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_USB_test_c_SYS_Init____REV16|
#line 118 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_USB_test_c_SYS_Init____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_USB_test_c_SYS_Init____REVSH|
#line 132
|__asm___10_USB_test_c_SYS_Init____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
