; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\fmc.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\fmc.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 -DRT_DEBUG --omf_browse=.\objects\fmc.crf Libraries\StdDriver\src\fmc.c]
                          THUMB

                          AREA ||i.FMC_Close||, CODE, READONLY, ALIGN=2

                  FMC_Close PROC
;;;62       */
;;;63     void FMC_Close(void)
000000  4802              LDR      r0,|L1.12|
;;;64     {
;;;65         FMC->ISPCON &= ~FMC_ISPCON_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  0849              LSRS     r1,r1,#1
000006  0049              LSLS     r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;66     }
00000a  4770              BX       lr
;;;67     
                          ENDP

                  |L1.12|
                          DCD      0x5000c000

                          AREA ||i.FMC_DisableAPUpdate||, CODE, READONLY, ALIGN=2

                  FMC_DisableAPUpdate PROC
;;;79       */
;;;80     void FMC_DisableAPUpdate(void)
000000  4802              LDR      r0,|L2.12|
;;;81     {
;;;82         FMC->ISPCON &= ~FMC_ISPCON_APUEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  2208              MOVS     r2,#8
000006  4391              BICS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;83     }
00000a  4770              BX       lr
;;;84     
                          ENDP

                  |L2.12|
                          DCD      0x5000c000

                          AREA ||i.FMC_DisableConfigUpdate||, CODE, READONLY, ALIGN=2

                  FMC_DisableConfigUpdate PROC
;;;95       */
;;;96     void FMC_DisableConfigUpdate(void)
000000  4802              LDR      r0,|L3.12|
;;;97     {
;;;98         FMC->ISPCON &= ~FMC_ISPCON_CFGUEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  2210              MOVS     r2,#0x10
000006  4391              BICS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;99     }
00000a  4770              BX       lr
;;;100    
                          ENDP

                  |L3.12|
                          DCD      0x5000c000

                          AREA ||i.FMC_DisableLDUpdate||, CODE, READONLY, ALIGN=2

                  FMC_DisableLDUpdate PROC
;;;111      */
;;;112    void FMC_DisableLDUpdate(void)
000000  4802              LDR      r0,|L4.12|
;;;113    {
;;;114        FMC->ISPCON &= ~FMC_ISPCON_LDUEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  2220              MOVS     r2,#0x20
000006  4391              BICS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;115    }
00000a  4770              BX       lr
;;;116    
                          ENDP

                  |L4.12|
                          DCD      0x5000c000

                          AREA ||i.FMC_EnableAPUpdate||, CODE, READONLY, ALIGN=2

                  FMC_EnableAPUpdate PROC
;;;127      */
;;;128    void FMC_EnableAPUpdate(void)
000000  4802              LDR      r0,|L5.12|
;;;129    {
;;;130        FMC->ISPCON |= FMC_ISPCON_APUEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  2208              MOVS     r2,#8
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;131    }
00000a  4770              BX       lr
;;;132    
                          ENDP

                  |L5.12|
                          DCD      0x5000c000

                          AREA ||i.FMC_EnableConfigUpdate||, CODE, READONLY, ALIGN=2

                  FMC_EnableConfigUpdate PROC
;;;143      */
;;;144    void FMC_EnableConfigUpdate(void)
000000  4802              LDR      r0,|L6.12|
;;;145    {
;;;146        FMC->ISPCON |= FMC_ISPCON_CFGUEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  2210              MOVS     r2,#0x10
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;147    }
00000a  4770              BX       lr
;;;148    
                          ENDP

                  |L6.12|
                          DCD      0x5000c000

                          AREA ||i.FMC_EnableLDUpdate||, CODE, READONLY, ALIGN=2

                  FMC_EnableLDUpdate PROC
;;;159      */
;;;160    void FMC_EnableLDUpdate(void)
000000  4802              LDR      r0,|L7.12|
;;;161    {
;;;162        FMC->ISPCON |= FMC_ISPCON_LDUEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  2220              MOVS     r2,#0x20
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;163    }
00000a  4770              BX       lr
;;;164    
                          ENDP

                  |L7.12|
                          DCD      0x5000c000

                          AREA ||i.FMC_GetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_GetBootSource PROC
;;;176      */
;;;177    int32_t FMC_GetBootSource(void)
000000  4803              LDR      r0,|L8.16|
;;;178    {
;;;179        if(FMC->ISPCON & FMC_ISPCON_BS_Msk)
000002  6800              LDR      r0,[r0,#0]
000004  0780              LSLS     r0,r0,#30
000006  d501              BPL      |L8.12|
;;;180            return 1;
000008  2001              MOVS     r0,#1
;;;181        else
;;;182            return 0;
;;;183    }
00000a  4770              BX       lr
                  |L8.12|
00000c  2000              MOVS     r0,#0                 ;182
00000e  4770              BX       lr
;;;184    
                          ENDP

                  |L8.16|
                          DCD      0x5000c000

                          AREA ||i.FMC_Open||, CODE, READONLY, ALIGN=2

                  FMC_Open PROC
;;;198      */
;;;199    void FMC_Open(void)
000000  4802              LDR      r0,|L9.12|
;;;200    {
;;;201        FMC->ISPCON |=  FMC_ISPCON_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  2201              MOVS     r2,#1
000006  4311              ORRS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;202    }
00000a  4770              BX       lr
;;;203    
                          ENDP

                  |L9.12|
                          DCD      0x5000c000

                          AREA ||i.FMC_Read||, CODE, READONLY, ALIGN=2

                  FMC_Read PROC
;;;260     */
;;;261    static __INLINE uint32_t FMC_Read(uint32_t u32addr)
000000  4906              LDR      r1,|L10.28|
;;;262    {
;;;263        FMC->ISPCMD = FMC_ISPCMD_READ; /* Set ISP Command Code */
000002  2200              MOVS     r2,#0
000004  60ca              STR      r2,[r1,#0xc]
;;;264        FMC->ISPADR = u32addr;         /* Set Target ROM Address. The address must be word alignment. */
000006  6048              STR      r0,[r1,#4]
;;;265        FMC->ISPTRG = 0x1;             /* Trigger to start ISP procedure */
000008  2001              MOVS     r0,#1
00000a  6108              STR      r0,[r1,#0x10]
;;;266        __ISB();                       /* To make sure ISP/CPU be Synchronized */
00000c  f3bf8f6f          ISB      
                  |L10.16|
;;;267        while(FMC->ISPTRG);            /* Waiting for ISP Done */
000010  6908              LDR      r0,[r1,#0x10]
000012  2800              CMP      r0,#0
000014  d1fc              BNE      |L10.16|
;;;268    
;;;269        return FMC->ISPDAT;
000016  6888              LDR      r0,[r1,#8]
;;;270    }
000018  4770              BX       lr
;;;271    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x5000c000

                          AREA ||i.FMC_ReadConfig||, CODE, READONLY, ALIGN=1

                  FMC_ReadConfig PROC
;;;232      */
;;;233    int32_t FMC_ReadConfig(uint32_t *u32Config, uint32_t u32Count)
000000  b5f8              PUSH     {r3-r7,lr}
;;;234    {
000002  460e              MOV      r6,r1
000004  4607              MOV      r7,r0
;;;235        int32_t i;
;;;236    
;;;237        for(i = 0; i < u32Count; i++)
000006  2400              MOVS     r4,#0
000008  e007              B        |L11.26|
                  |L11.10|
;;;238            u32Config[i] = FMC_Read(FMC_CONFIG_BASE + i * 4);
00000a  2003              MOVS     r0,#3
00000c  00a5              LSLS     r5,r4,#2
00000e  0500              LSLS     r0,r0,#20
000010  1828              ADDS     r0,r5,r0
000012  f7fffffe          BL       FMC_Read
000016  5178              STR      r0,[r7,r5]
000018  1c64              ADDS     r4,r4,#1
                  |L11.26|
00001a  42b4              CMP      r4,r6                 ;237
00001c  d3f5              BCC      |L11.10|
;;;239    
;;;240        return 0;
00001e  2000              MOVS     r0,#0
;;;241    }
000020  bdf8              POP      {r3-r7,pc}
;;;242    
                          ENDP


                          AREA ||i.FMC_ReadDataFlashBaseAddr||, CODE, READONLY, ALIGN=2

                  FMC_ReadDataFlashBaseAddr PROC
;;;213      */
;;;214    uint32_t FMC_ReadDataFlashBaseAddr(void)
000000  4801              LDR      r0,|L12.8|
;;;215    {
;;;216        return FMC->DFBADR;
000002  6940              LDR      r0,[r0,#0x14]
;;;217    }
000004  4770              BX       lr
;;;218    
                          ENDP

000006  0000              DCW      0x0000
                  |L12.8|
                          DCD      0x5000c000

                          AREA ||i.FMC_SetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_SetBootSource PROC
;;;43       */
;;;44     void FMC_SetBootSource(int32_t i32BootSrc)
000000  4904              LDR      r1,|L13.20|
;;;45     {
;;;46         if(i32BootSrc)
;;;47             FMC->ISPCON |= FMC_ISPCON_BS_Msk; /* Boot from LDROM */
000002  2202              MOVS     r2,#2
000004  2800              CMP      r0,#0                 ;46
;;;48         else
;;;49             FMC->ISPCON &= ~FMC_ISPCON_BS_Msk;/* Boot from APROM */
000006  6808              LDR      r0,[r1,#0]
000008  d001              BEQ      |L13.14|
00000a  4310              ORRS     r0,r0,r2              ;47
00000c  e000              B        |L13.16|
                  |L13.14|
00000e  4390              BICS     r0,r0,r2
                  |L13.16|
000010  6008              STR      r0,[r1,#0]            ;47
;;;50     }
000012  4770              BX       lr
;;;51     
                          ENDP

                  |L13.20|
                          DCD      0x5000c000

                          AREA ||i.FMC_WriteConfig||, CODE, READONLY, ALIGN=2

                  FMC_WriteConfig PROC
;;;257      */
;;;258    int32_t FMC_WriteConfig(uint32_t *u32Config, uint32_t u32Count)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;259    {
000002  b081              SUB      sp,sp,#4
000004  4607              MOV      r7,r0
;;;260        int32_t i;
;;;261    
;;;262        for(i = 0; i < u32Count; i++)
000006  2400              MOVS     r4,#0
000008  4d0f              LDR      r5,|L14.72|
00000a  e018              B        |L14.62|
                  |L14.12|
;;;263        {
;;;264            FMC_Write(FMC_CONFIG_BASE + i * 4, u32Config[i]);
00000c  00a6              LSLS     r6,r4,#2
00000e  2003              MOVS     r0,#3
000010  0500              LSLS     r0,r0,#20
000012  1830              ADDS     r0,r6,r0
000014  59b9              LDR      r1,[r7,r6]
000016  2221              MOVS     r2,#0x21
000018  60ea              STR      r2,[r5,#0xc]
00001a  6068              STR      r0,[r5,#4]
00001c  60a9              STR      r1,[r5,#8]
00001e  2101              MOVS     r1,#1
000020  6129              STR      r1,[r5,#0x10]
000022  f3bf8f6f          ISB      
                  |L14.38|
000026  6929              LDR      r1,[r5,#0x10]
000028  2900              CMP      r1,#0
00002a  d1fc              BNE      |L14.38|
;;;265            if(FMC_Read(FMC_CONFIG_BASE + i * 4) != u32Config[i])
00002c  f7fffffe          BL       FMC_Read
000030  59b9              LDR      r1,[r7,r6]
000032  4288              CMP      r0,r1
000034  d002              BEQ      |L14.60|
;;;266                return -1;
000036  2000              MOVS     r0,#0
000038  43c0              MVNS     r0,r0
;;;267        }
;;;268    
;;;269        return 0;
;;;270    }
00003a  bdfe              POP      {r1-r7,pc}
                  |L14.60|
00003c  1c64              ADDS     r4,r4,#1
                  |L14.62|
00003e  9802              LDR      r0,[sp,#8]            ;262
000040  4284              CMP      r4,r0                 ;262
000042  d3e3              BCC      |L14.12|
000044  2000              MOVS     r0,#0                 ;269
000046  bdfe              POP      {r1-r7,pc}
;;;271    
                          ENDP

                  |L14.72|
                          DCD      0x5000c000

;*** Start embedded assembler ***

#line 1 "Libraries\\StdDriver\\src\\fmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_15679c7a____REV16|
#line 118 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_fmc_c_15679c7a____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_15679c7a____REVSH|
#line 132
|__asm___5_fmc_c_15679c7a____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
