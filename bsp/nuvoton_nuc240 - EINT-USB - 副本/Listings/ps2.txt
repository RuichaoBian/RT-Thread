; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\ps2.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\ps2.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 -DRT_DEBUG --omf_browse=.\objects\ps2.crf Libraries\StdDriver\src\ps2.c]
                          THUMB

                          AREA ||i.PS2_Close||, CODE, READONLY, ALIGN=2

                  PS2_Close PROC
;;;101     */
;;;102    void PS2_Close(void)
000000  4802              LDR      r0,|L1.12|
;;;103    {
;;;104        /* Enable PS2 module */
;;;105        PS2->PS2CON &= ~PS2_PS2CON_PS2EN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  0849              LSRS     r1,r1,#1
000006  0049              LSLS     r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;106    }
00000a  4770              BX       lr
;;;107    
                          ENDP

                  |L1.12|
                          DCD      0x40100000

                          AREA ||i.PS2_DisableInt||, CODE, READONLY, ALIGN=2

                  PS2_DisableInt PROC
;;;61      */
;;;62     void PS2_DisableInt(uint32_t u32Mask)
000000  4902              LDR      r1,|L2.12|
;;;63     {
;;;64         PS2->PS2CON &= ~u32Mask;
000002  680a              LDR      r2,[r1,#0]
000004  4382              BICS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;65     }
000008  4770              BX       lr
;;;66     
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x40100000

                          AREA ||i.PS2_EnableInt||, CODE, READONLY, ALIGN=2

                  PS2_EnableInt PROC
;;;45      */
;;;46     void PS2_EnableInt(uint32_t u32Mask)
000000  4902              LDR      r1,|L3.12|
;;;47     {
;;;48         PS2->PS2CON |= u32Mask;
000002  680a              LDR      r2,[r1,#0]
000004  4302              ORRS     r2,r2,r0
000006  600a              STR      r2,[r1,#0]
;;;49     }
000008  4770              BX       lr
;;;50     
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40100000

                          AREA ||i.PS2_Open||, CODE, READONLY, ALIGN=2

                  PS2_Open PROC
;;;75      */
;;;76     void PS2_Open(void)
000000  2005              MOVS     r0,#5
;;;77     {
;;;78         /* Reset PS2 device */
;;;79         SYS->IPRSTC2 |=  SYS_IPRSTC2_PS2_RST_Msk;
000002  0700              LSLS     r0,r0,#28
000004  68c2              LDR      r2,[r0,#0xc]
000006  2101              MOVS     r1,#1
000008  05c9              LSLS     r1,r1,#23
00000a  430a              ORRS     r2,r2,r1
00000c  60c2              STR      r2,[r0,#0xc]
;;;80         SYS->IPRSTC2 &= ~SYS_IPRSTC2_PS2_RST_Msk;
00000e  68c2              LDR      r2,[r0,#0xc]
000010  438a              BICS     r2,r2,r1
000012  60c2              STR      r2,[r0,#0xc]
;;;81     
;;;82         /* Enable PS2 module */
;;;83         PS2->PS2CON |= PS2_PS2CON_PS2EN_Msk;
000014  4808              LDR      r0,|L4.56|
000016  6801              LDR      r1,[r0,#0]
000018  2201              MOVS     r2,#1
00001a  4311              ORRS     r1,r1,r2
00001c  6001              STR      r1,[r0,#0]
;;;84     
;;;85         /* Set One byte per transfer */
;;;86         PS2->PS2CON &= ~PS2_PS2CON_TXFIFO_DEPTH_Msk;
00001e  6801              LDR      r1,[r0,#0]
000020  2278              MOVS     r2,#0x78
000022  4391              BICS     r1,r1,r2
000024  6001              STR      r1,[r0,#0]
;;;87     
;;;88         /* Clear Tx FIFO */
;;;89         PS2->PS2CON |= PS2_PS2CON_CLRFIFO_Msk;
000026  6802              LDR      r2,[r0,#0]
000028  1581              ASRS     r1,r0,#22
00002a  430a              ORRS     r2,r2,r1
00002c  6002              STR      r2,[r0,#0]
;;;90         PS2->PS2CON &= (~PS2_PS2CON_CLRFIFO_Msk);
00002e  6802              LDR      r2,[r0,#0]
000030  438a              BICS     r2,r2,r1
000032  6002              STR      r2,[r0,#0]
;;;91     }
000034  4770              BX       lr
;;;92     
                          ENDP

000036  0000              DCW      0x0000
                  |L4.56|
                          DCD      0x40100000

                          AREA ||i.PS2_Read||, CODE, READONLY, ALIGN=2

                  PS2_Read PROC
;;;116     */
;;;117    uint8_t PS2_Read(void)
000000  4801              LDR      r0,|L5.8|
;;;118    {
;;;119        return (uint8_t)(PS2->PS2RXDATA & PS2_PS2RXDATA_RXDATA_Msk);
000002  6940              LDR      r0,[r0,#0x14]
000004  b2c0              UXTB     r0,r0
;;;120    }
000006  4770              BX       lr
;;;121    
                          ENDP

                  |L5.8|
                          DCD      0x40100000

                          AREA ||i.PS2_Write||, CODE, READONLY, ALIGN=2

                  PS2_Write PROC
;;;132     */
;;;133    int32_t PS2_Write(uint32_t *pu32Buf, uint32_t u32ByteCount)
000000  b5f8              PUSH     {r3-r7,lr}
;;;134    {
000002  4607              MOV      r7,r0
;;;135        uint32_t u32TxFIFO_Depth = 16;
000004  2010              MOVS     r0,#0x10
000006  460e              MOV      r6,r1                 ;134
;;;136        uint32_t u32delayno, txcnt, remainder;
;;;137        uint8_t i = 0;
;;;138    
;;;139        txcnt = u32ByteCount / u32TxFIFO_Depth;
000008  090c              LSRS     r4,r1,#4
;;;140    
;;;141        remainder = u32ByteCount % u32TxFIFO_Depth;
00000a  4601              MOV      r1,r0
00000c  9000              STR      r0,[sp,#0]
00000e  2500              MOVS     r5,#0                 ;137
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       __aeabi_uidivmod
;;;142        if(remainder) txcnt++;
000016  2900              CMP      r1,#0
000018  d000              BEQ      |L6.28|
00001a  1c64              ADDS     r4,r4,#1
                  |L6.28|
;;;143    
;;;144        u32delayno = 0;
00001c  2200              MOVS     r2,#0
;;;145        while(!(PS2->PS2STATUS & PS2_PS2STATUS_TXEMPTY_Msk))
00001e  e004              B        |L6.42|
                  |L6.32|
;;;146        {
;;;147            u32delayno++;
;;;148            if(u32delayno >= 0xF00000)
000020  200f              MOVS     r0,#0xf
000022  0500              LSLS     r0,r0,#20
000024  1c52              ADDS     r2,r2,#1
000026  4282              CMP      r2,r0
000028  d23a              BCS      |L6.160|
                  |L6.42|
00002a  4821              LDR      r0,|L6.176|
00002c  6983              LDR      r3,[r0,#0x18]         ;145
00002e  061b              LSLS     r3,r3,#24             ;145
000030  d5f6              BPL      |L6.32|
;;;149                return FALSE; // Time Out
;;;150        }
;;;151    
;;;152        if(u32ByteCount >= u32TxFIFO_Depth)//Tx FIFO is 16 bytes
000032  9a00              LDR      r2,[sp,#0]
000034  4296              CMP      r6,r2
000036  d309              BCC      |L6.76|
;;;153            PS2_SET_TX_BYTE_CNT(u32TxFIFO_Depth);
000038  4602              MOV      r2,r0
00003a  6812              LDR      r2,[r2,#0]
00003c  2378              MOVS     r3,#0x78
00003e  439a              BICS     r2,r2,r3
000040  9b00              LDR      r3,[sp,#0]
000042  00db              LSLS     r3,r3,#3
000044  3b08              SUBS     r3,r3,#8
000046  431a              ORRS     r2,r2,r3
000048  4603              MOV      r3,r0
00004a  601a              STR      r2,[r3,#0]
                  |L6.76|
;;;154    
;;;155        do
;;;156        {
;;;157            u32delayno = 0;
00004c  2200              MOVS     r2,#0
;;;158            while(!(PS2->PS2STATUS & PS2_PS2STATUS_TXEMPTY_Msk))
00004e  e004              B        |L6.90|
                  |L6.80|
;;;159            {
;;;160                u32delayno++;
;;;161                if(u32delayno >= 0xF00000)
000050  230f              MOVS     r3,#0xf
000052  051b              LSLS     r3,r3,#20
000054  1c52              ADDS     r2,r2,#1
000056  429a              CMP      r2,r3
000058  d222              BCS      |L6.160|
                  |L6.90|
00005a  6983              LDR      r3,[r0,#0x18]         ;158
00005c  061b              LSLS     r3,r3,#24             ;158
00005e  d5f7              BPL      |L6.80|
;;;162                    return FALSE; // Time Out
;;;163            }
;;;164    
;;;165            if((txcnt == 1) && (remainder != 0))
000060  2c01              CMP      r4,#1
000062  d108              BNE      |L6.118|
000064  2900              CMP      r1,#0
000066  d006              BEQ      |L6.118|
;;;166                PS2_SET_TX_BYTE_CNT(u32ByteCount);
000068  6802              LDR      r2,[r0,#0]
00006a  2378              MOVS     r3,#0x78
00006c  439a              BICS     r2,r2,r3
00006e  00f3              LSLS     r3,r6,#3
000070  3b08              SUBS     r3,r3,#8
000072  431a              ORRS     r2,r2,r3
000074  6002              STR      r2,[r0,#0]
                  |L6.118|
;;;167    
;;;168            PS2->PS2TXDATA0 = pu32Buf[i];
000076  00aa              LSLS     r2,r5,#2
000078  58bb              LDR      r3,[r7,r2]
00007a  6043              STR      r3,[r0,#4]
;;;169            PS2->PS2TXDATA1 = pu32Buf[i + 1];
00007c  19d2              ADDS     r2,r2,r7
00007e  6853              LDR      r3,[r2,#4]
000080  6083              STR      r3,[r0,#8]
;;;170            PS2->PS2TXDATA2 = pu32Buf[i + 2];
000082  6893              LDR      r3,[r2,#8]
000084  60c3              STR      r3,[r0,#0xc]
;;;171            PS2->PS2TXDATA3 = pu32Buf[i + 3];
000086  68d2              LDR      r2,[r2,#0xc]
000088  6102              STR      r2,[r0,#0x10]
00008a  1d2d              ADDS     r5,r5,#4
;;;172    
;;;173            i = i + 4;
00008c  b2ed              UXTB     r5,r5
00008e  1e64              SUBS     r4,r4,#1
;;;174    
;;;175        }
;;;176        while(--txcnt);
000090  d1dc              BNE      |L6.76|
;;;177    
;;;178        u32delayno = 0;
000092  2100              MOVS     r1,#0
000094  220f              MOVS     r2,#0xf               ;148
000096  0512              LSLS     r2,r2,#20             ;148
;;;179        while(!(PS2->PS2STATUS & PS2_PS2STATUS_TXEMPTY_Msk))
000098  e004              B        |L6.164|
                  |L6.154|
00009a  1c49              ADDS     r1,r1,#1
;;;180        {
;;;181            u32delayno++;
;;;182            if(u32delayno >= 0xF00000)
00009c  4291              CMP      r1,r2
00009e  d301              BCC      |L6.164|
                  |L6.160|
;;;183                return FALSE; // Time Out
0000a0  2000              MOVS     r0,#0
;;;184        }
;;;185    
;;;186        return TRUE;
;;;187    
;;;188    }
0000a2  bdf8              POP      {r3-r7,pc}
                  |L6.164|
0000a4  6983              LDR      r3,[r0,#0x18]         ;179
0000a6  061b              LSLS     r3,r3,#24             ;179
0000a8  d5f7              BPL      |L6.154|
0000aa  2001              MOVS     r0,#1                 ;186
0000ac  bdf8              POP      {r3-r7,pc}
;;;189    
                          ENDP

0000ae  0000              DCW      0x0000
                  |L6.176|
                          DCD      0x40100000

;*** Start embedded assembler ***

#line 1 "Libraries\\StdDriver\\src\\ps2.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_ps2_c_cffc13e8____REV16|
#line 118 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_ps2_c_cffc13e8____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_ps2_c_cffc13e8____REVSH|
#line 132
|__asm___5_ps2_c_cffc13e8____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
