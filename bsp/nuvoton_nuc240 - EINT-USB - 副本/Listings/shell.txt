; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\shell.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\shell.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 -DRT_DEBUG --omf_browse=.\objects\shell.crf ..\..\components\finsh\shell.c]
                          THUMB

                          AREA ||i.finsh_get_device||, CODE, READONLY, ALIGN=2

                  finsh_get_device PROC
;;;142     */
;;;143    const char *finsh_get_device()
000000  b510              PUSH     {r4,lr}
;;;144    {
;;;145        RT_ASSERT(shell != RT_NULL);
000002  4c07              LDR      r4,|L1.32|
000004  6820              LDR      r0,[r4,#0]  ; shell
000006  2800              CMP      r0,#0
000008  d104              BNE      |L1.20|
00000a  2291              MOVS     r2,#0x91
00000c  4905              LDR      r1,|L1.36|
00000e  a006              ADR      r0,|L1.40|
000010  f7fffffe          BL       rt_assert_handler
                  |L1.20|
;;;146        return shell->device->parent.name;
000014  6820              LDR      r0,[r4,#0]  ; shell
000016  30ff              ADDS     r0,r0,#0xff
000018  3001              ADDS     r0,#1
00001a  6940              LDR      r0,[r0,#0x14]
;;;147    }
00001c  bd10              POP      {r4,pc}
;;;148    
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      ||.data||
                  |L1.36|
                          DCD      ||.constdata||+0x1e
                  |L1.40|
000028  7368656c          DCB      "shell != RT_NULL",0
00002c  6c20213d
000030  2052545f
000034  4e554c4c
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i.finsh_get_echo||, CODE, READONLY, ALIGN=2

                  finsh_get_echo PROC
;;;170     */
;;;171    rt_uint32_t finsh_get_echo()
000000  b510              PUSH     {r4,lr}
;;;172    {
;;;173        RT_ASSERT(shell != RT_NULL);
000002  4c07              LDR      r4,|L2.32|
000004  6820              LDR      r0,[r4,#0]  ; shell
000006  2800              CMP      r0,#0
000008  d104              BNE      |L2.20|
00000a  22ad              MOVS     r2,#0xad
00000c  4905              LDR      r1,|L2.36|
00000e  a006              ADR      r0,|L2.40|
000010  f7fffffe          BL       rt_assert_handler
                  |L2.20|
;;;174    
;;;175        return shell->echo_mode;
000014  6820              LDR      r0,[r4,#0]  ; shell
000016  3020              ADDS     r0,r0,#0x20
000018  7840              LDRB     r0,[r0,#1]
00001a  07c0              LSLS     r0,r0,#31
00001c  0fc0              LSRS     r0,r0,#31
;;;176    }
00001e  bd10              POP      {r4,pc}
;;;177    
                          ENDP

                  |L2.32|
                          DCD      ||.data||
                  |L2.36|
                          DCD      ||.constdata||+0x3e
                  |L2.40|
000028  7368656c          DCB      "shell != RT_NULL",0
00002c  6c20213d
000030  2052545f
000034  4e554c4c
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i.finsh_run_line||, CODE, READONLY, ALIGN=2

                  finsh_run_line PROC
;;;286    #ifndef FINSH_USING_MSH_ONLY
;;;287    void finsh_run_line(struct finsh_parser *parser, const char *line)
000000  b570              PUSH     {r4-r6,lr}
;;;288    {
000002  4604              MOV      r4,r0
;;;289        const char *err_str;
;;;290    
;;;291        if(shell->echo_mode)
000004  4824              LDR      r0,|L3.152|
000006  460d              MOV      r5,r1                 ;288
000008  6800              LDR      r0,[r0,#0]  ; shell
00000a  3020              ADDS     r0,r0,#0x20
00000c  7840              LDRB     r0,[r0,#1]
00000e  07c0              LSLS     r0,r0,#31
000010  d002              BEQ      |L3.24|
;;;292            rt_kprintf("\n");
000012  a022              ADR      r0,|L3.156|
000014  f7fffffe          BL       rt_kprintf
                  |L3.24|
;;;293        finsh_parser_run(parser, (unsigned char *)line);
000018  4629              MOV      r1,r5
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       finsh_parser_run
;;;294    
;;;295        /* compile node root */
;;;296        if (finsh_errno() == 0)
000020  f7fffffe          BL       finsh_errno
000024  2800              CMP      r0,#0
000026  d00c              BEQ      |L3.66|
;;;297        {
;;;298            finsh_compiler_run(parser->root);
;;;299        }
;;;300        else
;;;301        {
;;;302            err_str = finsh_error_string(finsh_errno());
000028  f7fffffe          BL       finsh_errno
00002c  f7fffffe          BL       finsh_error_string
000030  4601              MOV      r1,r0
;;;303            rt_kprintf("%s\n", err_str);
000032  a01b              ADR      r0,|L3.160|
000034  f7fffffe          BL       rt_kprintf
                  |L3.56|
;;;304        }
;;;305    
;;;306        /* run virtual machine */
;;;307        if (finsh_errno() == 0)
000038  f7fffffe          BL       finsh_errno
00003c  2800              CMP      r0,#0
00003e  d005              BEQ      |L3.76|
000040  e025              B        |L3.142|
                  |L3.66|
000042  2098              MOVS     r0,#0x98              ;298
000044  5900              LDR      r0,[r0,r4]            ;298
000046  f7fffffe          BL       finsh_compiler_run
00004a  e7f5              B        |L3.56|
                  |L3.76|
;;;308        {
;;;309            char ch;
;;;310            finsh_vm_run();
00004c  f7fffffe          BL       finsh_vm_run
;;;311    
;;;312            ch = (unsigned char)finsh_stack_bottom();
000050  f7fffffe          BL       finsh_stack_bottom
000054  b2c0              UXTB     r0,r0
000056  3821              SUBS     r0,r0,#0x21
;;;313            if (ch > 0x20 && ch < 0x7e)
000058  285d              CMP      r0,#0x5d
00005a  d20e              BCS      |L3.122|
;;;314            {
;;;315                rt_kprintf("\t'%c', %d, 0x%08x\n",
00005c  f7fffffe          BL       finsh_stack_bottom
000060  4605              MOV      r5,r0
000062  f7fffffe          BL       finsh_stack_bottom
000066  4606              MOV      r6,r0
000068  f7fffffe          BL       finsh_stack_bottom
00006c  b2c1              UXTB     r1,r0
00006e  462b              MOV      r3,r5
000070  4632              MOV      r2,r6
000072  a00c              ADR      r0,|L3.164|
000074  f7fffffe          BL       rt_kprintf
000078  e009              B        |L3.142|
                  |L3.122|
;;;316                           (unsigned char)finsh_stack_bottom(),
;;;317                           (unsigned int)finsh_stack_bottom(),
;;;318                           (unsigned int)finsh_stack_bottom());
;;;319            }
;;;320            else
;;;321            {
;;;322                rt_kprintf("\t%d, 0x%08x\n",
00007a  f7fffffe          BL       finsh_stack_bottom
00007e  4605              MOV      r5,r0
000080  f7fffffe          BL       finsh_stack_bottom
000084  4601              MOV      r1,r0
000086  462a              MOV      r2,r5
000088  a00b              ADR      r0,|L3.184|
00008a  f7fffffe          BL       rt_kprintf
                  |L3.142|
;;;323                           (unsigned int)finsh_stack_bottom(),
;;;324                           (unsigned int)finsh_stack_bottom());
;;;325            }
;;;326        }
;;;327    
;;;328        finsh_flush(parser);
00008e  4620              MOV      r0,r4
000090  f7fffffe          BL       finsh_flush
;;;329    }
000094  bd70              POP      {r4-r6,pc}
;;;330    #endif
                          ENDP

000096  0000              DCW      0x0000
                  |L3.152|
                          DCD      ||.data||
                  |L3.156|
00009c  0a00              DCB      "\n",0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L3.160|
0000a0  25730a00          DCB      "%s\n",0
                  |L3.164|
0000a4  09272563          DCB      "\t'%c', %d, 0x%08x\n",0
0000a8  272c2025
0000ac  642c2030
0000b0  78253038
0000b4  780a00  
0000b7  00                DCB      0
                  |L3.184|
0000b8  0925642c          DCB      "\t%d, 0x%08x\n",0
0000bc  20307825
0000c0  3038780a
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0

                          AREA ||i.finsh_rx_ind||, CODE, READONLY, ALIGN=2

                  finsh_rx_ind PROC
;;;84     
;;;85     static rt_err_t finsh_rx_ind(rt_device_t dev, rt_size_t size)
000000  b510              PUSH     {r4,lr}
;;;86     {
;;;87         RT_ASSERT(shell != RT_NULL);
000002  4c07              LDR      r4,|L4.32|
000004  6820              LDR      r0,[r4,#0]  ; shell
000006  2800              CMP      r0,#0
000008  d104              BNE      |L4.20|
00000a  2257              MOVS     r2,#0x57
00000c  4905              LDR      r1,|L4.36|
00000e  a006              ADR      r0,|L4.40|
000010  f7fffffe          BL       rt_assert_handler
                  |L4.20|
;;;88     
;;;89         /* release semaphore to let finsh thread rx data */
;;;90         rt_sem_release(&shell->rx_sem);
000014  6820              LDR      r0,[r4,#0]  ; shell
000016  f7fffffe          BL       rt_sem_release
;;;91     
;;;92         return RT_EOK;
00001a  2000              MOVS     r0,#0
;;;93     }
00001c  bd10              POP      {r4,pc}
;;;94     
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      ||.data||
                  |L4.36|
                          DCD      ||.constdata||
                  |L4.40|
000028  7368656c          DCB      "shell != RT_NULL",0
00002c  6c20213d
000030  2052545f
000034  4e554c4c
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i.finsh_set_device||, CODE, READONLY, ALIGN=2

                  finsh_set_device PROC
;;;101     */
;;;102    void finsh_set_device(const char *device_name)
000000  b570              PUSH     {r4-r6,lr}
;;;103    {
;;;104        rt_device_t dev = RT_NULL;
;;;105    
;;;106        RT_ASSERT(shell != RT_NULL);
000002  4d20              LDR      r5,|L5.132|
000004  4606              MOV      r6,r0                 ;103
000006  6828              LDR      r0,[r5,#0]  ; shell
000008  2800              CMP      r0,#0
00000a  d104              BNE      |L5.22|
00000c  226a              MOVS     r2,#0x6a
00000e  491e              LDR      r1,|L5.136|
000010  a01e              ADR      r0,|L5.140|
000012  f7fffffe          BL       rt_assert_handler
                  |L5.22|
;;;107        dev = rt_device_find(device_name);
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       rt_device_find
00001c  0004              MOVS     r4,r0
;;;108        if (dev == RT_NULL)
00001e  d02c              BEQ      |L5.122|
;;;109        {
;;;110            rt_kprintf("finsh: can not find device: %s\n", device_name);
;;;111            return;
;;;112        }
;;;113    
;;;114        /* check whether it's a same device */
;;;115        if (dev == shell->device) return;
000020  6828              LDR      r0,[r5,#0]  ; shell
000022  30ff              ADDS     r0,r0,#0xff
000024  3001              ADDS     r0,#1
000026  6940              LDR      r0,[r0,#0x14]
000028  42a0              CMP      r0,r4
00002a  d025              BEQ      |L5.120|
;;;116        /* open this device and set the new device in finsh shell */
;;;117        if (rt_device_open(dev, RT_DEVICE_OFLAG_RDWR | RT_DEVICE_FLAG_INT_RX | \
00002c  21ff              MOVS     r1,#0xff
00002e  3144              ADDS     r1,r1,#0x44
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       rt_device_open
000036  2800              CMP      r0,#0
000038  d11e              BNE      |L5.120|
;;;118                           RT_DEVICE_FLAG_STREAM) == RT_EOK)
;;;119        {
;;;120            if (shell->device != RT_NULL)
00003a  6828              LDR      r0,[r5,#0]  ; shell
00003c  30ff              ADDS     r0,r0,#0xff
00003e  3001              ADDS     r0,#1
000040  6940              LDR      r0,[r0,#0x14]
000042  2800              CMP      r0,#0
000044  d008              BEQ      |L5.88|
;;;121            {
;;;122                /* close old finsh device */
;;;123                rt_device_close(shell->device);
000046  f7fffffe          BL       rt_device_close
;;;124                rt_device_set_rx_indicate(shell->device, RT_NULL);
00004a  6828              LDR      r0,[r5,#0]  ; shell
00004c  2100              MOVS     r1,#0
00004e  30ff              ADDS     r0,r0,#0xff
000050  3001              ADDS     r0,#1
000052  6940              LDR      r0,[r0,#0x14]
000054  f7fffffe          BL       rt_device_set_rx_indicate
                  |L5.88|
;;;125            }
;;;126    
;;;127            /* clear line buffer before switch to new device */
;;;128            memset(shell->line, 0, sizeof(shell->line));
000058  6828              LDR      r0,[r5,#0]  ; shell
00005a  2150              MOVS     r1,#0x50
00005c  30c0              ADDS     r0,r0,#0xc0
00005e  f7fffffe          BL       __aeabi_memclr4
;;;129            shell->line_curpos = shell->line_position = 0;
000062  6828              LDR      r0,[r5,#0]  ; shell
000064  2100              MOVS     r1,#0
000066  30ff              ADDS     r0,r0,#0xff
000068  3001              ADDS     r0,#1
00006a  7401              STRB     r1,[r0,#0x10]
00006c  7441              STRB     r1,[r0,#0x11]
;;;130    
;;;131            shell->device = dev;
;;;132            rt_device_set_rx_indicate(dev, finsh_rx_ind);
00006e  6144              STR      r4,[r0,#0x14]
000070  490b              LDR      r1,|L5.160|
000072  4620              MOV      r0,r4
000074  f7fffffe          BL       rt_device_set_rx_indicate
                  |L5.120|
;;;133        }
;;;134    }
000078  bd70              POP      {r4-r6,pc}
                  |L5.122|
00007a  4631              MOV      r1,r6                 ;110
00007c  a009              ADR      r0,|L5.164|
00007e  f7fffffe          BL       rt_kprintf
000082  bd70              POP      {r4-r6,pc}
;;;135    
                          ENDP

                  |L5.132|
                          DCD      ||.data||
                  |L5.136|
                          DCD      ||.constdata||+0xd
                  |L5.140|
00008c  7368656c          DCB      "shell != RT_NULL",0
000090  6c20213d
000094  2052545f
000098  4e554c4c
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
                  |L5.160|
                          DCD      finsh_rx_ind
                  |L5.164|
0000a4  66696e73          DCB      "finsh: can not find device: %s\n",0
0000a8  683a2063
0000ac  616e206e
0000b0  6f742066
0000b4  696e6420
0000b8  64657669
0000bc  63653a20
0000c0  25730a00

                          AREA ||i.finsh_set_echo||, CODE, READONLY, ALIGN=2

                  finsh_set_echo PROC
;;;157     */
;;;158    void finsh_set_echo(rt_uint32_t echo)
000000  b570              PUSH     {r4-r6,lr}
;;;159    {
;;;160        RT_ASSERT(shell != RT_NULL);
000002  4d07              LDR      r5,|L6.32|
000004  4604              MOV      r4,r0                 ;159
000006  6829              LDR      r1,[r5,#0]  ; shell
000008  2900              CMP      r1,#0
00000a  d104              BNE      |L6.22|
00000c  22a0              MOVS     r2,#0xa0
00000e  4905              LDR      r1,|L6.36|
000010  a005              ADR      r0,|L6.40|
000012  f7fffffe          BL       rt_assert_handler
                  |L6.22|
;;;161        shell->echo_mode = (rt_uint8_t)echo;
000016  6828              LDR      r0,[r5,#0]  ; shell
000018  3020              ADDS     r0,r0,#0x20
00001a  7044              STRB     r4,[r0,#1]
;;;162    }
00001c  bd70              POP      {r4-r6,pc}
;;;163    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      ||.data||
                  |L6.36|
                          DCD      ||.constdata||+0x2f
                  |L6.40|
000028  7368656c          DCB      "shell != RT_NULL",0
00002c  6c20213d
000030  2052545f
000034  4e554c4c
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i.finsh_system_function_init||, CODE, READONLY, ALIGN=2

                  finsh_system_function_init PROC
;;;652    
;;;653    void finsh_system_function_init(const void *begin, const void *end)
000000  4a02              LDR      r2,|L7.12|
;;;654    {
;;;655        _syscall_table_begin = (struct finsh_syscall *) begin;
;;;656        _syscall_table_end = (struct finsh_syscall *) end;
000002  6010              STR      r0,[r2,#0]  ; _syscall_table_begin
000004  4802              LDR      r0,|L7.16|
000006  6001              STR      r1,[r0,#0]  ; _syscall_table_end
;;;657    }
000008  4770              BX       lr
;;;658    
                          ENDP

00000a  0000              DCW      0x0000
                  |L7.12|
                          DCD      _syscall_table_begin
                  |L7.16|
                          DCD      _syscall_table_end

                          AREA ||i.finsh_system_init||, CODE, READONLY, ALIGN=2

                  finsh_system_init PROC
;;;703     */
;;;704    int finsh_system_init(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;705    {
;;;706        rt_err_t result;
;;;707    
;;;708    #ifdef FINSH_USING_SYMTAB
;;;709    #ifdef __CC_ARM                 /* ARM C Compiler */
;;;710        extern const int FSymTab$$Base;
;;;711        extern const int FSymTab$$Limit;
;;;712        extern const int VSymTab$$Base;
;;;713        extern const int VSymTab$$Limit;
;;;714        finsh_system_function_init(&FSymTab$$Base, &FSymTab$$Limit);
000002  491b              LDR      r1,|L8.112|
000004  481b              LDR      r0,|L8.116|
000006  f7fffffe          BL       finsh_system_function_init
;;;715    #ifndef FINSH_USING_MSH_ONLY
;;;716        finsh_system_var_init(&VSymTab$$Base, &VSymTab$$Limit);
00000a  491b              LDR      r1,|L8.120|
00000c  481b              LDR      r0,|L8.124|
00000e  f7fffffe          BL       finsh_system_var_init
;;;717    #endif
;;;718    #elif defined (__ICCARM__) || defined(__ICCRX__)      /* for IAR Compiler */
;;;719        finsh_system_function_init(__section_begin("FSymTab"),
;;;720                                   __section_end("FSymTab"));
;;;721        finsh_system_var_init(__section_begin("VSymTab"),
;;;722                              __section_end("VSymTab"));
;;;723    #elif defined (__GNUC__) || defined(__TI_COMPILER_VERSION__)
;;;724        /* GNU GCC Compiler and TI CCS */
;;;725        extern const int __fsymtab_start;
;;;726        extern const int __fsymtab_end;
;;;727        extern const int __vsymtab_start;
;;;728        extern const int __vsymtab_end;
;;;729        finsh_system_function_init(&__fsymtab_start, &__fsymtab_end);
;;;730        finsh_system_var_init(&__vsymtab_start, &__vsymtab_end);
;;;731    #elif defined(__ADSPBLACKFIN__) /* for VisualDSP++ Compiler */
;;;732        finsh_system_function_init(&__fsymtab_start, &__fsymtab_end);
;;;733        finsh_system_var_init(&__vsymtab_start, &__vsymtab_end);
;;;734    #elif defined(_MSC_VER)
;;;735        unsigned int *ptr_begin, *ptr_end;
;;;736    
;;;737        ptr_begin = (unsigned int *)&__fsym_begin;
;;;738        ptr_begin += (sizeof(struct finsh_syscall) / sizeof(unsigned int));
;;;739        while (*ptr_begin == 0) ptr_begin ++;
;;;740    
;;;741        ptr_end = (unsigned int *) &__fsym_end;
;;;742        ptr_end --;
;;;743        while (*ptr_end == 0) ptr_end --;
;;;744    
;;;745        finsh_system_function_init(ptr_begin, ptr_end);
;;;746    #endif
;;;747    #endif
;;;748    
;;;749        /* create or set shell structure */
;;;750    #ifdef RT_USING_HEAP
;;;751        shell = (struct finsh_shell *)rt_malloc(sizeof(struct finsh_shell));
000012  25ff              MOVS     r5,#0xff
000014  3519              ADDS     r5,r5,#0x19
000016  4628              MOV      r0,r5
000018  f7fffffe          BL       rt_malloc
00001c  4c18              LDR      r4,|L8.128|
;;;752        if (shell == RT_NULL)
00001e  2800              CMP      r0,#0
000020  6020              STR      r0,[r4,#0]  ; shell
000022  d018              BEQ      |L8.86|
;;;753        {
;;;754            rt_kprintf("no memory for shell\n");
;;;755            return -1;
;;;756        }
;;;757    #else
;;;758        shell = &_shell;
;;;759    #endif
;;;760    
;;;761        memset(shell, 0, sizeof(struct finsh_shell));
000024  4629              MOV      r1,r5
000026  f7fffffe          BL       __aeabi_memclr4
;;;762    
;;;763        rt_sem_init(&(shell->rx_sem), "shrx", 0, 0);
00002a  2300              MOVS     r3,#0
00002c  461a              MOV      r2,r3
00002e  a115              ADR      r1,|L8.132|
000030  6820              LDR      r0,[r4,#0]  ; shell
000032  f7fffffe          BL       rt_sem_init
;;;764        result = rt_thread_init(&finsh_thread,
000036  2101              MOVS     r1,#1
000038  4814              LDR      r0,|L8.140|
00003a  230a              MOVS     r3,#0xa
00003c  2219              MOVS     r2,#0x19
00003e  0249              LSLS     r1,r1,#9
000040  466e              MOV      r6,sp
000042  c60f              STM      r6!,{r0-r3}
000044  2300              MOVS     r3,#0
000046  4a12              LDR      r2,|L8.144|
000048  a112              ADR      r1,|L8.148|
00004a  3880              SUBS     r0,r0,#0x80
00004c  f7fffffe          BL       rt_thread_init
;;;765                                "tshell",
;;;766                                finsh_thread_entry, RT_NULL,
;;;767                                &finsh_thread_stack[0], sizeof(finsh_thread_stack),
;;;768                                FINSH_THREAD_PRIORITY, 10);
;;;769    
;;;770        if (result == RT_EOK)
000050  2800              CMP      r0,#0
000052  d007              BEQ      |L8.100|
000054  e00a              B        |L8.108|
                  |L8.86|
000056  a011              ADR      r0,|L8.156|
000058  f7fffffe          BL       rt_kprintf
00005c  2000              MOVS     r0,#0                 ;755
00005e  43c0              MVNS     r0,r0                 ;755
                  |L8.96|
;;;771            rt_thread_startup(&finsh_thread);
;;;772        return 0;
;;;773    }
000060  b004              ADD      sp,sp,#0x10
000062  bd70              POP      {r4-r6,pc}
                  |L8.100|
000064  4809              LDR      r0,|L8.140|
000066  3880              SUBS     r0,r0,#0x80           ;771
000068  f7fffffe          BL       rt_thread_startup
                  |L8.108|
00006c  2000              MOVS     r0,#0                 ;772
00006e  e7f7              B        |L8.96|
;;;774    INIT_COMPONENT_EXPORT(finsh_system_init);
                          ENDP

                  |L8.112|
                          DCD      ||FSymTab$$Limit||
                  |L8.116|
                          DCD      ||FSymTab$$Base||
                  |L8.120|
                          DCD      ||VSymTab$$Limit||
                  |L8.124|
                          DCD      ||VSymTab$$Base||
                  |L8.128|
                          DCD      ||.data||
                  |L8.132|
000084  73687278          DCB      "shrx",0
000088  00      
000089  00                DCB      0
00008a  00                DCB      0
00008b  00                DCB      0
                  |L8.140|
                          DCD      ||.bss||+0x80
                  |L8.144|
                          DCD      finsh_thread_entry
                  |L8.148|
000094  74736865          DCB      "tshell",0
000098  6c6c00  
00009b  00                DCB      0
                  |L8.156|
00009c  6e6f206d          DCB      "no memory for shell\n",0
0000a0  656d6f72
0000a4  7920666f
0000a8  72207368
0000ac  656c6c0a
0000b0  00      
0000b1  00                DCB      0
0000b2  00                DCB      0
0000b3  00                DCB      0

                          AREA ||i.finsh_system_var_init||, CODE, READONLY, ALIGN=2

                  finsh_system_var_init PROC
;;;658    
;;;659    void finsh_system_var_init(const void *begin, const void *end)
000000  4a02              LDR      r2,|L9.12|
;;;660    {
;;;661        _sysvar_table_begin = (struct finsh_sysvar *) begin;
;;;662        _sysvar_table_end = (struct finsh_sysvar *) end;
000002  6010              STR      r0,[r2,#0]  ; _sysvar_table_begin
000004  4802              LDR      r0,|L9.16|
000006  6001              STR      r1,[r0,#0]  ; _sysvar_table_end
;;;663    }
000008  4770              BX       lr
;;;664    
                          ENDP

00000a  0000              DCW      0x0000
                  |L9.12|
                          DCD      _sysvar_table_begin
                  |L9.16|
                          DCD      _sysvar_table_end

                          AREA ||i.finsh_thread_entry||, CODE, READONLY, ALIGN=2

                  finsh_thread_entry PROC
;;;385    #endif
;;;386    void finsh_thread_entry(void *parameter)
000000  b51c              PUSH     {r2-r4,lr}
;;;387    {
;;;388        char ch;
;;;389    
;;;390        /* normal is echo mode */
;;;391        shell->echo_mode = 1;
000002  4dc4              LDR      r5,|L10.788|
000004  2701              MOVS     r7,#1
000006  6828              LDR      r0,[r5,#0]  ; shell
000008  2121              MOVS     r1,#0x21
00000a  540f              STRB     r7,[r1,r0]
00000c  3024              ADDS     r0,r0,#0x24
;;;392    
;;;393    #ifndef FINSH_USING_MSH_ONLY
;;;394        finsh_init(&shell->parser);
00000e  f7fffffe          BL       finsh_init
;;;395    #endif
;;;396    
;;;397        /* set console device as shell device */
;;;398        if (shell->device == RT_NULL)
000012  6828              LDR      r0,[r5,#0]  ; shell
000014  30ff              ADDS     r0,r0,#0xff
000016  3001              ADDS     r0,#1
000018  6940              LDR      r0,[r0,#0x14]
00001a  2800              CMP      r0,#0
00001c  d11c              BNE      |L10.88|
;;;399        {
;;;400    #ifdef RT_USING_CONSOLE
;;;401            shell->device = rt_console_get_device();
00001e  f7fffffe          BL       rt_console_get_device
000022  6829              LDR      r1,[r5,#0]  ; shell
000024  31ff              ADDS     r1,r1,#0xff
000026  3101              ADDS     r1,#1
;;;402            RT_ASSERT(shell->device);
000028  6148              STR      r0,[r1,#0x14]
00002a  2800              CMP      r0,#0
00002c  d105              BNE      |L10.58|
00002e  22ff              MOVS     r2,#0xff
000030  3293              ADDS     r2,r2,#0x93
000032  49b9              LDR      r1,|L10.792|
000034  a0b9              ADR      r0,|L10.796|
000036  f7fffffe          BL       rt_assert_handler
                  |L10.58|
;;;403            rt_device_set_rx_indicate(shell->device, finsh_rx_ind);
00003a  6828              LDR      r0,[r5,#0]  ; shell
00003c  49bb              LDR      r1,|L10.812|
00003e  30ff              ADDS     r0,r0,#0xff
000040  3001              ADDS     r0,#1
000042  6940              LDR      r0,[r0,#0x14]
000044  f7fffffe          BL       rt_device_set_rx_indicate
;;;404            rt_device_open(shell->device, (RT_DEVICE_OFLAG_RDWR | RT_DEVICE_FLAG_STREAM | RT_DEVICE_FLAG_INT_RX));
000048  6828              LDR      r0,[r5,#0]  ; shell
00004a  21ff              MOVS     r1,#0xff
00004c  30ff              ADDS     r0,r0,#0xff
00004e  3001              ADDS     r0,#1
000050  6940              LDR      r0,[r0,#0x14]
000052  3144              ADDS     r1,r1,#0x44
000054  f7fffffe          BL       rt_device_open
                  |L10.88|
;;;405    #else
;;;406            RT_ASSERT(shell->device);
;;;407    #endif
;;;408        }
;;;409    
;;;410    #ifdef FINSH_USING_AUTH
;;;411        /* set the default password when the password isn't setting */
;;;412        if (rt_strlen(finsh_get_password()) == 0)
;;;413            RT_ASSERT(finsh_set_password(FINSH_DEFAULT_PASSWORD) == RT_EOK);
;;;414        /* waiting authenticate success */
;;;415        finsh_wait_auth();
;;;416    #endif
;;;417    
;;;418        rt_kprintf(FINSH_PROMPT);
000058  a0b5              ADR      r0,|L10.816|
00005a  f7fffffe          BL       rt_kprintf
00005e  2400              MOVS     r4,#0
                  |L10.96|
;;;419    
;;;420        while (1)
;;;421        {
;;;422            /* wait receive */
;;;423            if (rt_sem_take(&shell->rx_sem, RT_WAITING_FOREVER) != RT_EOK) continue;
000060  2100              MOVS     r1,#0
000062  43c9              MVNS     r1,r1
000064  6828              LDR      r0,[r5,#0]  ; shell
000066  f7fffffe          BL       rt_sem_take
00006a  2800              CMP      r0,#0
00006c  d1f8              BNE      |L10.96|
                  |L10.110|
00006e  e144              B        |L10.762|
                  |L10.112|
;;;424    
;;;425            /* read one character from device */
;;;426            while (rt_device_read(shell->device, 0, &ch, 1) == 1)
;;;427            {
;;;428                /*
;;;429                 * handle control key
;;;430                 * up key  : 0x1b 0x5b 0x41
;;;431                 * down key: 0x1b 0x5b 0x42
;;;432                 * right key:0x1b 0x5b 0x43
;;;433                 * left key: 0x1b 0x5b 0x44
;;;434                 */
;;;435                if (ch == 0x1b)
000070  4668              MOV      r0,sp
000072  7801              LDRB     r1,[r0,#0]
000074  6828              LDR      r0,[r5,#0]  ; shell
000076  291b              CMP      r1,#0x1b
000078  d007              BEQ      |L10.138|
;;;436                {
;;;437                    shell->stat = WAIT_SPEC_KEY;
;;;438                    continue;
;;;439                }
;;;440                else if (shell->stat == WAIT_SPEC_KEY)
00007a  4602              MOV      r2,r0
00007c  3220              ADDS     r2,r2,#0x20
00007e  7813              LDRB     r3,[r2,#0]
000080  2b01              CMP      r3,#1
000082  d005              BEQ      |L10.144|
;;;441                {
;;;442                    if (ch == 0x5b)
;;;443                    {
;;;444                        shell->stat = WAIT_FUNC_KEY;
;;;445                        continue;
;;;446                    }
;;;447    
;;;448                    shell->stat = WAIT_NORMAL;
;;;449                }
;;;450                else if (shell->stat == WAIT_FUNC_KEY)
000084  2b02              CMP      r3,#2
000086  d00a              BEQ      |L10.158|
000088  e012              B        |L10.176|
                  |L10.138|
00008a  3020              ADDS     r0,r0,#0x20
00008c  7007              STRB     r7,[r0,#0]            ;437
00008e  e134              B        |L10.762|
                  |L10.144|
000090  295b              CMP      r1,#0x5b              ;442
000092  d001              BEQ      |L10.152|
000094  7014              STRB     r4,[r2,#0]            ;448
000096  e00b              B        |L10.176|
                  |L10.152|
000098  2002              MOVS     r0,#2                 ;444
00009a  7010              STRB     r0,[r2,#0]            ;444
00009c  e12d              B        |L10.762|
                  |L10.158|
;;;451                {
;;;452                    shell->stat = WAIT_NORMAL;
00009e  7014              STRB     r4,[r2,#0]
;;;453    
;;;454                    if (ch == 0x41) /* up key */
0000a0  2941              CMP      r1,#0x41
0000a2  d0e4              BEQ      |L10.110|
;;;455                    {
;;;456    #ifdef FINSH_USING_HISTORY
;;;457                        /* prev history */
;;;458                        if (shell->current_history > 0)
;;;459                            shell->current_history --;
;;;460                        else
;;;461                        {
;;;462                            shell->current_history = 0;
;;;463                            continue;
;;;464                        }
;;;465    
;;;466                        /* copy the history command */
;;;467                        memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
;;;468                               FINSH_CMD_SIZE);
;;;469                        shell->line_curpos = shell->line_position = strlen(shell->line);
;;;470                        shell_handle_history(shell);
;;;471    #endif
;;;472                        continue;
;;;473                    }
;;;474                    else if (ch == 0x42) /* down key */
0000a4  2942              CMP      r1,#0x42
0000a6  d0e2              BEQ      |L10.110|
;;;475                    {
;;;476    #ifdef FINSH_USING_HISTORY
;;;477                        /* next history */
;;;478                        if (shell->current_history < shell->history_count - 1)
;;;479                            shell->current_history ++;
;;;480                        else
;;;481                        {
;;;482                            /* set to the end of history */
;;;483                            if (shell->history_count != 0)
;;;484                                shell->current_history = shell->history_count - 1;
;;;485                            else
;;;486                                continue;
;;;487                        }
;;;488    
;;;489                        memcpy(shell->line, &shell->cmd_history[shell->current_history][0],
;;;490                               FINSH_CMD_SIZE);
;;;491                        shell->line_curpos = shell->line_position = strlen(shell->line);
;;;492                        shell_handle_history(shell);
;;;493    #endif
;;;494                        continue;
;;;495                    }
;;;496                    else if (ch == 0x44) /* left key */
0000a8  2944              CMP      r1,#0x44
0000aa  d00a              BEQ      |L10.194|
;;;497                    {
;;;498                        if (shell->line_curpos)
;;;499                        {
;;;500                            rt_kprintf("\b");
;;;501                            shell->line_curpos --;
;;;502                        }
;;;503    
;;;504                        continue;
;;;505                    }
;;;506                    else if (ch == 0x43) /* right key */
0000ac  2943              CMP      r1,#0x43
0000ae  d016              BEQ      |L10.222|
                  |L10.176|
;;;507                    {
;;;508                        if (shell->line_curpos < shell->line_position)
;;;509                        {
;;;510                            rt_kprintf("%c", shell->line[shell->line_curpos]);
;;;511                            shell->line_curpos ++;
;;;512                        }
;;;513    
;;;514                        continue;
;;;515                    }
;;;516    
;;;517                }
;;;518    
;;;519                /* handle CR key */
;;;520                if (ch == '\r')
0000b0  290d              CMP      r1,#0xd
0000b2  d026              BEQ      |L10.258|
;;;521                {
;;;522                    char next;
;;;523    
;;;524                    if (rt_device_read(shell->device, 0, &next, 1) == 1)
;;;525                    {
;;;526                        if (next == '\0') ch = '\r'; /* linux telnet will issue '\0' */
;;;527                        else ch = next;
;;;528                    }
;;;529                    else ch = '\r';
;;;530                }
;;;531                /* handle tab key */
;;;532                else if (ch == '\t')
0000b4  2909              CMP      r1,#9
0000b6  d07f              BEQ      |L10.440|
;;;533                {
;;;534                    int i;
;;;535                    /* move the cursor to the beginning of line */
;;;536                    for (i = 0; i < shell->line_curpos; i++)
;;;537                        rt_kprintf("\b");
;;;538    
;;;539                    /* auto complete */
;;;540                    shell_auto_complete(&shell->line[0]);
;;;541                    /* re-calculate position */
;;;542                    shell->line_curpos = shell->line_position = strlen(shell->line);
;;;543    
;;;544                    continue;
;;;545                }
;;;546                /* handle backspace key */
;;;547                else if (ch == 0x7f || ch == 0x08)
0000b8  297f              CMP      r1,#0x7f
                  |L10.186|
0000ba  d07c              BEQ      |L10.438|
0000bc  2908              CMP      r1,#8
0000be  d0fc              BEQ      |L10.186|
0000c0  e031              B        |L10.294|
                  |L10.194|
0000c2  30ff              ADDS     r0,r0,#0xff
0000c4  3001              ADDS     r0,#1
0000c6  7c40              LDRB     r0,[r0,#0x11]         ;498
0000c8  2800              CMP      r0,#0                 ;498
0000ca  d0d0              BEQ      |L10.110|
0000cc  a09a              ADR      r0,|L10.824|
0000ce  f7fffffe          BL       rt_kprintf
0000d2  6828              LDR      r0,[r5,#0]            ;501  ; shell
0000d4  30ff              ADDS     r0,r0,#0xff           ;501
0000d6  3001              ADDS     r0,#1                 ;501
0000d8  7c41              LDRB     r1,[r0,#0x11]         ;501
0000da  1e49              SUBS     r1,r1,#1              ;501
0000dc  e00f              B        |L10.254|
                  |L10.222|
0000de  1dc2              ADDS     r2,r0,#7              ;508
0000e0  32f9              ADDS     r2,r2,#0xf9           ;508
0000e2  7c51              LDRB     r1,[r2,#0x11]         ;508
0000e4  7c12              LDRB     r2,[r2,#0x10]         ;508
0000e6  4291              CMP      r1,r2                 ;508
0000e8  d2c1              BCS      |L10.110|
0000ea  30c0              ADDS     r0,r0,#0xc0           ;508
0000ec  5c09              LDRB     r1,[r1,r0]            ;510
0000ee  a093              ADR      r0,|L10.828|
0000f0  f7fffffe          BL       rt_kprintf
0000f4  6828              LDR      r0,[r5,#0]            ;511  ; shell
0000f6  30ff              ADDS     r0,r0,#0xff           ;511
0000f8  3001              ADDS     r0,#1                 ;511
0000fa  7c41              LDRB     r1,[r0,#0x11]         ;511
0000fc  1c49              ADDS     r1,r1,#1              ;511
                  |L10.254|
0000fe  7441              STRB     r1,[r0,#0x11]         ;511
000100  e0fb              B        |L10.762|
                  |L10.258|
000102  30ff              ADDS     r0,r0,#0xff           ;511
000104  3001              ADDS     r0,#1                 ;511
000106  6940              LDR      r0,[r0,#0x14]         ;524
000108  2301              MOVS     r3,#1                 ;524
00010a  aa01              ADD      r2,sp,#4              ;524
00010c  2100              MOVS     r1,#0                 ;524
00010e  f7fffffe          BL       rt_device_read
000112  2801              CMP      r0,#1                 ;524
000114  d138              BNE      |L10.392|
000116  4668              MOV      r0,sp                 ;526
000118  7900              LDRB     r0,[r0,#4]            ;526
00011a  2800              CMP      r0,#0                 ;526
00011c  d034              BEQ      |L10.392|
00011e  4669              MOV      r1,sp                 ;527
000120  7008              STRB     r0,[r1,#0]            ;527
;;;548                {
;;;549                    /* note that shell->line_curpos >= 0 */
;;;550                    if (shell->line_curpos == 0)
;;;551                        continue;
;;;552    
;;;553                    shell->line_position--;
;;;554                    shell->line_curpos--;
;;;555    
;;;556                    if (shell->line_position > shell->line_curpos)
;;;557                    {
;;;558                        int i;
;;;559    
;;;560                        rt_memmove(&shell->line[shell->line_curpos],
;;;561                                   &shell->line[shell->line_curpos + 1],
;;;562                                   shell->line_position - shell->line_curpos);
;;;563                        shell->line[shell->line_position] = 0;
;;;564    
;;;565                        rt_kprintf("\b%s  \b", &shell->line[shell->line_curpos]);
;;;566    
;;;567                        /* move the cursor to the origin position */
;;;568                        for (i = shell->line_curpos; i <= shell->line_position; i++)
;;;569                            rt_kprintf("\b");
;;;570                    }
;;;571                    else
;;;572                    {
;;;573                        rt_kprintf("\b \b");
;;;574                        shell->line[shell->line_position] = 0;
;;;575                    }
;;;576    
;;;577                    continue;
;;;578                }
;;;579    
;;;580                /* handle end of line, break */
;;;581                if (ch == '\r' || ch == '\n')
000122  280d              CMP      r0,#0xd
000124  d033              BEQ      |L10.398|
                  |L10.294|
000126  4668              MOV      r0,sp
000128  7802              LDRB     r2,[r0,#0]
00012a  2a0a              CMP      r2,#0xa
00012c  d02f              BEQ      |L10.398|
;;;582                {
;;;583    #ifdef FINSH_USING_HISTORY
;;;584                    shell_push_history(shell);
;;;585    #endif
;;;586    
;;;587    #ifdef FINSH_USING_MSH
;;;588                    if (msh_is_used() == RT_TRUE)
;;;589                    {
;;;590                        if (shell->echo_mode)
;;;591                            rt_kprintf("\n");
;;;592                        msh_exec(shell->line, shell->line_position);
;;;593                    }
;;;594                    else
;;;595    #endif
;;;596                    {
;;;597    #ifndef FINSH_USING_MSH_ONLY
;;;598                        /* add ';' and run the command line */
;;;599                        shell->line[shell->line_position] = ';';
;;;600    
;;;601                        if (shell->line_position != 0) finsh_run_line(&shell->parser, shell->line);
;;;602                        else
;;;603                            if (shell->echo_mode) rt_kprintf("\n");
;;;604    #endif
;;;605                    }
;;;606    
;;;607                    rt_kprintf(FINSH_PROMPT);
;;;608                    memset(shell->line, 0, sizeof(shell->line));
;;;609                    shell->line_curpos = shell->line_position = 0;
;;;610                    break;
;;;611                }
;;;612    
;;;613                /* it's a large line, discard it */
;;;614                if (shell->line_position >= FINSH_CMD_SIZE)
00012e  6828              LDR      r0,[r5,#0]  ; shell
000130  1dc1              ADDS     r1,r0,#7
000132  31f9              ADDS     r1,r1,#0xf9
000134  7c0b              LDRB     r3,[r1,#0x10]
000136  2b50              CMP      r3,#0x50
000138  d300              BCC      |L10.316|
;;;615                    shell->line_position = 0;
00013a  740c              STRB     r4,[r1,#0x10]
                  |L10.316|
;;;616    
;;;617                /* normal character */
;;;618                if (shell->line_curpos < shell->line_position)
00013c  7c4b              LDRB     r3,[r1,#0x11]
00013e  7c09              LDRB     r1,[r1,#0x10]
000140  428b              CMP      r3,r1
000142  d27d              BCS      |L10.576|
;;;619                {
;;;620                    int i;
;;;621    
;;;622                    rt_memmove(&shell->line[shell->line_curpos + 1],
000144  1aca              SUBS     r2,r1,r3
000146  4601              MOV      r1,r0
000148  31c0              ADDS     r1,r1,#0xc0
00014a  30c1              ADDS     r0,r0,#0xc1
00014c  1859              ADDS     r1,r3,r1
00014e  1818              ADDS     r0,r3,r0
000150  f7fffffe          BL       rt_memmove
;;;623                               &shell->line[shell->line_curpos],
;;;624                               shell->line_position - shell->line_curpos);
;;;625                    shell->line[shell->line_curpos] = ch;
000154  4668              MOV      r0,sp
000156  7801              LDRB     r1,[r0,#0]
000158  22ff              MOVS     r2,#0xff
00015a  6828              LDR      r0,[r5,#0]  ; shell
00015c  3212              ADDS     r2,r2,#0x12
00015e  5c12              LDRB     r2,[r2,r0]
000160  30c0              ADDS     r0,r0,#0xc0
000162  5411              STRB     r1,[r2,r0]
;;;626                    if (shell->echo_mode)
000164  6828              LDR      r0,[r5,#0]  ; shell
000166  2121              MOVS     r1,#0x21
000168  5c09              LDRB     r1,[r1,r0]
00016a  07c9              LSLS     r1,r1,#31
00016c  d007              BEQ      |L10.382|
;;;627                        rt_kprintf("%s", &shell->line[shell->line_curpos]);
00016e  21ff              MOVS     r1,#0xff
000170  3112              ADDS     r1,r1,#0x12
000172  5c09              LDRB     r1,[r1,r0]
000174  30c0              ADDS     r0,r0,#0xc0
000176  1809              ADDS     r1,r1,r0
000178  a071              ADR      r0,|L10.832|
00017a  f7fffffe          BL       rt_kprintf
                  |L10.382|
;;;628    
;;;629                    /* move the cursor to new position */
;;;630                    for (i = shell->line_curpos; i < shell->line_position; i++)
00017e  6828              LDR      r0,[r5,#0]  ; shell
000180  30ff              ADDS     r0,r0,#0xff
000182  3001              ADDS     r0,#1
000184  7c46              LDRB     r6,[r0,#0x11]
000186  e095              B        |L10.692|
                  |L10.392|
000188  200d              MOVS     r0,#0xd               ;529
00018a  4669              MOV      r1,sp                 ;529
00018c  7008              STRB     r0,[r1,#0]            ;529
                  |L10.398|
00018e  22ff              MOVS     r2,#0xff              ;599
000190  6828              LDR      r0,[r5,#0]            ;599  ; shell
000192  3211              ADDS     r2,r2,#0x11           ;599
000194  5c12              LDRB     r2,[r2,r0]            ;599
000196  213b              MOVS     r1,#0x3b              ;599
000198  30c0              ADDS     r0,r0,#0xc0           ;599
00019a  5411              STRB     r1,[r2,r0]            ;599
00019c  21ff              MOVS     r1,#0xff              ;601
00019e  6828              LDR      r0,[r5,#0]            ;601  ; shell
0001a0  3111              ADDS     r1,r1,#0x11           ;601
0001a2  5c09              LDRB     r1,[r1,r0]            ;601
0001a4  2900              CMP      r1,#0                 ;601
0001a6  d06b              BEQ      |L10.640|
0001a8  4601              MOV      r1,r0                 ;601
0001aa  31c0              ADDS     r1,r1,#0xc0           ;601
0001ac  3024              ADDS     r0,r0,#0x24           ;601
0001ae  f7fffffe          BL       finsh_run_line
0001b2  e06c              B        |L10.654|
0001b4  e000              B        |L10.440|
                  |L10.438|
0001b6  e022              B        |L10.510|
                  |L10.440|
0001b8  2600              MOVS     r6,#0                 ;536
0001ba  e003              B        |L10.452|
                  |L10.444|
0001bc  a05e              ADR      r0,|L10.824|
0001be  f7fffffe          BL       rt_kprintf
0001c2  1c76              ADDS     r6,r6,#1              ;537
                  |L10.452|
0001c4  6828              LDR      r0,[r5,#0]            ;536  ; shell
0001c6  30ff              ADDS     r0,r0,#0xff           ;536
0001c8  3001              ADDS     r0,#1                 ;536
0001ca  7c40              LDRB     r0,[r0,#0x11]         ;536
0001cc  42b0              CMP      r0,r6                 ;536
0001ce  dcf5              BGT      |L10.444|
0001d0  682e              LDR      r6,[r5,#0]            ;536  ; shell
0001d2  a05c              ADR      r0,|L10.836|
0001d4  36c0              ADDS     r6,r6,#0xc0           ;536
0001d6  f7fffffe          BL       rt_kprintf
0001da  4630              MOV      r0,r6                 ;536
0001dc  f7fffffe          BL       list_prefix
0001e0  4632              MOV      r2,r6                 ;536
0001e2  a159              ADR      r1,|L10.840|
0001e4  a05a              ADR      r0,|L10.848|
0001e6  f7fffffe          BL       rt_kprintf
0001ea  6828              LDR      r0,[r5,#0]            ;542  ; shell
0001ec  30c0              ADDS     r0,r0,#0xc0           ;542
0001ee  f7fffffe          BL       strlen
0001f2  6829              LDR      r1,[r5,#0]            ;542  ; shell
0001f4  31ff              ADDS     r1,r1,#0xff           ;542
0001f6  3101              ADDS     r1,#1                 ;542
0001f8  7408              STRB     r0,[r1,#0x10]         ;542
0001fa  7448              STRB     r0,[r1,#0x11]         ;542
0001fc  e07d              B        |L10.762|
                  |L10.510|
0001fe  1dc2              ADDS     r2,r0,#7              ;550
000200  32f9              ADDS     r2,r2,#0xf9           ;550
000202  7c53              LDRB     r3,[r2,#0x11]         ;550
000204  2b00              CMP      r3,#0                 ;550
000206  d078              BEQ      |L10.762|
000208  7c11              LDRB     r1,[r2,#0x10]         ;553
00020a  1e5b              SUBS     r3,r3,#1              ;553
00020c  1e49              SUBS     r1,r1,#1              ;553
00020e  b2c9              UXTB     r1,r1                 ;553
000210  b2db              UXTB     r3,r3                 ;554
000212  7411              STRB     r1,[r2,#0x10]         ;553
000214  7453              STRB     r3,[r2,#0x11]         ;554
000216  4299              CMP      r1,r3                 ;556
000218  d928              BLS      |L10.620|
00021a  1aca              SUBS     r2,r1,r3              ;560
00021c  4601              MOV      r1,r0                 ;560
00021e  31c1              ADDS     r1,r1,#0xc1           ;560
000220  30c0              ADDS     r0,r0,#0xc0           ;560
000222  1859              ADDS     r1,r3,r1              ;560
000224  1818              ADDS     r0,r3,r0              ;560
000226  f7fffffe          BL       rt_memmove
00022a  21ff              MOVS     r1,#0xff              ;563
00022c  6828              LDR      r0,[r5,#0]            ;563  ; shell
00022e  3111              ADDS     r1,r1,#0x11           ;563
000230  5c09              LDRB     r1,[r1,r0]            ;563
000232  30c0              ADDS     r0,r0,#0xc0           ;563
000234  540c              STRB     r4,[r1,r0]            ;563
000236  21ff              MOVS     r1,#0xff              ;565
000238  6828              LDR      r0,[r5,#0]            ;565  ; shell
00023a  3112              ADDS     r1,r1,#0x12           ;565
00023c  5c09              LDRB     r1,[r1,r0]            ;565
00023e  e000              B        |L10.578|
                  |L10.576|
000240  e03f              B        |L10.706|
                  |L10.578|
000242  30c0              ADDS     r0,r0,#0xc0           ;565
000244  1809              ADDS     r1,r1,r0              ;565
000246  a044              ADR      r0,|L10.856|
000248  f7fffffe          BL       rt_kprintf
00024c  6828              LDR      r0,[r5,#0]            ;568  ; shell
00024e  30ff              ADDS     r0,r0,#0xff           ;568
000250  3001              ADDS     r0,#1                 ;568
000252  7c46              LDRB     r6,[r0,#0x11]         ;568
000254  e003              B        |L10.606|
                  |L10.598|
000256  a038              ADR      r0,|L10.824|
000258  f7fffffe          BL       rt_kprintf
00025c  1c76              ADDS     r6,r6,#1              ;569
                  |L10.606|
00025e  6828              LDR      r0,[r5,#0]            ;568  ; shell
000260  30ff              ADDS     r0,r0,#0xff           ;568
000262  3001              ADDS     r0,#1                 ;568
000264  7c00              LDRB     r0,[r0,#0x10]         ;568
000266  42b0              CMP      r0,r6                 ;568
000268  db47              BLT      |L10.762|
00026a  e7f4              B        |L10.598|
                  |L10.620|
00026c  a03c              ADR      r0,|L10.864|
00026e  f7fffffe          BL       rt_kprintf
000272  21ff              MOVS     r1,#0xff              ;574
000274  6828              LDR      r0,[r5,#0]            ;574  ; shell
000276  3111              ADDS     r1,r1,#0x11           ;574
000278  5c09              LDRB     r1,[r1,r0]            ;574
00027a  30c0              ADDS     r0,r0,#0xc0           ;574
00027c  540c              STRB     r4,[r1,r0]            ;574
00027e  e03c              B        |L10.762|
                  |L10.640|
000280  3020              ADDS     r0,r0,#0x20           ;574
000282  7840              LDRB     r0,[r0,#1]            ;603
000284  07c0              LSLS     r0,r0,#31             ;603
000286  d002              BEQ      |L10.654|
000288  a02e              ADR      r0,|L10.836|
00028a  f7fffffe          BL       rt_kprintf
                  |L10.654|
00028e  a028              ADR      r0,|L10.816|
000290  f7fffffe          BL       rt_kprintf
000294  6828              LDR      r0,[r5,#0]            ;608  ; shell
000296  2150              MOVS     r1,#0x50              ;608
000298  462e              MOV      r6,r5                 ;608
00029a  30c0              ADDS     r0,r0,#0xc0           ;608
00029c  f7fffffe          BL       __aeabi_memclr4
0002a0  6830              LDR      r0,[r6,#0]            ;609  ; shell
0002a2  30ff              ADDS     r0,r0,#0xff           ;609
0002a4  3001              ADDS     r0,#1                 ;609
0002a6  7404              STRB     r4,[r0,#0x10]         ;609
0002a8  7444              STRB     r4,[r0,#0x11]         ;609
                  |L10.682|
0002aa  e6d9              B        |L10.96|
                  |L10.684|
;;;631                        rt_kprintf("\b");
0002ac  a022              ADR      r0,|L10.824|
0002ae  f7fffffe          BL       rt_kprintf
0002b2  1c76              ADDS     r6,r6,#1
                  |L10.692|
0002b4  6828              LDR      r0,[r5,#0]            ;630  ; shell
0002b6  30ff              ADDS     r0,r0,#0xff           ;630
0002b8  3001              ADDS     r0,#1                 ;630
0002ba  7c00              LDRB     r0,[r0,#0x10]         ;630
0002bc  42b0              CMP      r0,r6                 ;630
0002be  dcf5              BGT      |L10.684|
0002c0  e00b              B        |L10.730|
                  |L10.706|
0002c2  30c0              ADDS     r0,r0,#0xc0           ;630
;;;632                }
;;;633                else
;;;634                {
;;;635                    shell->line[shell->line_position] = ch;
0002c4  540a              STRB     r2,[r1,r0]
;;;636                    if (shell->echo_mode)
0002c6  6828              LDR      r0,[r5,#0]  ; shell
0002c8  3020              ADDS     r0,r0,#0x20
0002ca  7840              LDRB     r0,[r0,#1]
0002cc  07c0              LSLS     r0,r0,#31
0002ce  d004              BEQ      |L10.730|
;;;637                        rt_kprintf("%c", ch);
0002d0  4668              MOV      r0,sp
0002d2  7801              LDRB     r1,[r0,#0]
0002d4  a019              ADR      r0,|L10.828|
0002d6  f7fffffe          BL       rt_kprintf
                  |L10.730|
;;;638                }
;;;639    
;;;640                ch = 0;
0002da  4668              MOV      r0,sp
0002dc  7004              STRB     r4,[r0,#0]
;;;641                shell->line_position ++;
0002de  6828              LDR      r0,[r5,#0]  ; shell
0002e0  30ff              ADDS     r0,r0,#0xff
0002e2  3001              ADDS     r0,#1
0002e4  7c01              LDRB     r1,[r0,#0x10]
0002e6  1c49              ADDS     r1,r1,#1
0002e8  b2c9              UXTB     r1,r1
0002ea  7401              STRB     r1,[r0,#0x10]
;;;642                shell->line_curpos++;
0002ec  7c42              LDRB     r2,[r0,#0x11]
0002ee  1c52              ADDS     r2,r2,#1
0002f0  7442              STRB     r2,[r0,#0x11]
;;;643                if (shell->line_position >= FINSH_CMD_SIZE)
0002f2  2950              CMP      r1,#0x50
0002f4  d301              BCC      |L10.762|
;;;644                {
;;;645                    /* clear command line */
;;;646                    shell->line_position = 0;
0002f6  7404              STRB     r4,[r0,#0x10]
;;;647                    shell->line_curpos = 0;
0002f8  7444              STRB     r4,[r0,#0x11]
                  |L10.762|
0002fa  6828              LDR      r0,[r5,#0]            ;426  ; shell
0002fc  2301              MOVS     r3,#1                 ;426
0002fe  30ff              ADDS     r0,r0,#0xff           ;426
000300  3001              ADDS     r0,#1                 ;426
000302  6940              LDR      r0,[r0,#0x14]         ;426
000304  466a              MOV      r2,sp                 ;426
000306  2100              MOVS     r1,#0                 ;426
000308  f7fffffe          BL       rt_device_read
00030c  2801              CMP      r0,#1                 ;426
00030e  d1cc              BNE      |L10.682|
000310  e6ae              B        |L10.112|
;;;648                }
;;;649            } /* end of device read */
;;;650        }
;;;651    }
;;;652    
                          ENDP

000312  0000              DCW      0x0000
                  |L10.788|
                          DCD      ||.data||
                  |L10.792|
                          DCD      ||.constdata||+0x4d
                  |L10.796|
00031c  7368656c          DCB      "shell->device",0
000320  6c2d3e64
000324  65766963
000328  6500    
00032a  00                DCB      0
00032b  00                DCB      0
                  |L10.812|
                          DCD      finsh_rx_ind
                  |L10.816|
000330  66696e73          DCB      "finsh>>",0
000334  683e3e00
                  |L10.824|
000338  0800              DCB      "\b",0
00033a  00                DCB      0
00033b  00                DCB      0
                  |L10.828|
00033c  256300            DCB      "%c",0
00033f  00                DCB      0
                  |L10.832|
000340  257300            DCB      "%s",0
000343  00                DCB      0
                  |L10.836|
000344  0a00              DCB      "\n",0
000346  00                DCB      0
000347  00                DCB      0
                  |L10.840|
000348  66696e73          DCB      "finsh>>",0
00034c  683e3e00
                  |L10.848|
000350  25732573          DCB      "%s%s",0
000354  00      
000355  00                DCB      0
000356  00                DCB      0
000357  00                DCB      0
                  |L10.856|
000358  08257320          DCB      "\b%s  \b",0
00035c  200800  
00035f  00                DCB      0
                  |L10.864|
000360  08200800          DCB      "\b \b",0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  finsh_thread
                          %        128
                  finsh_thread_stack
                          %        512

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  66696e73          DCB      0x66,0x69,0x6e,0x73
000004  685f7278          DCB      0x68,0x5f,0x72,0x78
000008  5f696e64          DCB      0x5f,0x69,0x6e,0x64
00000c  00                DCB      0x00
                  |symbol_number.40|
00000d  66696e            DCB      0x66,0x69,0x6e
000010  73685f73          DCB      0x73,0x68,0x5f,0x73
000014  65745f64          DCB      0x65,0x74,0x5f,0x64
000018  65766963          DCB      0x65,0x76,0x69,0x63
00001c  6500              DCB      0x65,0x00
                  |symbol_number.41|
00001e  6669              DCB      0x66,0x69
000020  6e73685f          DCB      0x6e,0x73,0x68,0x5f
000024  6765745f          DCB      0x67,0x65,0x74,0x5f
000028  64657669          DCB      0x64,0x65,0x76,0x69
00002c  636500            DCB      0x63,0x65,0x00
                  |symbol_number.42|
00002f  66                DCB      0x66
000030  696e7368          DCB      0x69,0x6e,0x73,0x68
000034  5f736574          DCB      0x5f,0x73,0x65,0x74
000038  5f656368          DCB      0x5f,0x65,0x63,0x68
00003c  6f00              DCB      0x6f,0x00
                  |symbol_number.43|
00003e  6669              DCB      0x66,0x69
000040  6e73685f          DCB      0x6e,0x73,0x68,0x5f
000044  6765745f          DCB      0x67,0x65,0x74,0x5f
000048  6563686f          DCB      0x65,0x63,0x68,0x6f
00004c  00                DCB      0x00
                  |symbol_number.44|
00004d  66696e            DCB      0x66,0x69,0x6e
000050  73685f74          DCB      0x73,0x68,0x5f,0x74
000054  68726561          DCB      0x68,0x72,0x65,0x61
000058  645f656e          DCB      0x64,0x5f,0x65,0x6e
00005c  74727900          DCB      0x74,0x72,0x79,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  shell
                          DCD      0x00000000

                          AREA ||.rti_fn.3||, DATA, READONLY, ALIGN=2

                  __rt_init_finsh_system_init
                          DCD      finsh_system_init
