; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\uart.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\uart.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 -DRT_DEBUG --omf_browse=.\objects\uart.crf Libraries\StdDriver\src\uart.c]
                          THUMB

                          AREA ||i.CLK_GetPLLClockFreq||, CODE, READONLY, ALIGN=2

                  CLK_GetPLLClockFreq PROC
;;;446      */
;;;447    __STATIC_INLINE uint32_t CLK_GetPLLClockFreq(void)
000000  b508              PUSH     {r3,lr}
;;;448    {
;;;449        uint32_t u32PllFreq = 0, u32PllReg;
;;;450        uint32_t u32FIN, u32NF, u32NR, u32NO;
;;;451        uint8_t au8NoTbl[4] = {1, 2, 2, 4};
000002  a011              ADR      r0,|L1.72|
000004  6800              LDR      r0,[r0,#0]
;;;452    
;;;453        u32PllReg = CLK->PLLCON;
000006  9000              STR      r0,[sp,#0]
000008  4810              LDR      r0,|L1.76|
00000a  6a01              LDR      r1,[r0,#0x20]
;;;454    
;;;455        if(u32PllReg & (CLK_PLLCON_PD_Msk | CLK_PLLCON_OE_Msk))
00000c  1300              ASRS     r0,r0,#12
00000e  4201              TST      r1,r0
000010  d001              BEQ      |L1.22|
;;;456            return 0;           /* PLL is in power down mode or fix low */
000012  2000              MOVS     r0,#0
                  |L1.20|
;;;457    
;;;458        if(u32PllReg & CLK_PLLCON_PLL_SRC_HIRC)
;;;459            u32FIN = __HIRC;    /* PLL source clock from HIRC */
;;;460        else
;;;461            u32FIN = __HXT;     /* PLL source clock from HXT */
;;;462    
;;;463        if(u32PllReg & CLK_PLLCON_BP_Msk)
;;;464            return u32FIN;      /* PLL is in bypass mode */
;;;465    
;;;466        /* PLL is output enabled in normal work mode */
;;;467        u32NO = au8NoTbl[((u32PllReg & CLK_PLLCON_OUT_DV_Msk) >> CLK_PLLCON_OUT_DV_Pos)];
;;;468        u32NF = ((u32PllReg & CLK_PLLCON_FB_DV_Msk) >> CLK_PLLCON_FB_DV_Pos) + 2;
;;;469        u32NR = ((u32PllReg & CLK_PLLCON_IN_DV_Msk) >> CLK_PLLCON_IN_DV_Pos) + 2;
;;;470    
;;;471        /* u32FIN is shifted 2 bits to avoid overflow */
;;;472        u32PllFreq = (((u32FIN >> 2) * u32NF) / (u32NR * u32NO) << 2);
;;;473    
;;;474        return u32PllFreq;
;;;475    }
000014  bd08              POP      {r3,pc}
                  |L1.22|
000016  0308              LSLS     r0,r1,#12             ;458
000018  d501              BPL      |L1.30|
00001a  480d              LDR      r0,|L1.80|
00001c  e000              B        |L1.32|
                  |L1.30|
00001e  480d              LDR      r0,|L1.84|
                  |L1.32|
000020  038a              LSLS     r2,r1,#14             ;463
000022  d4f7              BMI      |L1.20|
000024  040a              LSLS     r2,r1,#16             ;467
000026  0f92              LSRS     r2,r2,#30             ;467
000028  466b              MOV      r3,sp                 ;467
00002a  5c9b              LDRB     r3,[r3,r2]            ;467
00002c  05ca              LSLS     r2,r1,#23             ;468
00002e  0489              LSLS     r1,r1,#18             ;469
000030  0dd2              LSRS     r2,r2,#23             ;468
000032  0ec9              LSRS     r1,r1,#27             ;469
000034  1c89              ADDS     r1,r1,#2              ;469
000036  0880              LSRS     r0,r0,#2              ;472
000038  1c92              ADDS     r2,r2,#2              ;472
00003a  4359              MULS     r1,r3,r1              ;472
00003c  4350              MULS     r0,r2,r0              ;472
00003e  f7fffffe          BL       __aeabi_uidivmod
000042  0080              LSLS     r0,r0,#2              ;472
000044  bd08              POP      {r3,pc}
;;;476    
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
000048  01020204          DCB      1,2,2,4
                  |L1.76|
                          DCD      0x50000200
                  |L1.80|
                          DCD      0x01518000
                  |L1.84|
                          DCD      0x00b71b00

                          AREA ||i.UART_ClearIntFlag||, CODE, READONLY, ALIGN=2

                  UART_ClearIntFlag PROC
;;;40      */
;;;41     void UART_ClearIntFlag(UART_T* uart , uint32_t u32InterruptFlag)
000000  054a              LSLS     r2,r1,#21
;;;42     {
000002  d503              BPL      |L2.12|
;;;43     
;;;44         if(u32InterruptFlag & UART_ISR_RLS_INT_Msk)   /* clear Receive Line Status Interrupt */
;;;45         {
;;;46             uart->FSR = UART_FSR_BIF_Msk | UART_FSR_FEF_Msk | UART_FSR_FEF_Msk;
000004  2260              MOVS     r2,#0x60
000006  6182              STR      r2,[r0,#0x18]
;;;47             uart->FSR = UART_FSR_RS485_ADD_DETF_Msk;
000008  2208              MOVS     r2,#8
00000a  6182              STR      r2,[r0,#0x18]
                  |L2.12|
;;;48         }
;;;49     
;;;50         if(u32InterruptFlag & UART_ISR_MODEM_INT_Msk)  /* clear Modem Interrupt */
00000c  050a              LSLS     r2,r1,#20
00000e  d503              BPL      |L2.24|
;;;51             uart->MSR |= UART_MSR_DCTSF_Msk;
000010  6942              LDR      r2,[r0,#0x14]
000012  2301              MOVS     r3,#1
000014  431a              ORRS     r2,r2,r3
000016  6142              STR      r2,[r0,#0x14]
                  |L2.24|
;;;52     
;;;53         if(u32InterruptFlag & UART_ISR_BUF_ERR_INT_Msk)   /* clear Buffer Error Interrupt */
000018  048a              LSLS     r2,r1,#18
00001a  d501              BPL      |L2.32|
;;;54         {
;;;55             uart->FSR = UART_FSR_RX_OVER_IF_Msk | UART_FSR_TX_OVER_IF_Msk;
00001c  4a04              LDR      r2,|L2.48|
00001e  6182              STR      r2,[r0,#0x18]
                  |L2.32|
;;;56         }
;;;57     
;;;58         if(u32InterruptFlag & UART_ISR_LIN_INT_Msk)   /* clear LIN break Interrupt */
000020  0409              LSLS     r1,r1,#16
000022  d503              BPL      |L2.44|
;;;59         {
;;;60             uart->ISR = UART_ISR_LIN_IF_Msk;
000024  2180              MOVS     r1,#0x80
000026  61c1              STR      r1,[r0,#0x1c]
;;;61             uart->LIN_SR = UART_LIN_SR_BIT_ERR_F_Msk   | UART_LIN_SR_LINS_BKDET_F_Msk  |
000028  4902              LDR      r1,|L2.52|
00002a  6381              STR      r1,[r0,#0x38]
                  |L2.44|
;;;62                            UART_LIN_SR_LINS_SYNC_F_Msk | UART_LIN_SR_LINS_IDPERR_F_Msk |
;;;63                            UART_LIN_SR_LINS_HERR_F_Msk | UART_LIN_SR_LINS_HDET_F_Msk ;
;;;64         }
;;;65     
;;;66     }
00002c  4770              BX       lr
;;;67     
                          ENDP

00002e  0000              DCW      0x0000
                  |L2.48|
                          DCD      0x01000001
                  |L2.52|
                          DCD      0x0000030f

                          AREA ||i.UART_Close||, CODE, READONLY, ALIGN=1

                  UART_Close PROC
;;;76      */
;;;77     void UART_Close(UART_T* uart)
000000  2100              MOVS     r1,#0
;;;78     {
;;;79         uart->IER = 0;
000002  6041              STR      r1,[r0,#4]
;;;80     }
000004  4770              BX       lr
;;;81     
                          ENDP


                          AREA ||i.UART_DisableFlowCtrl||, CODE, READONLY, ALIGN=1

                  UART_DisableFlowCtrl PROC
;;;91      */
;;;92     void UART_DisableFlowCtrl(UART_T* uart)
000000  6841              LDR      r1,[r0,#4]
;;;93     {
;;;94         uart->IER &= ~(UART_IER_AUTO_RTS_EN_Msk | UART_IER_AUTO_CTS_EN_Msk);
000002  2203              MOVS     r2,#3
000004  0312              LSLS     r2,r2,#12
000006  4391              BICS     r1,r1,r2
000008  6041              STR      r1,[r0,#4]
;;;95     }
00000a  4770              BX       lr
;;;96     
                          ENDP


                          AREA ||i.UART_DisableInt||, CODE, READONLY, ALIGN=2

                  UART_DisableInt PROC
;;;115     */
;;;116    void UART_DisableInt(UART_T*  uart, uint32_t u32InterruptFlag)
000000  6842              LDR      r2,[r0,#4]
;;;117    {
;;;118        /* Disable UART specified interrupt */
;;;119        UART_DISABLE_INT(uart, u32InterruptFlag);
000002  438a              BICS     r2,r2,r1
000004  6042              STR      r2,[r0,#4]
;;;120    
;;;121        /* Disable NVIC UART IRQ */
;;;122        if(uart == UART0)
000006  4b07              LDR      r3,|L5.36|
000008  2201              MOVS     r2,#1
00000a  0312              LSLS     r2,r2,#12
00000c  4906              LDR      r1,|L5.40|
00000e  4298              CMP      r0,r3
000010  d101              BNE      |L5.22|
                  |L5.18|
000012  600a              STR      r2,[r1,#0]            ;117
;;;123            NVIC_DisableIRQ(UART02_IRQn);
;;;124        else if(uart == UART1)
;;;125            NVIC_DisableIRQ(UART1_IRQn);
;;;126        else
;;;127            NVIC_DisableIRQ(UART02_IRQn);
;;;128    }
000014  4770              BX       lr
                  |L5.22|
000016  4b05              LDR      r3,|L5.44|
000018  4298              CMP      r0,r3                 ;124
00001a  d1fa              BNE      |L5.18|
00001c  2001              MOVS     r0,#1                 ;124
00001e  0340              LSLS     r0,r0,#13             ;124
000020  6008              STR      r0,[r1,#0]            ;124
000022  4770              BX       lr
;;;129    
                          ENDP

                  |L5.36|
                          DCD      0x40050000
                  |L5.40|
                          DCD      0xe000e180
                  |L5.44|
                          DCD      0x40150000

                          AREA ||i.UART_EnableFlowCtrl||, CODE, READONLY, ALIGN=1

                  UART_EnableFlowCtrl PROC
;;;139     */
;;;140    void UART_EnableFlowCtrl(UART_T* uart)
000000  6901              LDR      r1,[r0,#0x10]
;;;141    {
;;;142        /* Set RTS pin output is low level active */
;;;143        uart->MCR |= UART_MCR_LEV_RTS_Msk;
000002  2201              MOVS     r2,#1
000004  0252              LSLS     r2,r2,#9
000006  4311              ORRS     r1,r1,r2
000008  6101              STR      r1,[r0,#0x10]
;;;144    
;;;145        /* Set CTS pin input is low level active */
;;;146        uart->MSR |= UART_MSR_LEV_CTS_Msk;
00000a  6941              LDR      r1,[r0,#0x14]
00000c  1052              ASRS     r2,r2,#1
00000e  4311              ORRS     r1,r1,r2
000010  6141              STR      r1,[r0,#0x14]
;;;147    
;;;148        /* Set RTS and CTS auto flow control enable */
;;;149        uart->IER |= UART_IER_AUTO_RTS_EN_Msk | UART_IER_AUTO_CTS_EN_Msk;
000012  6841              LDR      r1,[r0,#4]
000014  2203              MOVS     r2,#3
000016  0312              LSLS     r2,r2,#12
000018  4311              ORRS     r1,r1,r2
00001a  6041              STR      r1,[r0,#4]
;;;150    }
00001c  4770              BX       lr
;;;151    
                          ENDP


                          AREA ||i.UART_EnableInt||, CODE, READONLY, ALIGN=2

                  UART_EnableInt PROC
;;;170     */
;;;171    void UART_EnableInt(UART_T*  uart, uint32_t u32InterruptFlag)
000000  6842              LDR      r2,[r0,#4]
;;;172    {
;;;173    
;;;174        /* Enable UART specified interrupt */
;;;175        UART_ENABLE_INT(uart, u32InterruptFlag);
000002  430a              ORRS     r2,r2,r1
000004  6042              STR      r2,[r0,#4]
;;;176    
;;;177        /* Enable NVIC UART IRQ */
;;;178        if(uart == UART0)
000006  4b07              LDR      r3,|L7.36|
000008  2201              MOVS     r2,#1
00000a  0312              LSLS     r2,r2,#12
00000c  4906              LDR      r1,|L7.40|
00000e  4298              CMP      r0,r3
000010  d101              BNE      |L7.22|
                  |L7.18|
000012  600a              STR      r2,[r1,#0]            ;172
;;;179            NVIC_EnableIRQ(UART02_IRQn);
;;;180        else if(uart == UART1)
;;;181            NVIC_EnableIRQ(UART1_IRQn);
;;;182        else
;;;183            NVIC_EnableIRQ(UART02_IRQn);
;;;184    
;;;185    }
000014  4770              BX       lr
                  |L7.22|
000016  4b05              LDR      r3,|L7.44|
000018  4298              CMP      r0,r3                 ;180
00001a  d1fa              BNE      |L7.18|
00001c  2001              MOVS     r0,#1                 ;180
00001e  0340              LSLS     r0,r0,#13             ;180
000020  6008              STR      r0,[r1,#0]            ;180
000022  4770              BX       lr
;;;186    
                          ENDP

                  |L7.36|
                          DCD      0x40050000
                  |L7.40|
                          DCD      0xe000e100
                  |L7.44|
                          DCD      0x40150000

                          AREA ||i.UART_Open||, CODE, READONLY, ALIGN=2

                  UART_Open PROC
;;;197     */
;;;198    void UART_Open(UART_T* uart, uint32_t u32baudrate)
000000  b5f0              PUSH     {r4-r7,lr}
;;;199    {
000002  4604              MOV      r4,r0
;;;200        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;201        uint32_t u32ClkTbl[4] = {__HXT, 0, 0, __HIRC};
000004  481c              LDR      r0,|L8.120|
000006  460d              MOV      r5,r1                 ;199
000008  c80f              LDM      r0,{r0-r3}
00000a  b085              SUB      sp,sp,#0x14           ;199
00000c  466e              MOV      r6,sp
00000e  c60f              STM      r6!,{r0-r3}
;;;202        uint32_t u32Baud_Div = 0;
;;;203    
;;;204        /* Get UART clock source selection */
;;;205        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000010  481a              LDR      r0,|L8.124|
000012  6941              LDR      r1,[r0,#0x14]
;;;206    
;;;207        /* Get UART clock divider number */
;;;208        u8UartClkDivNum = (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos;
000014  6980              LDR      r0,[r0,#0x18]
;;;209    
;;;210        /* Select UART function */
;;;211        uart->FUN_SEL = UART_FUNC_SEL_UART;
;;;212    
;;;213        /* Set UART line configuration */
;;;214        uart->LCR = UART_WORD_LEN_8 | UART_PARITY_NONE | UART_STOP_BIT_1;
;;;215    
;;;216        /* Set UART Rx and RTS trigger level */
;;;217        uart->FCR &= ~(UART_FCR_RFITL_Msk | UART_FCR_RTS_TRI_LEV_Msk);
;;;218    
;;;219        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;220        if(u8UartClkSrcSel == 1)
;;;221            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;222    
;;;223        /* Set UART baud rate */
;;;224        if(u32baudrate != 0)
;;;225        {
;;;226            u32Baud_Div = UART_BAUD_MODE2_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate);
;;;227    
;;;228            if(u32Baud_Div > 0xFFFF)
;;;229                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate));
;;;230            else
;;;231                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;232        }
;;;233    }
000016  018a              LSLS     r2,r1,#6
000018  2103              MOVS     r1,#3
00001a  0f96              LSRS     r6,r2,#30
00001c  0500              LSLS     r0,r0,#20
00001e  0f07              LSRS     r7,r0,#28
000020  2000              MOVS     r0,#0                 ;211
000022  6320              STR      r0,[r4,#0x30]         ;211
000024  60e1              STR      r1,[r4,#0xc]          ;214
000026  68a0              LDR      r0,[r4,#8]            ;217
000028  4915              LDR      r1,|L8.128|
00002a  4008              ANDS     r0,r0,r1              ;217
00002c  60a0              STR      r0,[r4,#8]            ;217
00002e  2e01              CMP      r6,#1                 ;220
000030  d102              BNE      |L8.56|
000032  f7fffffe          BL       CLK_GetPLLClockFreq
000036  9001              STR      r0,[sp,#4]            ;221
                  |L8.56|
000038  2d00              CMP      r5,#0                 ;224
00003a  d01b              BEQ      |L8.116|
00003c  00b1              LSLS     r1,r6,#2              ;226
00003e  4668              MOV      r0,sp                 ;226
000040  5840              LDR      r0,[r0,r1]            ;226
000042  1c79              ADDS     r1,r7,#1              ;226
000044  f7fffffe          BL       __aeabi_uidivmod
000048  4606              MOV      r6,r0                 ;226
00004a  0869              LSRS     r1,r5,#1              ;226
00004c  1840              ADDS     r0,r0,r1              ;226
00004e  4629              MOV      r1,r5                 ;226
000050  f7fffffe          BL       __aeabi_uidivmod
000054  490b              LDR      r1,|L8.132|
000056  1e80              SUBS     r0,r0,#2              ;228
000058  4288              CMP      r0,r1                 ;228
00005a  d907              BLS      |L8.108|
00005c  00e9              LSLS     r1,r5,#3              ;229
00005e  1870              ADDS     r0,r6,r1              ;229
000060  4629              MOV      r1,r5                 ;229
000062  f7fffffe          BL       __aeabi_uidivmod
000066  0900              LSRS     r0,r0,#4              ;229
000068  1e80              SUBS     r0,r0,#2              ;229
00006a  e002              B        |L8.114|
                  |L8.108|
00006c  2103              MOVS     r1,#3                 ;231
00006e  0709              LSLS     r1,r1,#28             ;231
000070  4308              ORRS     r0,r0,r1              ;231
                  |L8.114|
000072  6260              STR      r0,[r4,#0x24]         ;231
                  |L8.116|
000074  b005              ADD      sp,sp,#0x14
000076  bdf0              POP      {r4-r7,pc}
;;;234    
                          ENDP

                  |L8.120|
                          DCD      ||.constdata||
                  |L8.124|
                          DCD      0x50000200
                  |L8.128|
                          DCD      0xfff0ff0f
                  |L8.132|
                          DCD      0x0000ffff

                          AREA ||i.UART_Read||, CODE, READONLY, ALIGN=1

                  UART_Read PROC
;;;246     */
;;;247    uint32_t UART_Read(UART_T* uart, uint8_t *pu8RxBuf, uint32_t u32ReadBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;248    {
000002  4604              MOV      r4,r0
;;;249        uint32_t  u32Count, u32delayno;
;;;250    
;;;251        for(u32Count = 0; u32Count < u32ReadBytes; u32Count++)
000004  2000              MOVS     r0,#0
;;;252        {
;;;253            u32delayno = 0;
;;;254    
;;;255            while(uart->FSR & UART_FSR_RX_EMPTY_Msk)   /* Check RX empty => failed */
;;;256            {
;;;257                u32delayno++;
;;;258                if(u32delayno >= 0x40000000)
000006  2501              MOVS     r5,#1
000008  07ad              LSLS     r5,r5,#30
00000a  e00c              B        |L9.38|
                  |L9.12|
00000c  2300              MOVS     r3,#0                 ;253
00000e  e004              B        |L9.26|
                  |L9.16|
000010  1c5b              ADDS     r3,r3,#1              ;255
000012  42ab              CMP      r3,r5
000014  d301              BCC      |L9.26|
;;;259                    return FALSE;
000016  2000              MOVS     r0,#0
;;;260            }
;;;261            pu8RxBuf[u32Count] = uart->RBR;    /* Get Data from UART RX  */
;;;262        }
;;;263    
;;;264        return u32Count;
;;;265    
;;;266    }
000018  bd70              POP      {r4-r6,pc}
                  |L9.26|
00001a  69a6              LDR      r6,[r4,#0x18]         ;255
00001c  0476              LSLS     r6,r6,#17             ;255
00001e  d4f7              BMI      |L9.16|
000020  6823              LDR      r3,[r4,#0]            ;261
000022  540b              STRB     r3,[r1,r0]            ;261
000024  1c40              ADDS     r0,r0,#1              ;261
                  |L9.38|
000026  4290              CMP      r0,r2                 ;251
000028  d3f0              BCC      |L9.12|
00002a  bd70              POP      {r4-r6,pc}
;;;267    
                          ENDP


                          AREA ||i.UART_SelectIrDAMode||, CODE, READONLY, ALIGN=2

                  UART_SelectIrDAMode PROC
;;;360     */
;;;361    void UART_SelectIrDAMode(UART_T* uart, uint32_t u32Buadrate, uint32_t u32Direction)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;362    {
000002  4604              MOV      r4,r0
;;;363        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;364        uint32_t u32ClkTbl[4] = {__HXT, 0, 0, __HIRC};
000004  481c              LDR      r0,|L10.120|
000006  b084              SUB      sp,sp,#0x10           ;362
000008  c80f              LDM      r0,{r0-r3}
;;;365        uint32_t u32Baud_Div;
;;;366    
;;;367        /* Select IrDA function mode */
;;;368        uart->FUN_SEL = UART_FUNC_SEL_IrDA;
00000a  466d              MOV      r5,sp
00000c  c50f              STM      r5!,{r0-r3}
00000e  2602              MOVS     r6,#2
000010  6326              STR      r6,[r4,#0x30]
;;;369    
;;;370        /* Get UART clock source selection */
;;;371        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000012  481a              LDR      r0,|L10.124|
000014  6941              LDR      r1,[r0,#0x14]
;;;372    
;;;373        /* Get UART clock divider number */
;;;374        u8UartClkDivNum = (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos;
000016  6980              LDR      r0,[r0,#0x18]
;;;375    
;;;376        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;377        if(u8UartClkSrcSel == 1)
;;;378            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;379    
;;;380        /* Set UART IrDA baud rate in mode 0 */
;;;381        if(u32Buadrate != 0)
;;;382        {
;;;383            u32Baud_Div = UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32Buadrate);
;;;384    
;;;385            if(u32Baud_Div < 0xFFFF)
;;;386                uart->BAUD = (UART_BAUD_MODE0 | u32Baud_Div);
;;;387        }
;;;388    
;;;389        /* Configure IrDA relative settings */
;;;390        if(u32Direction == UART_IRCR_TX_SELECT)
;;;391        {
;;;392            uart->IRCR &= ~UART_IRCR_INV_TX_Msk;    //Tx signal is not inverse
;;;393            uart->IRCR |= UART_IRCR_TX_SELECT_Msk;
;;;394        }
;;;395        else
;;;396        {
;;;397            uart->IRCR |= UART_IRCR_INV_RX_Msk;     //Rx signal is inverse
;;;398            uart->IRCR &= ~UART_IRCR_TX_SELECT_Msk;
;;;399        }
;;;400    }
000018  0189              LSLS     r1,r1,#6
00001a  0f8d              LSRS     r5,r1,#30
00001c  0500              LSLS     r0,r0,#20
00001e  0f07              LSRS     r7,r0,#28
000020  2d01              CMP      r5,#1                 ;377
000022  d102              BNE      |L10.42|
000024  f7fffffe          BL       CLK_GetPLLClockFreq
000028  9001              STR      r0,[sp,#4]            ;378
                  |L10.42|
00002a  9805              LDR      r0,[sp,#0x14]         ;381
00002c  2800              CMP      r0,#0                 ;381
00002e  d011              BEQ      |L10.84|
000030  00a9              LSLS     r1,r5,#2              ;383
000032  4668              MOV      r0,sp                 ;383
000034  5840              LDR      r0,[r0,r1]            ;383
000036  1c79              ADDS     r1,r7,#1              ;383
000038  f7fffffe          BL       __aeabi_uidivmod
00003c  9905              LDR      r1,[sp,#0x14]         ;383
00003e  00c9              LSLS     r1,r1,#3              ;383
000040  1840              ADDS     r0,r0,r1              ;383
000042  9905              LDR      r1,[sp,#0x14]         ;383
000044  f7fffffe          BL       __aeabi_uidivmod
000048  0900              LSRS     r0,r0,#4              ;383
00004a  490d              LDR      r1,|L10.128|
00004c  1e80              SUBS     r0,r0,#2              ;385
00004e  4288              CMP      r0,r1                 ;385
000050  d200              BCS      |L10.84|
000052  6260              STR      r0,[r4,#0x24]         ;386
                  |L10.84|
000054  9806              LDR      r0,[sp,#0x18]         ;390
000056  2801              CMP      r0,#1                 ;390
000058  6aa0              LDR      r0,[r4,#0x28]         ;397
00005a  d007              BEQ      |L10.108|
00005c  2140              MOVS     r1,#0x40              ;397
00005e  4308              ORRS     r0,r0,r1              ;397
000060  62a0              STR      r0,[r4,#0x28]         ;397
000062  6aa0              LDR      r0,[r4,#0x28]         ;398
000064  43b0              BICS     r0,r0,r6              ;398
                  |L10.102|
000066  62a0              STR      r0,[r4,#0x28]         ;393
000068  b007              ADD      sp,sp,#0x1c
00006a  bdf0              POP      {r4-r7,pc}
                  |L10.108|
00006c  2120              MOVS     r1,#0x20              ;392
00006e  4388              BICS     r0,r0,r1              ;392
000070  62a0              STR      r0,[r4,#0x28]         ;392
000072  6aa0              LDR      r0,[r4,#0x28]         ;393
000074  4330              ORRS     r0,r0,r6              ;393
000076  e7f6              B        |L10.102|
;;;401    
                          ENDP

                  |L10.120|
                          DCD      ||.constdata||+0x20
                  |L10.124|
                          DCD      0x50000200
                  |L10.128|
                          DCD      0x0000ffff

                          AREA ||i.UART_SelectLINMode||, CODE, READONLY, ALIGN=1

                  UART_SelectLINMode PROC
;;;441     */
;;;442    void UART_SelectLINMode(UART_T* uart, uint32_t u32Mode, uint32_t u32BreakLength)
000000  b510              PUSH     {r4,lr}
;;;443    {
;;;444        /* Select LIN function mode */
;;;445        uart->FUN_SEL = UART_FUNC_SEL_LIN;
000002  2301              MOVS     r3,#1
000004  6303              STR      r3,[r0,#0x30]
;;;446    
;;;447        /* Select LIN function setting : Tx enable, Rx enable and break field length */
;;;448        uart->ALT_CSR &= ~(UART_ALT_CSR_LIN_TX_EN_Msk | UART_ALT_CSR_LIN_RX_EN_Msk | UART_ALT_CSR_UA_LIN_BKFL_Msk);
000006  6ac3              LDR      r3,[r0,#0x2c]
000008  24cf              MOVS     r4,#0xcf
00000a  43a3              BICS     r3,r3,r4
00000c  62c3              STR      r3,[r0,#0x2c]
;;;449        uart->ALT_CSR |= (u32Mode | (u32BreakLength << UART_ALT_CSR_UA_LIN_BKFL_Pos));
00000e  6ac3              LDR      r3,[r0,#0x2c]
000010  4311              ORRS     r1,r1,r2
000012  430b              ORRS     r3,r3,r1
000014  62c3              STR      r3,[r0,#0x2c]
;;;450    }
000016  bd10              POP      {r4,pc}
;;;451    
                          ENDP


                          AREA ||i.UART_SelectRS485Mode||, CODE, READONLY, ALIGN=2

                  UART_SelectRS485Mode PROC
;;;416     */
;;;417    void UART_SelectRS485Mode(UART_T* uart, uint32_t u32Mode, uint32_t u32Addr)
000000  b510              PUSH     {r4,lr}
;;;418    {
;;;419        /* Select UART RS485 function mode */
;;;420        uart->FUN_SEL = UART_FUNC_SEL_RS485;
000002  2303              MOVS     r3,#3
000004  6303              STR      r3,[r0,#0x30]
;;;421    
;;;422        /* Set RS585 configuration */
;;;423        uart->ALT_CSR &= ~(UART_ALT_CSR_RS485_NMM_Msk | UART_ALT_CSR_RS485_AUD_Msk | UART_ALT_CSR_RS485_AAD_Msk | UART_ALT_CSR_ADDR_MATCH_Msk);
000006  6ac3              LDR      r3,[r0,#0x2c]
000008  4c04              LDR      r4,|L12.28|
00000a  4023              ANDS     r3,r3,r4
00000c  62c3              STR      r3,[r0,#0x2c]
;;;424        uart->ALT_CSR |= (u32Mode | (u32Addr << UART_ALT_CSR_ADDR_MATCH_Pos));
00000e  6ac3              LDR      r3,[r0,#0x2c]
000010  0612              LSLS     r2,r2,#24
000012  430a              ORRS     r2,r2,r1
000014  4313              ORRS     r3,r3,r2
000016  62c3              STR      r3,[r0,#0x2c]
;;;425    }
000018  bd10              POP      {r4,pc}
;;;426    
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
                          DCD      0x00fff8ff

                          AREA ||i.UART_SetLine_Config||, CODE, READONLY, ALIGN=2

                  UART_SetLine_Config PROC
;;;295     */
;;;296    void UART_SetLine_Config(UART_T* uart, uint32_t u32baudrate, uint32_t u32data_width, uint32_t u32parity, uint32_t  u32stop_bits)
000000  b5ff              PUSH     {r0-r7,lr}
;;;297    {
000002  4605              MOV      r5,r0
;;;298        uint8_t u8UartClkSrcSel, u8UartClkDivNum;
;;;299        uint32_t u32ClkTbl[4] = {__HXT, 0, 0, __HIRC};
000004  481b              LDR      r0,|L13.116|
000006  460c              MOV      r4,r1                 ;297
000008  c80f              LDM      r0,{r0-r3}
00000a  b085              SUB      sp,sp,#0x14           ;297
00000c  466e              MOV      r6,sp
00000e  c60f              STM      r6!,{r0-r3}
;;;300        uint32_t u32Baud_Div = 0;
;;;301    
;;;302        /* Get UART clock source selection */
;;;303        u8UartClkSrcSel = (CLK->CLKSEL1 & CLK_CLKSEL1_UART_S_Msk) >> CLK_CLKSEL1_UART_S_Pos;
000010  4819              LDR      r0,|L13.120|
000012  6941              LDR      r1,[r0,#0x14]
;;;304    
;;;305        /* Get UART clock divider number */
;;;306        u8UartClkDivNum = (CLK->CLKDIV & CLK_CLKDIV_UART_N_Msk) >> CLK_CLKDIV_UART_N_Pos;
000014  6980              LDR      r0,[r0,#0x18]
;;;307    
;;;308        /* Get PLL clock frequency if UART clock source selection is PLL */
;;;309        if(u8UartClkSrcSel == 1)
;;;310            u32ClkTbl[u8UartClkSrcSel] = CLK_GetPLLClockFreq();
;;;311    
;;;312        /* Set UART baud rate */
;;;313        if(u32baudrate != 0)
;;;314        {
;;;315            u32Baud_Div = UART_BAUD_MODE2_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate);
;;;316    
;;;317            if(u32Baud_Div > 0xFFFF)
;;;318                uart->BAUD = (UART_BAUD_MODE0 | UART_BAUD_MODE0_DIVIDER((u32ClkTbl[u8UartClkSrcSel]) / (u8UartClkDivNum + 1), u32baudrate));
;;;319            else
;;;320                uart->BAUD = (UART_BAUD_MODE2 | u32Baud_Div);
;;;321        }
;;;322    
;;;323        /* Set UART line configuration */
;;;324        uart->LCR = u32data_width | u32parity | u32stop_bits;
;;;325    }
000016  0189              LSLS     r1,r1,#6
000018  0f8e              LSRS     r6,r1,#30
00001a  0500              LSLS     r0,r0,#20
00001c  0f07              LSRS     r7,r0,#28
00001e  2e01              CMP      r6,#1                 ;309
000020  d102              BNE      |L13.40|
000022  f7fffffe          BL       CLK_GetPLLClockFreq
000026  9001              STR      r0,[sp,#4]            ;310
                  |L13.40|
000028  2c00              CMP      r4,#0                 ;313
00002a  d01b              BEQ      |L13.100|
00002c  00b1              LSLS     r1,r6,#2              ;315
00002e  4668              MOV      r0,sp                 ;315
000030  5840              LDR      r0,[r0,r1]            ;315
000032  1c79              ADDS     r1,r7,#1              ;315
000034  f7fffffe          BL       __aeabi_uidivmod
000038  4606              MOV      r6,r0                 ;315
00003a  0861              LSRS     r1,r4,#1              ;315
00003c  1840              ADDS     r0,r0,r1              ;315
00003e  4621              MOV      r1,r4                 ;315
000040  f7fffffe          BL       __aeabi_uidivmod
000044  490d              LDR      r1,|L13.124|
000046  1e80              SUBS     r0,r0,#2              ;317
000048  4288              CMP      r0,r1                 ;317
00004a  d907              BLS      |L13.92|
00004c  00e1              LSLS     r1,r4,#3              ;318
00004e  1870              ADDS     r0,r6,r1              ;318
000050  4621              MOV      r1,r4                 ;318
000052  f7fffffe          BL       __aeabi_uidivmod
000056  0900              LSRS     r0,r0,#4              ;318
000058  1e80              SUBS     r0,r0,#2              ;318
00005a  e002              B        |L13.98|
                  |L13.92|
00005c  2103              MOVS     r1,#3                 ;320
00005e  0709              LSLS     r1,r1,#28             ;320
000060  4308              ORRS     r0,r0,r1              ;320
                  |L13.98|
000062  6268              STR      r0,[r5,#0x24]         ;318
                  |L13.100|
000064  9908              LDR      r1,[sp,#0x20]         ;324
000066  9807              LDR      r0,[sp,#0x1c]         ;324
000068  4308              ORRS     r0,r0,r1              ;324
00006a  990e              LDR      r1,[sp,#0x38]         ;324
00006c  4308              ORRS     r0,r0,r1              ;324
00006e  60e8              STR      r0,[r5,#0xc]          ;324
000070  b009              ADD      sp,sp,#0x24
000072  bdf0              POP      {r4-r7,pc}
;;;326    
                          ENDP

                  |L13.116|
                          DCD      ||.constdata||+0x10
                  |L13.120|
                          DCD      0x50000200
                  |L13.124|
                          DCD      0x0000ffff

                          AREA ||i.UART_SetTimeoutCnt||, CODE, READONLY, ALIGN=1

                  UART_SetTimeoutCnt PROC
;;;337     */
;;;338    void UART_SetTimeoutCnt(UART_T* uart, uint32_t u32TOC)
000000  6a02              LDR      r2,[r0,#0x20]
;;;339    {
;;;340        /* Set time-out interrupt comparator */
;;;341        uart->TOR = (uart->TOR & ~UART_TOR_TOIC_Msk) | (u32TOC);
000002  0a12              LSRS     r2,r2,#8
000004  0212              LSLS     r2,r2,#8
000006  430a              ORRS     r2,r2,r1
000008  6202              STR      r2,[r0,#0x20]
;;;342    
;;;343        /* Set time-out counter enable */
;;;344        uart->IER |= UART_IER_TIME_OUT_EN_Msk;
00000a  6841              LDR      r1,[r0,#4]
00000c  2201              MOVS     r2,#1
00000e  02d2              LSLS     r2,r2,#11
000010  4311              ORRS     r1,r1,r2
000012  6041              STR      r1,[r0,#4]
;;;345    }
000014  4770              BX       lr
;;;346    
                          ENDP


                          AREA ||i.UART_Write||, CODE, READONLY, ALIGN=1

                  UART_Write PROC
;;;463     */
;;;464    uint32_t UART_Write(UART_T* uart, uint8_t *pu8TxBuf, uint32_t u32WriteBytes)
000000  b570              PUSH     {r4-r6,lr}
;;;465    {
000002  4604              MOV      r4,r0
;;;466        uint32_t  u32Count, u32delayno;
;;;467    
;;;468        for(u32Count = 0; u32Count != u32WriteBytes; u32Count++)
000004  2000              MOVS     r0,#0
;;;469        {
;;;470            u32delayno = 0;
;;;471            while((uart->FSR & UART_FSR_TE_FLAG_Msk) == 0)   /* Wait Tx empty and Time-out manner */
;;;472            {
;;;473                u32delayno++;
;;;474                if(u32delayno >= 0x40000000)
000006  2501              MOVS     r5,#1
000008  07ad              LSLS     r5,r5,#30
00000a  e00c              B        |L15.38|
                  |L15.12|
00000c  2300              MOVS     r3,#0                 ;470
00000e  e004              B        |L15.26|
                  |L15.16|
000010  1c5b              ADDS     r3,r3,#1              ;471
000012  42ab              CMP      r3,r5
000014  d301              BCC      |L15.26|
;;;475                    return FALSE;
000016  2000              MOVS     r0,#0
;;;476            }
;;;477            uart->THR = pu8TxBuf[u32Count];    /* Send UART Data from buffer */
;;;478        }
;;;479    
;;;480        return u32Count;
;;;481    
;;;482    }
000018  bd70              POP      {r4-r6,pc}
                  |L15.26|
00001a  69a6              LDR      r6,[r4,#0x18]         ;471
00001c  00f6              LSLS     r6,r6,#3              ;471
00001e  d5f7              BPL      |L15.16|
000020  5c0b              LDRB     r3,[r1,r0]            ;477
000022  6023              STR      r3,[r4,#0]            ;477
000024  1c40              ADDS     r0,r0,#1              ;477
                  |L15.38|
000026  4290              CMP      r0,r2                 ;468
000028  d1f0              BNE      |L15.12|
00002a  bd70              POP      {r4-r6,pc}
;;;483    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000
                          DCD      0x00b71b00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x01518000

;*** Start embedded assembler ***

#line 1 "Libraries\\StdDriver\\src\\uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REV16|
#line 118 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_uart_c_f12f5b44____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_uart_c_f12f5b44____REVSH|
#line 132
|__asm___6_uart_c_f12f5b44____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
