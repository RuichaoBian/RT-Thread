; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\completion.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\completion.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 -DRT_DEBUG --omf_browse=.\objects\completion.crf ..\..\components\drivers\src\completion.c]
                          THUMB

                          AREA ||i.rt_completion_done||, CODE, READONLY, ALIGN=2

                  rt_completion_done PROC
;;;110    
;;;111    void rt_completion_done(struct rt_completion *completion)
000000  b570              PUSH     {r4-r6,lr}
;;;112    {
000002  0004              MOVS     r4,r0
000004  d104              BNE      |L1.16|
;;;113        rt_base_t level;
;;;114        RT_ASSERT(completion != RT_NULL);
000006  2272              MOVS     r2,#0x72
000008  490f              LDR      r1,|L1.72|
00000a  a010              ADR      r0,|L1.76|
00000c  f7fffffe          BL       rt_assert_handler
                  |L1.16|
;;;115    
;;;116        if (completion->flag == RT_COMPLETED)
000010  6820              LDR      r0,[r4,#0]
000012  2801              CMP      r0,#1
000014  d00c              BEQ      |L1.48|
;;;117            return;
;;;118    
;;;119        level = rt_hw_interrupt_disable();
000016  f7fffffe          BL       rt_hw_interrupt_disable
00001a  4605              MOV      r5,r0
;;;120        completion->flag = RT_COMPLETED;
00001c  2001              MOVS     r0,#1
;;;121    
;;;122        if (!rt_list_isempty(&(completion->suspended_list)))
00001e  6020              STR      r0,[r4,#0]
000020  1d20              ADDS     r0,r4,#4
000022  f7fffffe          BL       rt_list_isempty
000026  2800              CMP      r0,#0
000028  d003              BEQ      |L1.50|
;;;123        {
;;;124            /* there is one thread in suspended list */
;;;125            struct rt_thread *thread;
;;;126    
;;;127            /* get thread entry */
;;;128            thread = rt_list_entry(completion->suspended_list.next,
;;;129                                   struct rt_thread,
;;;130                                   tlist);
;;;131    
;;;132            /* resume it */
;;;133            rt_thread_resume(thread);
;;;134            rt_hw_interrupt_enable(level);
;;;135    
;;;136            /* perform a schedule */
;;;137            rt_schedule();
;;;138        }
;;;139        else
;;;140        {
;;;141            rt_hw_interrupt_enable(level);
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       rt_hw_interrupt_enable
                  |L1.48|
;;;142        }
;;;143    }
000030  bd70              POP      {r4-r6,pc}
                  |L1.50|
000032  6860              LDR      r0,[r4,#4]            ;128
000034  3814              SUBS     r0,r0,#0x14           ;128
000036  f7fffffe          BL       rt_thread_resume
00003a  4628              MOV      r0,r5                 ;134
00003c  f7fffffe          BL       rt_hw_interrupt_enable
000040  f7fffffe          BL       rt_schedule
000044  bd70              POP      {r4-r6,pc}
;;;144    RTM_EXPORT(rt_completion_done);
                          ENDP

000046  0000              DCW      0x0000
                  |L1.72|
                          DCD      ||.constdata||+0x26
                  |L1.76|
00004c  636f6d70          DCB      "completion != RT_NULL",0
000050  6c657469
000054  6f6e2021
000058  3d205254
00005c  5f4e554c
000060  4c00    
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.rt_completion_init||, CODE, READONLY, ALIGN=2

                  rt_completion_init PROC
;;;31     
;;;32     void rt_completion_init(struct rt_completion *completion)
000000  b510              PUSH     {r4,lr}
;;;33     {
000002  0004              MOVS     r4,r0
000004  d104              BNE      |L2.16|
;;;34         rt_base_t level;
;;;35         RT_ASSERT(completion != RT_NULL);
000006  2223              MOVS     r2,#0x23
000008  4906              LDR      r1,|L2.36|
00000a  a007              ADR      r0,|L2.40|
00000c  f7fffffe          BL       rt_assert_handler
                  |L2.16|
;;;36     
;;;37         level = rt_hw_interrupt_disable();
000010  f7fffffe          BL       rt_hw_interrupt_disable
;;;38         completion->flag = RT_UNCOMPLETED;
000014  2100              MOVS     r1,#0
000016  c402              STM      r4!,{r1}
000018  6064              STR      r4,[r4,#4]
00001a  6024              STR      r4,[r4,#0]
;;;39         rt_list_init(&completion->suspended_list);
;;;40         rt_hw_interrupt_enable(level);
00001c  f7fffffe          BL       rt_hw_interrupt_enable
;;;41     }
000020  bd10              POP      {r4,pc}
;;;42     RTM_EXPORT(rt_completion_init);
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      ||.constdata||
                  |L2.40|
000028  636f6d70          DCB      "completion != RT_NULL",0
00002c  6c657469
000030  6f6e2021
000034  3d205254
000038  5f4e554c
00003c  4c00    
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||i.rt_completion_wait||, CODE, READONLY, ALIGN=2

                  rt_completion_wait PROC
;;;43     
;;;44     rt_err_t rt_completion_wait(struct rt_completion *completion,
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;45                                 rt_int32_t            timeout)
;;;46     {
000002  b081              SUB      sp,sp,#4
000004  0004              MOVS     r4,r0
000006  d104              BNE      |L3.18|
;;;47         rt_err_t result;
;;;48         rt_base_t level;
;;;49         rt_thread_t thread;
;;;50         RT_ASSERT(completion != RT_NULL);
000008  2232              MOVS     r2,#0x32
00000a  492d              LDR      r1,|L3.192|
00000c  a02d              ADR      r0,|L3.196|
00000e  f7fffffe          BL       rt_assert_handler
                  |L3.18|
;;;51     
;;;52         result = RT_EOK;
000012  2500              MOVS     r5,#0
;;;53         thread = rt_thread_self();
000014  f7fffffe          BL       rt_thread_self
000018  4606              MOV      r6,r0
;;;54     
;;;55         level = rt_hw_interrupt_disable();
00001a  f7fffffe          BL       rt_hw_interrupt_disable
;;;56         if (completion->flag != RT_COMPLETED)
00001e  9000              STR      r0,[sp,#0]
000020  6820              LDR      r0,[r4,#0]
000022  2700              MOVS     r7,#0
000024  2801              CMP      r0,#1
000026  d042              BEQ      |L3.174|
;;;57         {
;;;58             /* only one thread can suspend on complete */
;;;59             RT_ASSERT(rt_list_isempty(&(completion->suspended_list)));
000028  1d20              ADDS     r0,r4,#4
00002a  f7fffffe          BL       rt_list_isempty
00002e  2800              CMP      r0,#0
000030  d104              BNE      |L3.60|
000032  223b              MOVS     r2,#0x3b
000034  4922              LDR      r1,|L3.192|
000036  a029              ADR      r0,|L3.220|
000038  f7fffffe          BL       rt_assert_handler
                  |L3.60|
;;;60     
;;;61             if (timeout == 0)
00003c  9802              LDR      r0,[sp,#8]
00003e  2800              CMP      r0,#0
000040  d03b              BEQ      |L3.186|
;;;62             {
;;;63                 result = -RT_ETIMEOUT;
;;;64                 goto __exit;
;;;65             }
;;;66             else
;;;67             {
;;;68                 /* reset thread error number */
;;;69                 thread->error = RT_EOK;
;;;70     
;;;71                 /* suspend thread */
;;;72                 rt_thread_suspend(thread);
000042  4630              MOV      r0,r6
000044  6337              STR      r7,[r6,#0x30]
000046  f7fffffe          BL       rt_thread_suspend
;;;73                 /* add to suspended list */
;;;74                 rt_list_insert_before(&(completion->suspended_list),
00004a  4635              MOV      r5,r6
00004c  68a1              LDR      r1,[r4,#8]
00004e  3514              ADDS     r5,r5,#0x14
000050  600d              STR      r5,[r1,#0]
000052  68a1              LDR      r1,[r4,#8]
000054  61b1              STR      r1,[r6,#0x18]
000056  1d20              ADDS     r0,r4,#4
000058  60a5              STR      r5,[r4,#8]
;;;75                                       &(thread->tlist));
;;;76     
;;;77                 /* current context checking */
;;;78                 RT_DEBUG_NOT_IN_INTERRUPT;
00005a  6170              STR      r0,[r6,#0x14]
00005c  f7fffffe          BL       rt_hw_interrupt_disable
000060  4605              MOV      r5,r0
000062  f7fffffe          BL       rt_interrupt_get_nest
000066  2800              CMP      r0,#0
000068  d008              BEQ      |L3.124|
00006a  4915              LDR      r1,|L3.192|
00006c  a027              ADR      r0,|L3.268|
00006e  f7fffffe          BL       rt_kprintf
000072  224e              MOVS     r2,#0x4e
000074  4912              LDR      r1,|L3.192|
000076  a02e              ADR      r0,|L3.304|
000078  f7fffffe          BL       rt_assert_handler
                  |L3.124|
00007c  4628              MOV      r0,r5
00007e  f7fffffe          BL       rt_hw_interrupt_enable
;;;79     
;;;80                 /* start timer */
;;;81                 if (timeout > 0)
000082  9802              LDR      r0,[sp,#8]
000084  2800              CMP      r0,#0
000086  dd09              BLE      |L3.156|
;;;82                 {
;;;83                     /* reset the timeout of thread timer and start it */
;;;84                     rt_timer_control(&(thread->thread_timer),
000088  4630              MOV      r0,r6
00008a  304c              ADDS     r0,r0,#0x4c
00008c  aa02              ADD      r2,sp,#8
00008e  2100              MOVS     r1,#0
000090  4605              MOV      r5,r0
000092  f7fffffe          BL       rt_timer_control
000096  4628              MOV      r0,r5
;;;85                                      RT_TIMER_CTRL_SET_TIME,
;;;86                                      &timeout);
;;;87                     rt_timer_start(&(thread->thread_timer));
000098  f7fffffe          BL       rt_timer_start
                  |L3.156|
;;;88                 }
;;;89                 /* enable interrupt */
;;;90                 rt_hw_interrupt_enable(level);
00009c  9800              LDR      r0,[sp,#0]
00009e  f7fffffe          BL       rt_hw_interrupt_enable
;;;91     
;;;92                 /* do schedule */
;;;93                 rt_schedule();
0000a2  f7fffffe          BL       rt_schedule
;;;94     
;;;95                 /* thread is waked up */
;;;96                 result = thread->error;
;;;97     
;;;98                 level = rt_hw_interrupt_disable();
0000a6  6b35              LDR      r5,[r6,#0x30]
0000a8  f7fffffe          BL       rt_hw_interrupt_disable
0000ac  9000              STR      r0,[sp,#0]
                  |L3.174|
;;;99             }
;;;100        }
;;;101        /* clean completed flag */
;;;102        completion->flag = RT_UNCOMPLETED;
0000ae  6027              STR      r7,[r4,#0]
                  |L3.176|
;;;103    
;;;104    __exit:
;;;105        rt_hw_interrupt_enable(level);
0000b0  9800              LDR      r0,[sp,#0]
0000b2  f7fffffe          BL       rt_hw_interrupt_enable
;;;106    
;;;107        return result;
0000b6  4628              MOV      r0,r5
;;;108    }
0000b8  bdfe              POP      {r1-r7,pc}
                  |L3.186|
0000ba  2501              MOVS     r5,#1                 ;63
0000bc  43ed              MVNS     r5,r5                 ;63
0000be  e7f7              B        |L3.176|
;;;109    RTM_EXPORT(rt_completion_wait);
                          ENDP

                  |L3.192|
                          DCD      ||.constdata||+0x13
                  |L3.196|
0000c4  636f6d70          DCB      "completion != RT_NULL",0
0000c8  6c657469
0000cc  6f6e2021
0000d0  3d205254
0000d4  5f4e554c
0000d8  4c00    
0000da  00                DCB      0
0000db  00                DCB      0
                  |L3.220|
0000dc  72745f6c          DCB      "rt_list_isempty(&(completion->suspended_list))",0
0000e0  6973745f
0000e4  6973656d
0000e8  70747928
0000ec  2628636f
0000f0  6d706c65
0000f4  74696f6e
0000f8  2d3e7375
0000fc  7370656e
000100  6465645f
000104  6c697374
000108  292900  
00010b  00                DCB      0
                  |L3.268|
00010c  46756e63          DCB      "Function[%s] shall not used in ISR\n",0
000110  74696f6e
000114  5b25735d
000118  20736861
00011c  6c6c206e
000120  6f742075
000124  73656420
000128  696e2049
00012c  53520a00
                  |L3.304|
000130  3000              DCB      "0",0
000132  00                DCB      0
000133  00                DCB      0

                          AREA ||i.rt_list_isempty||, CODE, READONLY, ALIGN=1

                  rt_list_isempty PROC
;;;102     */
;;;103    rt_inline int rt_list_isempty(const rt_list_t *l)
000000  6801              LDR      r1,[r0,#0]
;;;104    {
;;;105        return l->next == l;
000002  4281              CMP      r1,r0
000004  d101              BNE      |L4.10|
000006  2001              MOVS     r0,#1
;;;106    }
000008  4770              BX       lr
                  |L4.10|
00000a  2000              MOVS     r0,#0                 ;105
00000c  4770              BX       lr
;;;107    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  72745f63          DCB      0x72,0x74,0x5f,0x63
000004  6f6d706c          DCB      0x6f,0x6d,0x70,0x6c
000008  6574696f          DCB      0x65,0x74,0x69,0x6f
00000c  6e5f696e          DCB      0x6e,0x5f,0x69,0x6e
000010  697400            DCB      0x69,0x74,0x00
                  |symbol_number.16|
000013  72                DCB      0x72
000014  745f636f          DCB      0x74,0x5f,0x63,0x6f
000018  6d706c65          DCB      0x6d,0x70,0x6c,0x65
00001c  74696f6e          DCB      0x74,0x69,0x6f,0x6e
000020  5f776169          DCB      0x5f,0x77,0x61,0x69
000024  7400              DCB      0x74,0x00
                  |symbol_number.17|
000026  7274              DCB      0x72,0x74
000028  5f636f6d          DCB      0x5f,0x63,0x6f,0x6d
00002c  706c6574          DCB      0x70,0x6c,0x65,0x74
000030  696f6e5f          DCB      0x69,0x6f,0x6e,0x5f
000034  646f6e65          DCB      0x64,0x6f,0x6e,0x65
000038  00                DCB      0x00
