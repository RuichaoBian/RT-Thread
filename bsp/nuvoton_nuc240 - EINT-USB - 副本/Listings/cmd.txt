; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\cmd.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\cmd.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 -DRT_DEBUG --omf_browse=.\objects\cmd.crf ..\..\components\finsh\cmd.c]
                          THUMB

                          AREA ||i._list_device||, CODE, READONLY, ALIGN=2

                  _list_device PROC
;;;509    #ifdef RT_USING_DEVICE
;;;510    static long _list_device(struct rt_list_node *list)
000000  b5f0              PUSH     {r4-r7,lr}
;;;511    {
000002  b097              SUB      sp,sp,#0x5c
000004  4606              MOV      r6,r0
;;;512        int maxlen;
;;;513        struct rt_device *device;
;;;514        struct rt_list_node *node;
;;;515        char *const device_type_str[] =
000006  2250              MOVS     r2,#0x50
000008  491a              LDR      r1,|L1.116|
00000a  a802              ADD      r0,sp,#8
00000c  f7fffffe          BL       __aeabi_memcpy4
;;;516        {
;;;517            "Character Device",
;;;518            "Block Device",
;;;519            "Network Interface",
;;;520            "MTD Device",
;;;521            "CAN Device",
;;;522            "RTC",
;;;523            "Sound Device",
;;;524            "Graphic Device",
;;;525            "I2C Bus",
;;;526            "USB Slave Device",
;;;527            "USB Host Bus",
;;;528            "SPI Bus",
;;;529            "SPI Device",
;;;530            "SDIO Bus",
;;;531            "PM Pseudo Device",
;;;532            "Pipe",
;;;533            "Portal Device",
;;;534            "Timer Device",
;;;535            "Miscellaneous Device",
;;;536            "Unknown"
;;;537        };
;;;538        int item_title_len;
;;;539        const char *item_title = "device";
000010  a719              ADR      r7,|L1.120|
;;;540    
;;;541        item_title_len = rt_strlen(item_title);
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       rt_strlen
000018  4604              MOV      r4,r0
;;;542        maxlen = object_name_maxlen(list);
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       object_name_maxlen
000020  4605              MOV      r5,r0
;;;543        if(maxlen < item_title_len) maxlen = item_title_len;
000022  42a0              CMP      r0,r4
000024  da00              BGE      |L1.40|
000026  4625              MOV      r5,r4
                  |L1.40|
;;;544    
;;;545        rt_kprintf("%-*.s         type         ref count\n", maxlen, item_title); object_split(maxlen);
000028  463a              MOV      r2,r7
00002a  4629              MOV      r1,r5
00002c  a014              ADR      r0,|L1.128|
00002e  f7fffffe          BL       rt_kprintf
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       object_split
;;;546        rt_kprintf(     " -------------------- ----------\n");
000038  a01b              ADR      r0,|L1.168|
00003a  f7fffffe          BL       rt_kprintf
00003e  af02              ADD      r7,sp,#8              ;515
;;;547        for (node = list->next; node != list; node = node->next)
000040  6834              LDR      r4,[r6,#0]
000042  e011              B        |L1.104|
                  |L1.68|
;;;548        {
;;;549            device = (struct rt_device *)(rt_list_entry(node, struct rt_object, list));
000044  4623              MOV      r3,r4
;;;550            rt_kprintf("%-*.*s %-20s %-8d\n",
000046  7a20              LDRB     r0,[r4,#8]
000048  3b0c              SUBS     r3,r3,#0xc            ;549
00004a  7ba1              LDRB     r1,[r4,#0xe]
00004c  2813              CMP      r0,#0x13
00004e  d802              BHI      |L1.86|
;;;551                       maxlen, RT_NAME_MAX,
;;;552                       device->parent.name,
;;;553                       (device->type <= RT_Device_Class_Unknown) ?
;;;554                       device_type_str[device->type] :
000050  0080              LSLS     r0,r0,#2
000052  5838              LDR      r0,[r7,r0]
000054  e000              B        |L1.88|
                  |L1.86|
;;;555                       device_type_str[RT_Device_Class_Unknown],
000056  9815              LDR      r0,[sp,#0x54]
                  |L1.88|
000058  9101              STR      r1,[sp,#4]
00005a  9000              STR      r0,[sp,#0]
00005c  2208              MOVS     r2,#8
00005e  4629              MOV      r1,r5
000060  a01a              ADR      r0,|L1.204|
000062  f7fffffe          BL       rt_kprintf
000066  6824              LDR      r4,[r4,#0]            ;547
                  |L1.104|
000068  42b4              CMP      r4,r6                 ;547
00006a  d1eb              BNE      |L1.68|
;;;556                       device->ref_count);
;;;557        }
;;;558    
;;;559        return 0;
00006c  2000              MOVS     r0,#0
;;;560    }
00006e  b017              ADD      sp,sp,#0x5c
000070  bdf0              POP      {r4-r7,pc}
;;;561    
                          ENDP

000072  0000              DCW      0x0000
                  |L1.116|
                          DCD      ||.constdata||
                  |L1.120|
000078  64657669          DCB      "device",0
00007c  636500  
00007f  00                DCB      0
                  |L1.128|
000080  252d2a2e          DCB      "%-*.s         type         ref count\n",0
000084  73202020
000088  20202020
00008c  20207479
000090  70652020
000094  20202020
000098  20202072
00009c  65662063
0000a0  6f756e74
0000a4  0a00    
0000a6  00                DCB      0
0000a7  00                DCB      0
                  |L1.168|
0000a8  202d2d2d          DCB      " -------------------- ----------\n",0
0000ac  2d2d2d2d
0000b0  2d2d2d2d
0000b4  2d2d2d2d
0000b8  2d2d2d2d
0000bc  2d202d2d
0000c0  2d2d2d2d
0000c4  2d2d2d2d
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L1.204|
0000cc  252d2a2e          DCB      "%-*.*s %-20s %-8d\n",0
0000d0  2a732025
0000d4  2d323073
0000d8  20252d38
0000dc  640a00  
0000df  00                DCB      0

                          AREA ||i._list_event||, CODE, READONLY, ALIGN=2

                  _list_event PROC
;;;215    #ifdef RT_USING_EVENT
;;;216    static long _list_event(struct rt_list_node *list)
000000  b5fe              PUSH     {r1-r7,lr}
;;;217    {
000002  4606              MOV      r6,r0
;;;218        int maxlen;
;;;219        struct rt_event *e;
;;;220        struct rt_list_node *node;
;;;221    
;;;222        maxlen = object_name_maxlen(list);
000004  f7fffffe          BL       object_name_maxlen
000008  4607              MOV      r7,r0
;;;223    
;;;224        rt_kprintf("%-*.s      set    suspend thread\n", maxlen, "event"); object_split(maxlen);
00000a  4601              MOV      r1,r0
00000c  a21a              ADR      r2,|L2.120|
00000e  a01c              ADR      r0,|L2.128|
000010  f7fffffe          BL       rt_kprintf
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       object_split
;;;225        rt_kprintf(     "  ---------- --------------\n");
00001a  a022              ADR      r0,|L2.164|
00001c  f7fffffe          BL       rt_kprintf
;;;226        for (node = list->next; node != list; node = node->next)
000020  6834              LDR      r4,[r6,#0]
000022  e011              B        |L2.72|
                  |L2.36|
;;;227        {
;;;228            e = (struct rt_event *)(rt_list_entry(node, struct rt_object, list));
;;;229            if (!rt_list_isempty(&e->parent.suspend_thread))
000024  4620              MOV      r0,r4
000026  4625              MOV      r5,r4                 ;228
000028  3008              ADDS     r0,r0,#8
00002a  3d0c              SUBS     r5,r5,#0xc            ;228
00002c  9002              STR      r0,[sp,#8]
00002e  f7fffffe          BL       rt_list_isempty
000032  2800              CMP      r0,#0
000034  d00c              BEQ      |L2.80|
;;;230            {
;;;231                rt_kprintf("%-*.*s  0x%08x %03d:",
;;;232                           maxlen, RT_NAME_MAX,
;;;233                           e->parent.parent.name,
;;;234                           e->set,
;;;235                           rt_list_len(&e->parent.suspend_thread));
;;;236                show_wait_queue(&(e->parent.suspend_thread));
;;;237                rt_kprintf("\n");
;;;238            }
;;;239            else
;;;240            {
;;;241                rt_kprintf("%-*.*s  0x%08x 0\n",
000036  69e8              LDR      r0,[r5,#0x1c]
000038  9000              STR      r0,[sp,#0]
00003a  462b              MOV      r3,r5
00003c  2208              MOVS     r2,#8
00003e  4639              MOV      r1,r7
000040  a020              ADR      r0,|L2.196|
000042  f7fffffe          BL       rt_kprintf
                  |L2.70|
000046  6824              LDR      r4,[r4,#0]            ;226
                  |L2.72|
000048  42b4              CMP      r4,r6                 ;226
00004a  d1eb              BNE      |L2.36|
;;;242                           maxlen, RT_NAME_MAX, e->parent.parent.name, e->set);
;;;243            }
;;;244        }
;;;245    
;;;246        return 0;
00004c  2000              MOVS     r0,#0
;;;247    }
00004e  bdfe              POP      {r1-r7,pc}
                  |L2.80|
000050  9802              LDR      r0,[sp,#8]            ;231
000052  f7fffffe          BL       rt_list_len
000056  69e9              LDR      r1,[r5,#0x1c]         ;231
000058  9100              STR      r1,[sp,#0]            ;231
00005a  9001              STR      r0,[sp,#4]            ;231
00005c  462b              MOV      r3,r5                 ;231
00005e  2208              MOVS     r2,#8                 ;231
000060  4639              MOV      r1,r7                 ;231
000062  a01d              ADR      r0,|L2.216|
000064  f7fffffe          BL       rt_kprintf
000068  9802              LDR      r0,[sp,#8]            ;236
00006a  f7fffffe          BL       show_wait_queue
00006e  4820              LDR      r0,|L2.240|
000070  f7fffffe          BL       rt_kprintf
000074  e7e7              B        |L2.70|
;;;248    
                          ENDP

000076  0000              DCW      0x0000
                  |L2.120|
000078  6576656e          DCB      "event",0
00007c  7400    
00007e  00                DCB      0
00007f  00                DCB      0
                  |L2.128|
000080  252d2a2e          DCB      "%-*.s      set    suspend thread\n",0
000084  73202020
000088  20202073
00008c  65742020
000090  20207375
000094  7370656e
000098  64207468
00009c  72656164
0000a0  0a00    
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L2.164|
0000a4  20202d2d          DCB      "  ---------- --------------\n",0
0000a8  2d2d2d2d
0000ac  2d2d2d2d
0000b0  202d2d2d
0000b4  2d2d2d2d
0000b8  2d2d2d2d
0000bc  2d2d2d0a
0000c0  00      
0000c1  00                DCB      0
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L2.196|
0000c4  252d2a2e          DCB      "%-*.*s  0x%08x 0\n",0
0000c8  2a732020
0000cc  30782530
0000d0  38782030
0000d4  0a00    
0000d6  00                DCB      0
0000d7  00                DCB      0
                  |L2.216|
0000d8  252d2a2e          DCB      "%-*.*s  0x%08x %03d:",0
0000dc  2a732020
0000e0  30782530
0000e4  38782025
0000e8  3033643a
0000ec  00      
0000ed  00                DCB      0
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L2.240|
                          DCD      ||i._list_sem||+0xa8

                          AREA ||i._list_mailbox||, CODE, READONLY, ALIGN=2

                  _list_mailbox PROC
;;;290    #ifdef RT_USING_MAILBOX
;;;291    static long _list_mailbox(struct rt_list_node *list)
000000  b5f0              PUSH     {r4-r7,lr}
;;;292    {
000002  4607              MOV      r7,r0
;;;293        int maxlen;
;;;294        struct rt_mailbox *m;
;;;295        struct rt_list_node *node;
;;;296        int item_title_len;
;;;297        const char *item_title = "mailbox";
000004  a525              ADR      r5,|L3.156|
000006  b085              SUB      sp,sp,#0x14           ;292
;;;298    
;;;299        item_title_len = rt_strlen(item_title);
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       rt_strlen
00000e  4604              MOV      r4,r0
;;;300        maxlen = object_name_maxlen(list);
000010  4638              MOV      r0,r7
000012  f7fffffe          BL       object_name_maxlen
000016  4606              MOV      r6,r0
;;;301        if(maxlen < item_title_len) maxlen = item_title_len;
000018  42a0              CMP      r0,r4
00001a  da00              BGE      |L3.30|
00001c  4626              MOV      r6,r4
                  |L3.30|
;;;302    
;;;303        rt_kprintf("%-*.s entry size suspend thread\n", maxlen, item_title); object_split(maxlen);
00001e  462a              MOV      r2,r5
000020  4631              MOV      r1,r6
000022  a020              ADR      r0,|L3.164|
000024  f7fffffe          BL       rt_kprintf
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       object_split
;;;304        rt_kprintf(     " ----  ---- --------------\n");
00002e  a026              ADR      r0,|L3.200|
000030  f7fffffe          BL       rt_kprintf
;;;305        for (node = list->next; node != list; node = node->next)
000034  683d              LDR      r5,[r7,#0]
000036  e017              B        |L3.104|
                  |L3.56|
;;;306        {
;;;307            m = (struct rt_mailbox *)(rt_list_entry(node, struct rt_object, list));
;;;308            if (!rt_list_isempty(&m->parent.suspend_thread))
000038  4628              MOV      r0,r5
00003a  462c              MOV      r4,r5                 ;307
00003c  3008              ADDS     r0,r0,#8
00003e  3c0c              SUBS     r4,r4,#0xc            ;307
000040  9003              STR      r0,[sp,#0xc]
000042  f7fffffe          BL       rt_list_isempty
000046  2800              CMP      r0,#0
000048  9803              LDR      r0,[sp,#0xc]
00004a  d012              BEQ      |L3.114|
;;;309            {
;;;310                rt_kprintf("%-*.*s %04d  %04d %d:",
;;;311                           maxlen, RT_NAME_MAX,
;;;312                           m->parent.parent.name,
;;;313                           m->entry,
;;;314                           m->size,
;;;315                           rt_list_len(&m->parent.suspend_thread));
;;;316                show_wait_queue(&(m->parent.suspend_thread));
;;;317                rt_kprintf("\n");
;;;318            }
;;;319            else
;;;320            {
;;;321                rt_kprintf("%-*.*s %04d  %04d %d\n",
00004c  f7fffffe          BL       rt_list_len
000050  8c21              LDRH     r1,[r4,#0x20]
000052  8c62              LDRH     r2,[r4,#0x22]
000054  9200              STR      r2,[sp,#0]
000056  9101              STR      r1,[sp,#4]
000058  9002              STR      r0,[sp,#8]
00005a  4623              MOV      r3,r4
00005c  2208              MOVS     r2,#8
00005e  4631              MOV      r1,r6
000060  a020              ADR      r0,|L3.228|
000062  f7fffffe          BL       rt_kprintf
                  |L3.102|
000066  682d              LDR      r5,[r5,#0]            ;305
                  |L3.104|
000068  42bd              CMP      r5,r7                 ;305
00006a  d1e5              BNE      |L3.56|
;;;322                           maxlen, RT_NAME_MAX,
;;;323                           m->parent.parent.name,
;;;324                           m->entry,
;;;325                           m->size,
;;;326                           rt_list_len(&m->parent.suspend_thread));
;;;327            }
;;;328        }
;;;329    
;;;330        return 0;
00006c  2000              MOVS     r0,#0
;;;331    }
00006e  b005              ADD      sp,sp,#0x14
000070  bdf0              POP      {r4-r7,pc}
                  |L3.114|
000072  f7fffffe          BL       rt_list_len
000076  8c21              LDRH     r1,[r4,#0x20]         ;310
000078  8c62              LDRH     r2,[r4,#0x22]         ;310
00007a  9200              STR      r2,[sp,#0]            ;310
00007c  9101              STR      r1,[sp,#4]            ;310
00007e  9002              STR      r0,[sp,#8]            ;310
000080  4623              MOV      r3,r4                 ;310
000082  2208              MOVS     r2,#8                 ;310
000084  4631              MOV      r1,r6                 ;310
000086  a01d              ADR      r0,|L3.252|
000088  f7fffffe          BL       rt_kprintf
00008c  9803              LDR      r0,[sp,#0xc]          ;316
00008e  f7fffffe          BL       show_wait_queue
000092  a019              ADR      r0,|L3.248|
000094  f7fffffe          BL       rt_kprintf
000098  e7e5              B        |L3.102|
;;;332    
                          ENDP

00009a  0000              DCW      0x0000
                  |L3.156|
00009c  6d61696c          DCB      "mailbox",0
0000a0  626f7800
                  |L3.164|
0000a4  252d2a2e          DCB      "%-*.s entry size suspend thread\n",0
0000a8  7320656e
0000ac  74727920
0000b0  73697a65
0000b4  20737573
0000b8  70656e64
0000bc  20746872
0000c0  6561640a
0000c4  00      
0000c5  00                DCB      0
0000c6  00                DCB      0
0000c7  00                DCB      0
                  |L3.200|
0000c8  202d2d2d          DCB      " ----  ---- --------------\n",0
0000cc  2d20202d
0000d0  2d2d2d20
0000d4  2d2d2d2d
0000d8  2d2d2d2d
0000dc  2d2d2d2d
0000e0  2d2d0a00
                  |L3.228|
0000e4  252d2a2e          DCB      "%-*.*s %04d  %04d %d"
0000e8  2a732025
0000ec  30346420
0000f0  20253034
0000f4  64202564
                  |L3.248|
0000f8  0a00              DCB      "\n",0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L3.252|
0000fc  252d2a2e          DCB      "%-*.*s %04d  %04d %d:",0
000100  2a732025
000104  30346420
000108  20253034
00010c  64202564
000110  3a00    
000112  00                DCB      0
000113  00                DCB      0

                          AREA ||i._list_mempool||, CODE, READONLY, ALIGN=2

                  _list_mempool PROC
;;;424    #ifdef RT_USING_MEMPOOL
;;;425    static long _list_mempool(struct rt_list_node *list)
000000  b5f0              PUSH     {r4-r7,lr}
;;;426    {
000002  b085              SUB      sp,sp,#0x14
000004  4606              MOV      r6,r0
;;;427        int maxlen;
;;;428        struct rt_mempool *mp;
;;;429        struct rt_list_node *node;
;;;430    
;;;431        maxlen = object_name_maxlen(list);
000006  f7fffffe          BL       object_name_maxlen
00000a  4607              MOV      r7,r0
;;;432    
;;;433        rt_kprintf("%-*.s block total free suspend thread\n", maxlen, "mempool"); object_split(maxlen);
00000c  4601              MOV      r1,r0
00000e  a218              ADR      r2,|L4.112|
000010  a019              ADR      r0,|L4.120|
000012  f7fffffe          BL       rt_kprintf
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       object_split
;;;434        rt_kprintf(     " ----  ----  ---- --------------\n");
00001c  a020              ADR      r0,|L4.160|
00001e  f7fffffe          BL       rt_kprintf
;;;435        for (node = list->next; node != list; node = node->next)
000022  6835              LDR      r5,[r6,#0]
000024  e01f              B        |L4.102|
                  |L4.38|
;;;436        {
;;;437            mp = (struct rt_mempool *)rt_list_entry(node, struct rt_object, list);
;;;438            if (mp->suspend_thread_count > 0)
000026  6aa8              LDR      r0,[r5,#0x28]
;;;439            {
;;;440                rt_kprintf("%-*.*s %04d  %04d  %04d %d:",
;;;441                           maxlen, RT_NAME_MAX,
;;;442                           mp->parent.name,
;;;443                           mp->block_size,
;;;444                           mp->block_total_count,
;;;445                           mp->block_free_count,
;;;446                           mp->suspend_thread_count);
;;;447                show_wait_queue(&(mp->suspend_thread));
;;;448                rt_kprintf("\n");
;;;449            }
;;;450            else
;;;451            {
;;;452                rt_kprintf("%-*.*s %04d  %04d  %04d %d\n",
000028  692b              LDR      r3,[r5,#0x10]
00002a  69aa              LDR      r2,[r5,#0x18]
00002c  69e9              LDR      r1,[r5,#0x1c]
00002e  462c              MOV      r4,r5                 ;437
000030  3c0c              SUBS     r4,r4,#0xc            ;437
000032  9300              STR      r3,[sp,#0]
000034  2800              CMP      r0,#0                 ;438
000036  9201              STR      r2,[sp,#4]
000038  9102              STR      r1,[sp,#8]
00003a  9003              STR      r0,[sp,#0xc]
00003c  4623              MOV      r3,r4
00003e  d00c              BEQ      |L4.90|
000040  2208              MOVS     r2,#8                 ;440
000042  4639              MOV      r1,r7                 ;440
000044  a01f              ADR      r0,|L4.196|
000046  f7fffffe          BL       rt_kprintf
00004a  4620              MOV      r0,r4                 ;447
00004c  302c              ADDS     r0,r0,#0x2c           ;447
00004e  f7fffffe          BL       show_wait_queue
000052  a01b              ADR      r0,|L4.192|
000054  f7fffffe          BL       rt_kprintf
000058  e004              B        |L4.100|
                  |L4.90|
00005a  2208              MOVS     r2,#8
00005c  4639              MOV      r1,r7
00005e  a020              ADR      r0,|L4.224|
000060  f7fffffe          BL       rt_kprintf
                  |L4.100|
000064  682d              LDR      r5,[r5,#0]            ;435
                  |L4.102|
000066  42b5              CMP      r5,r6                 ;435
000068  d1dd              BNE      |L4.38|
;;;453                           maxlen, RT_NAME_MAX,
;;;454                           mp->parent.name,
;;;455                           mp->block_size,
;;;456                           mp->block_total_count,
;;;457                           mp->block_free_count,
;;;458                           mp->suspend_thread_count);
;;;459            }
;;;460        }
;;;461    
;;;462        return 0;
00006a  2000              MOVS     r0,#0
;;;463    }
00006c  b005              ADD      sp,sp,#0x14
00006e  bdf0              POP      {r4-r7,pc}
;;;464    
                          ENDP

                  |L4.112|
000070  6d656d70          DCB      "mempool",0
000074  6f6f6c00
                  |L4.120|
000078  252d2a2e          DCB      "%-*.s block total free suspend thread\n",0
00007c  7320626c
000080  6f636b20
000084  746f7461
000088  6c206672
00008c  65652073
000090  75737065
000094  6e642074
000098  68726561
00009c  640a00  
00009f  00                DCB      0
                  |L4.160|
0000a0  202d2d2d          DCB      " ----  ----  ---- --------------"
0000a4  2d20202d
0000a8  2d2d2d20
0000ac  202d2d2d
0000b0  2d202d2d
0000b4  2d2d2d2d
0000b8  2d2d2d2d
0000bc  2d2d2d2d
                  |L4.192|
0000c0  0a00              DCB      "\n",0
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L4.196|
0000c4  252d2a2e          DCB      "%-*.*s %04d  %04d  %04d %d:",0
0000c8  2a732025
0000cc  30346420
0000d0  20253034
0000d4  64202025
0000d8  30346420
0000dc  25643a00
                  |L4.224|
0000e0  252d2a2e          DCB      "%-*.*s %04d  %04d  %04d %d\n",0
0000e4  2a732025
0000e8  30346420
0000ec  20253034
0000f0  64202025
0000f4  30346420
0000f8  25640a00

                          AREA ||i._list_msgqueue||, CODE, READONLY, ALIGN=2

                  _list_msgqueue PROC
;;;341    #ifdef RT_USING_MESSAGEQUEUE
;;;342    static long _list_msgqueue(struct rt_list_node *list)
000000  b5fe              PUSH     {r1-r7,lr}
;;;343    {
000002  4607              MOV      r7,r0
;;;344        int maxlen;
;;;345        struct rt_messagequeue *m;
;;;346        struct rt_list_node *node;
;;;347        int item_title_len;
;;;348        const char *item_title = "msgqueue";
000004  a522              ADR      r5,|L5.144|
;;;349    
;;;350        item_title_len = rt_strlen(item_title);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       rt_strlen
00000c  4604              MOV      r4,r0
;;;351        maxlen = object_name_maxlen(list);
00000e  4638              MOV      r0,r7
000010  f7fffffe          BL       object_name_maxlen
000014  4606              MOV      r6,r0
;;;352        if(maxlen < item_title_len) maxlen = item_title_len;
000016  42a0              CMP      r0,r4
000018  da00              BGE      |L5.28|
00001a  4626              MOV      r6,r4
                  |L5.28|
;;;353    
;;;354        rt_kprintf("%-*.s entry suspend thread\n", maxlen, item_title); object_split(maxlen);
00001c  462a              MOV      r2,r5
00001e  4631              MOV      r1,r6
000020  a01e              ADR      r0,|L5.156|
000022  f7fffffe          BL       rt_kprintf
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       object_split
;;;355        rt_kprintf(     " ----  --------------\n");
00002c  a022              ADR      r0,|L5.184|
00002e  f7fffffe          BL       rt_kprintf
;;;356        for (node = list->next; node != list; node = node->next)
000032  683c              LDR      r4,[r7,#0]
000034  e015              B        |L5.98|
                  |L5.54|
;;;357        {
;;;358            m = (struct rt_messagequeue *)(rt_list_entry(node, struct rt_object, list));
;;;359            if (!rt_list_isempty(&m->parent.suspend_thread))
000036  4620              MOV      r0,r4
000038  4625              MOV      r5,r4                 ;358
00003a  3008              ADDS     r0,r0,#8
00003c  3d0c              SUBS     r5,r5,#0xc            ;358
00003e  9002              STR      r0,[sp,#8]
000040  f7fffffe          BL       rt_list_isempty
000044  2800              CMP      r0,#0
000046  9802              LDR      r0,[sp,#8]
000048  d00f              BEQ      |L5.106|
;;;360            {
;;;361                rt_kprintf("%-*.*s %04d  %d:",
;;;362                           maxlen, RT_NAME_MAX,
;;;363                           m->parent.parent.name,
;;;364                           m->entry,
;;;365                           rt_list_len(&m->parent.suspend_thread));
;;;366                show_wait_queue(&(m->parent.suspend_thread));
;;;367                rt_kprintf("\n");
;;;368            }
;;;369            else
;;;370            {
;;;371                rt_kprintf("%-*.*s %04d  %d\n",
00004a  f7fffffe          BL       rt_list_len
00004e  8ca9              LDRH     r1,[r5,#0x24]
000050  9100              STR      r1,[sp,#0]
000052  9001              STR      r0,[sp,#4]
000054  462b              MOV      r3,r5
000056  2208              MOVS     r2,#8
000058  4631              MOV      r1,r6
00005a  a01d              ADR      r0,|L5.208|
00005c  f7fffffe          BL       rt_kprintf
                  |L5.96|
000060  6824              LDR      r4,[r4,#0]            ;356
                  |L5.98|
000062  42bc              CMP      r4,r7                 ;356
000064  d1e7              BNE      |L5.54|
;;;372                           maxlen, RT_NAME_MAX,
;;;373                           m->parent.parent.name,
;;;374                           m->entry,
;;;375                           rt_list_len(&m->parent.suspend_thread));
;;;376            }
;;;377        }
;;;378    
;;;379        return 0;
000066  2000              MOVS     r0,#0
;;;380    }
000068  bdfe              POP      {r1-r7,pc}
                  |L5.106|
00006a  f7fffffe          BL       rt_list_len
00006e  8ca9              LDRH     r1,[r5,#0x24]         ;361
000070  9100              STR      r1,[sp,#0]            ;361
000072  9001              STR      r0,[sp,#4]            ;361
000074  462b              MOV      r3,r5                 ;361
000076  2208              MOVS     r2,#8                 ;361
000078  4631              MOV      r1,r6                 ;361
00007a  a01a              ADR      r0,|L5.228|
00007c  f7fffffe          BL       rt_kprintf
000080  9802              LDR      r0,[sp,#8]            ;366
000082  f7fffffe          BL       show_wait_queue
000086  a01c              ADR      r0,|L5.248|
000088  f7fffffe          BL       rt_kprintf
00008c  e7e8              B        |L5.96|
;;;381    
                          ENDP

00008e  0000              DCW      0x0000
                  |L5.144|
000090  6d736771          DCB      "msgqueue",0
000094  75657565
000098  00      
000099  00                DCB      0
00009a  00                DCB      0
00009b  00                DCB      0
                  |L5.156|
00009c  252d2a2e          DCB      "%-*.s entry suspend thread\n",0
0000a0  7320656e
0000a4  74727920
0000a8  73757370
0000ac  656e6420
0000b0  74687265
0000b4  61640a00
                  |L5.184|
0000b8  202d2d2d          DCB      " ----  --------------\n",0
0000bc  2d20202d
0000c0  2d2d2d2d
0000c4  2d2d2d2d
0000c8  2d2d2d2d
0000cc  2d0a00  
0000cf  00                DCB      0
                  |L5.208|
0000d0  252d2a2e          DCB      "%-*.*s %04d  %d\n",0
0000d4  2a732025
0000d8  30346420
0000dc  2025640a
0000e0  00      
0000e1  00                DCB      0
0000e2  00                DCB      0
0000e3  00                DCB      0
                  |L5.228|
0000e4  252d2a2e          DCB      "%-*.*s %04d  %d:",0
0000e8  2a732025
0000ec  30346420
0000f0  2025643a
0000f4  00      
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L5.248|
0000f8  0a00              DCB      "\n",0
0000fa  00                DCB      0
0000fb  00                DCB      0

                          AREA ||i._list_mutex||, CODE, READONLY, ALIGN=2

                  _list_mutex PROC
;;;257    #ifdef RT_USING_MUTEX
;;;258    static long _list_mutex(struct rt_list_node *list)
000000  b5f0              PUSH     {r4-r7,lr}
;;;259    {
000002  b085              SUB      sp,sp,#0x14
000004  4606              MOV      r6,r0
;;;260        int maxlen;
;;;261        struct rt_mutex *m;
;;;262        struct rt_list_node *node;
;;;263    
;;;264        maxlen = object_name_maxlen(list);
000006  f7fffffe          BL       object_name_maxlen
;;;265        rt_kprintf("%-*.s   owner  hold suspend thread\n", maxlen, "mutex"); object_split(maxlen);
00000a  4601              MOV      r1,r0
00000c  9004              STR      r0,[sp,#0x10]
00000e  a212              ADR      r2,|L6.88|
000010  a013              ADR      r0,|L6.96|
000012  f7fffffe          BL       rt_kprintf
000016  9804              LDR      r0,[sp,#0x10]
000018  f7fffffe          BL       object_split
;;;266        rt_kprintf(     " -------- ---- --------------\n");
00001c  a019              ADR      r0,|L6.132|
00001e  f7fffffe          BL       rt_kprintf
;;;267        for (node = list->next; node != list; node = node->next)
;;;268        {
;;;269            m = (struct rt_mutex *)(rt_list_entry(node, struct rt_object, list));
;;;270            rt_kprintf("%-*.*s %-8.*s %04d %d\n",
000022  2708              MOVS     r7,#8
000024  6835              LDR      r5,[r6,#0]            ;267
000026  e012              B        |L6.78|
                  |L6.40|
000028  462c              MOV      r4,r5                 ;269
00002a  4628              MOV      r0,r5
00002c  3c0c              SUBS     r4,r4,#0xc            ;269
00002e  3008              ADDS     r0,r0,#8
000030  f7fffffe          BL       rt_list_len
000034  7fe1              LDRB     r1,[r4,#0x1f]
000036  6a22              LDR      r2,[r4,#0x20]
000038  9201              STR      r2,[sp,#4]
00003a  9102              STR      r1,[sp,#8]
00003c  9003              STR      r0,[sp,#0xc]
00003e  4623              MOV      r3,r4
000040  9700              STR      r7,[sp,#0]
000042  2208              MOVS     r2,#8
000044  a017              ADR      r0,|L6.164|
000046  9904              LDR      r1,[sp,#0x10]
000048  f7fffffe          BL       rt_kprintf
00004c  682d              LDR      r5,[r5,#0]            ;267
                  |L6.78|
00004e  42b5              CMP      r5,r6                 ;267
000050  d1ea              BNE      |L6.40|
;;;271                       maxlen, RT_NAME_MAX,
;;;272                       m->parent.parent.name,
;;;273                       RT_NAME_MAX,
;;;274                       m->owner->name,
;;;275                       m->hold,
;;;276                       rt_list_len(&m->parent.suspend_thread));
;;;277        }
;;;278    
;;;279        return 0;
000052  2000              MOVS     r0,#0
;;;280    }
000054  b005              ADD      sp,sp,#0x14
000056  bdf0              POP      {r4-r7,pc}
;;;281    
                          ENDP

                  |L6.88|
000058  6d757465          DCB      "mutex",0
00005c  7800    
00005e  00                DCB      0
00005f  00                DCB      0
                  |L6.96|
000060  252d2a2e          DCB      "%-*.s   owner  hold suspend thread\n",0
000064  73202020
000068  6f776e65
00006c  72202068
000070  6f6c6420
000074  73757370
000078  656e6420
00007c  74687265
000080  61640a00
                  |L6.132|
000084  202d2d2d          DCB      " -------- ---- --------------\n",0
000088  2d2d2d2d
00008c  2d202d2d
000090  2d2d202d
000094  2d2d2d2d
000098  2d2d2d2d
00009c  2d2d2d2d
0000a0  2d0a00  
0000a3  00                DCB      0
                  |L6.164|
0000a4  252d2a2e          DCB      "%-*.*s %-8.*s %04d %d\n",0
0000a8  2a732025
0000ac  2d382e2a
0000b0  73202530
0000b4  34642025
0000b8  640a00  
0000bb  00                DCB      0

                          AREA ||i._list_sem||, CODE, READONLY, ALIGN=2

                  _list_sem PROC
;;;169    #ifdef RT_USING_SEMAPHORE
;;;170    static long _list_sem(struct rt_list_node *list)
000000  b5fe              PUSH     {r1-r7,lr}
;;;171    {
000002  4607              MOV      r7,r0
;;;172        int maxlen;
;;;173        struct rt_semaphore *sem;
;;;174        struct rt_list_node *node;
;;;175    
;;;176        maxlen = object_name_maxlen(list);
000004  f7fffffe          BL       object_name_maxlen
000008  4606              MOV      r6,r0
;;;177        if (maxlen < 9) maxlen = 9;
00000a  2809              CMP      r0,#9
00000c  da00              BGE      |L7.16|
00000e  2609              MOVS     r6,#9
                  |L7.16|
;;;178    
;;;179        rt_kprintf("%-*.s v   suspend thread\n", maxlen, "semaphore"); object_split(maxlen);
000010  a21c              ADR      r2,|L7.132|
000012  4631              MOV      r1,r6
000014  a01e              ADR      r0,|L7.144|
000016  f7fffffe          BL       rt_kprintf
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       object_split
;;;180        rt_kprintf(     " --- --------------\n");
000020  a022              ADR      r0,|L7.172|
000022  f7fffffe          BL       rt_kprintf
;;;181        for (node = list->next; node != list; node = node->next)
000026  683c              LDR      r4,[r7,#0]
000028  e015              B        |L7.86|
                  |L7.42|
;;;182        {
;;;183            sem = (struct rt_semaphore *)(rt_list_entry(node, struct rt_object, list));
;;;184            if (!rt_list_isempty(&sem->parent.suspend_thread))
00002a  4620              MOV      r0,r4
00002c  4625              MOV      r5,r4                 ;183
00002e  3008              ADDS     r0,r0,#8
000030  3d0c              SUBS     r5,r5,#0xc            ;183
000032  9002              STR      r0,[sp,#8]
000034  f7fffffe          BL       rt_list_isempty
000038  2800              CMP      r0,#0
00003a  9802              LDR      r0,[sp,#8]
00003c  d00f              BEQ      |L7.94|
;;;185            {
;;;186                rt_kprintf("%-*.*s %03d %d:",
;;;187                           maxlen, RT_NAME_MAX,
;;;188                           sem->parent.parent.name,
;;;189                           sem->value,
;;;190                           rt_list_len(&sem->parent.suspend_thread));
;;;191                show_wait_queue(&(sem->parent.suspend_thread));
;;;192                rt_kprintf("\n");
;;;193            }
;;;194            else
;;;195            {
;;;196                rt_kprintf("%-*.*s %03d %d\n",
00003e  f7fffffe          BL       rt_list_len
000042  8ba9              LDRH     r1,[r5,#0x1c]
000044  9100              STR      r1,[sp,#0]
000046  9001              STR      r0,[sp,#4]
000048  462b              MOV      r3,r5
00004a  2208              MOVS     r2,#8
00004c  4631              MOV      r1,r6
00004e  a01d              ADR      r0,|L7.196|
000050  f7fffffe          BL       rt_kprintf
                  |L7.84|
000054  6824              LDR      r4,[r4,#0]            ;181
                  |L7.86|
000056  42bc              CMP      r4,r7                 ;181
000058  d1e7              BNE      |L7.42|
;;;197                           maxlen, RT_NAME_MAX,
;;;198                           sem->parent.parent.name,
;;;199                           sem->value,
;;;200                           rt_list_len(&sem->parent.suspend_thread));
;;;201            }
;;;202        }
;;;203    
;;;204        return 0;
00005a  2000              MOVS     r0,#0
;;;205    }
00005c  bdfe              POP      {r1-r7,pc}
                  |L7.94|
00005e  f7fffffe          BL       rt_list_len
000062  8ba9              LDRH     r1,[r5,#0x1c]         ;186
000064  9100              STR      r1,[sp,#0]            ;186
000066  9001              STR      r0,[sp,#4]            ;186
000068  462b              MOV      r3,r5                 ;186
00006a  2208              MOVS     r2,#8                 ;186
00006c  4631              MOV      r1,r6                 ;186
00006e  a019              ADR      r0,|L7.212|
000070  f7fffffe          BL       rt_kprintf
000074  9802              LDR      r0,[sp,#8]            ;191
000076  f7fffffe          BL       show_wait_queue
00007a  a00b              ADR      r0,|L7.168|
00007c  f7fffffe          BL       rt_kprintf
000080  e7e8              B        |L7.84|
;;;206    
                          ENDP

000082  0000              DCW      0x0000
                  |L7.132|
000084  73656d61          DCB      "semaphore",0
000088  70686f72
00008c  6500    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L7.144|
000090  252d2a2e          DCB      "%-*.s v   suspend thread"
000094  73207620
000098  20207375
00009c  7370656e
0000a0  64207468
0000a4  72656164
                  |L7.168|
0000a8  0a00              DCB      "\n",0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L7.172|
0000ac  202d2d2d          DCB      " --- --------------\n",0
0000b0  202d2d2d
0000b4  2d2d2d2d
0000b8  2d2d2d2d
0000bc  2d2d2d0a
0000c0  00      
0000c1  00                DCB      0
0000c2  00                DCB      0
0000c3  00                DCB      0
                  |L7.196|
0000c4  252d2a2e          DCB      "%-*.*s %03d %d\n",0
0000c8  2a732025
0000cc  30336420
0000d0  25640a00
                  |L7.212|
0000d4  252d2a2e          DCB      "%-*.*s %03d %d:",0
0000d8  2a732025
0000dc  30336420
0000e0  25643a00

                          AREA ||i._list_thread||, CODE, READONLY, ALIGN=2

                  _list_thread PROC
;;;110    
;;;111    static long _list_thread(struct rt_list_node *list)
000000  b5f1              PUSH     {r0,r4-r7,lr}
;;;112    {
000002  b084              SUB      sp,sp,#0x10
;;;113        int maxlen;
;;;114        rt_uint8_t *ptr;
;;;115        struct rt_thread *thread;
;;;116        struct rt_list_node *node;
;;;117    
;;;118        maxlen = object_name_maxlen(list);
000004  9804              LDR      r0,[sp,#0x10]
000006  f7fffffe          BL       object_name_maxlen
;;;119    
;;;120        rt_kprintf("%-*.s pri  status      sp     stack size max used left tick  error\n", maxlen, "thread"); object_split(maxlen);
00000a  4601              MOV      r1,r0
00000c  9002              STR      r0,[sp,#8]
00000e  a227              ADR      r2,|L8.172|
000010  4828              LDR      r0,|L8.180|
000012  f7fffffe          BL       rt_kprintf
000016  9802              LDR      r0,[sp,#8]
000018  f7fffffe          BL       object_split
;;;121        rt_kprintf(     " ---  ------- ---------- ----------  ------  ---------- ---\n");
00001c  a026              ADR      r0,|L8.184|
00001e  f7fffffe          BL       rt_kprintf
;;;122        for (node = list->next; node != list; node = node->next)
000022  9804              LDR      r0,[sp,#0x10]
000024  6805              LDR      r5,[r0,#0]
000026  e03b              B        |L8.160|
                  |L8.40|
;;;123        {
;;;124            thread = rt_list_entry(node, struct rt_thread, list);
;;;125            rt_kprintf("%-*.*s %3d ", maxlen, RT_NAME_MAX, thread->name, thread->current_priority);
000028  4628              MOV      r0,r5
00002a  3014              ADDS     r0,r0,#0x14
00002c  4606              MOV      r6,r0
00002e  462c              MOV      r4,r5                 ;124
000030  7d40              LDRB     r0,[r0,#0x15]
000032  3c0c              SUBS     r4,r4,#0xc            ;124
000034  9000              STR      r0,[sp,#0]
000036  4623              MOV      r3,r4
000038  2208              MOVS     r2,#8
00003a  a02f              ADR      r0,|L8.248|
00003c  9902              LDR      r1,[sp,#8]
00003e  f7fffffe          BL       rt_kprintf
;;;126    
;;;127            if (thread->stat == RT_THREAD_READY)        rt_kprintf(" ready  ");
000042  7d30              LDRB     r0,[r6,#0x14]
000044  2801              CMP      r0,#1
000046  d006              BEQ      |L8.86|
;;;128            else if (thread->stat == RT_THREAD_SUSPEND) rt_kprintf(" suspend");
000048  2802              CMP      r0,#2
00004a  d006              BEQ      |L8.90|
;;;129            else if (thread->stat == RT_THREAD_INIT)    rt_kprintf(" init   ");
00004c  2800              CMP      r0,#0
00004e  d006              BEQ      |L8.94|
;;;130            else if (thread->stat == RT_THREAD_CLOSE)   rt_kprintf(" close  ");
000050  2804              CMP      r0,#4
000052  d006              BEQ      |L8.98|
000054  e008              B        |L8.104|
                  |L8.86|
000056  a02b              ADR      r0,|L8.260|
000058  e004              B        |L8.100|
                  |L8.90|
00005a  a02d              ADR      r0,|L8.272|
00005c  e002              B        |L8.100|
                  |L8.94|
00005e  a02f              ADR      r0,|L8.284|
000060  e000              B        |L8.100|
                  |L8.98|
000062  a031              ADR      r0,|L8.296|
                  |L8.100|
000064  f7fffffe          BL       rt_kprintf
                  |L8.104|
;;;131    
;;;132            ptr = (rt_uint8_t *)thread->stack_addr;
000068  6aa0              LDR      r0,[r4,#0x28]
00006a  4606              MOV      r6,r0
;;;133            while (*ptr == '#')ptr ++;
00006c  e000              B        |L8.112|
                  |L8.110|
00006e  1c40              ADDS     r0,r0,#1
                  |L8.112|
000070  7801              LDRB     r1,[r0,#0]
000072  2923              CMP      r1,#0x23
000074  d0fb              BEQ      |L8.110|
;;;134    
;;;135            rt_kprintf(" 0x%08x 0x%08x    %02d%%   0x%08x %03d\n",
000076  6ae7              LDR      r7,[r4,#0x2c]
000078  1b80              SUBS     r0,r0,r6
00007a  1a38              SUBS     r0,r7,r0
00007c  2164              MOVS     r1,#0x64
00007e  4348              MULS     r0,r1,r0
000080  4639              MOV      r1,r7
000082  f7fffffe          BL       __aeabi_uidivmod
000086  4603              MOV      r3,r0
000088  6b21              LDR      r1,[r4,#0x30]
00008a  6ca0              LDR      r0,[r4,#0x48]
00008c  9101              STR      r1,[sp,#4]
00008e  9000              STR      r0,[sp,#0]
000090  69e0              LDR      r0,[r4,#0x1c]
000092  463a              MOV      r2,r7
000094  1a30              SUBS     r0,r6,r0
000096  19c1              ADDS     r1,r0,r7
000098  a026              ADR      r0,|L8.308|
00009a  f7fffffe          BL       rt_kprintf
00009e  682d              LDR      r5,[r5,#0]            ;122
                  |L8.160|
0000a0  9804              LDR      r0,[sp,#0x10]         ;122
0000a2  4285              CMP      r5,r0                 ;122
0000a4  d1c0              BNE      |L8.40|
;;;136                       thread->stack_size + ((rt_uint32_t)thread->stack_addr - (rt_uint32_t)thread->sp),
;;;137                       thread->stack_size,
;;;138                       (thread->stack_size - ((rt_uint32_t) ptr - (rt_uint32_t) thread->stack_addr)) * 100
;;;139                            / thread->stack_size,
;;;140                       thread->remaining_tick,
;;;141                       thread->error);
;;;142        }
;;;143    
;;;144        return 0;
0000a6  2000              MOVS     r0,#0
;;;145    }
0000a8  b005              ADD      sp,sp,#0x14
0000aa  bdf0              POP      {r4-r7,pc}
;;;146    
                          ENDP

                  |L8.172|
0000ac  74687265          DCB      "thread",0
0000b0  616400  
0000b3  00                DCB      0
                  |L8.180|
                          DCD      ||.conststring||+0x11c
                  |L8.184|
0000b8  202d2d2d          DCB      " ---  ------- ---------- ----------  ------  ----------"
0000bc  20202d2d
0000c0  2d2d2d2d
0000c4  2d202d2d
0000c8  2d2d2d2d
0000cc  2d2d2d2d
0000d0  202d2d2d
0000d4  2d2d2d2d
0000d8  2d2d2d20
0000dc  202d2d2d
0000e0  2d2d2d20
0000e4  202d2d2d
0000e8  2d2d2d2d
0000ec  2d2d2d  
0000ef  202d2d2d          DCB      " ---\n",0
0000f3  0a00    
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L8.248|
0000f8  252d2a2e          DCB      "%-*.*s %3d ",0
0000fc  2a732025
000100  33642000
                  |L8.260|
000104  20726561          DCB      " ready  ",0
000108  64792020
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
                  |L8.272|
000110  20737573          DCB      " suspend",0
000114  70656e64
000118  00      
000119  00                DCB      0
00011a  00                DCB      0
00011b  00                DCB      0
                  |L8.284|
00011c  20696e69          DCB      " init   ",0
000120  74202020
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L8.296|
000128  20636c6f          DCB      " close  ",0
00012c  73652020
000130  00      
000131  00                DCB      0
000132  00                DCB      0
000133  00                DCB      0
                  |L8.308|
000134  20307825          DCB      " 0x%08x 0x%08x    %02d%%   0x%08x %03d\n",0
000138  30387820
00013c  30782530
000140  38782020
000144  20202530
000148  32642525
00014c  20202030
000150  78253038
000154  78202530
000158  33640a00

                          AREA ||i._list_timer||, CODE, READONLY, ALIGN=2

                  _list_timer PROC
;;;472    
;;;473    static long _list_timer(struct rt_list_node *list)
000000  b5fe              PUSH     {r1-r7,lr}
;;;474    {
000002  4606              MOV      r6,r0
;;;475        int maxlen;
;;;476        struct rt_timer *timer;
;;;477        struct rt_list_node *node;
;;;478    
;;;479        maxlen = object_name_maxlen(list);
000004  f7fffffe          BL       object_name_maxlen
000008  4607              MOV      r7,r0
;;;480    
;;;481        rt_kprintf("%-*.s  periodic   timeout       flag\n", maxlen, "timer"); object_split(maxlen);
00000a  4601              MOV      r1,r0
00000c  a215              ADR      r2,|L9.100|
00000e  a017              ADR      r0,|L9.108|
000010  f7fffffe          BL       rt_kprintf
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       object_split
;;;482        rt_kprintf(     " ---------- ---------- -----------\n");
00001a  a01e              ADR      r0,|L9.148|
00001c  f7fffffe          BL       rt_kprintf
;;;483        for (node = list->next; node != list; node = node->next)
000020  6834              LDR      r4,[r6,#0]
000022  e014              B        |L9.78|
                  |L9.36|
;;;484        {
;;;485            timer = (struct rt_timer *)(rt_list_entry(node, struct rt_object, list));
;;;486            rt_kprintf("%-*.*s 0x%08x 0x%08x ",
000024  69e1              LDR      r1,[r4,#0x1c]
000026  69a0              LDR      r0,[r4,#0x18]
000028  4625              MOV      r5,r4                 ;485
00002a  3d0c              SUBS     r5,r5,#0xc            ;485
00002c  9101              STR      r1,[sp,#4]
00002e  9000              STR      r0,[sp,#0]
000030  462b              MOV      r3,r5
000032  2208              MOVS     r2,#8
000034  4639              MOV      r1,r7
000036  a020              ADR      r0,|L9.184|
000038  f7fffffe          BL       rt_kprintf
;;;487                       maxlen, RT_NAME_MAX,
;;;488                       timer->parent.name,
;;;489                       timer->init_tick,
;;;490                       timer->timeout_tick);
;;;491            if (timer->parent.flag & RT_TIMER_FLAG_ACTIVATED)
00003c  7a68              LDRB     r0,[r5,#9]
00003e  07c0              LSLS     r0,r0,#31
000040  d001              BEQ      |L9.70|
;;;492                rt_kprintf("activated\n");
000042  a023              ADR      r0,|L9.208|
000044  e000              B        |L9.72|
                  |L9.70|
;;;493            else
;;;494                rt_kprintf("deactivated\n");
000046  a025              ADR      r0,|L9.220|
                  |L9.72|
000048  f7fffffe          BL       rt_kprintf
00004c  6824              LDR      r4,[r4,#0]            ;483
                  |L9.78|
00004e  42b4              CMP      r4,r6                 ;483
000050  d1e8              BNE      |L9.36|
;;;495        }
;;;496    
;;;497        rt_kprintf("current tick:0x%08x\n", rt_tick_get());
000052  f7fffffe          BL       rt_tick_get
000056  4601              MOV      r1,r0
000058  a024              ADR      r0,|L9.236|
00005a  f7fffffe          BL       rt_kprintf
;;;498    
;;;499        return 0;
00005e  2000              MOVS     r0,#0
;;;500    }
000060  bdfe              POP      {r1-r7,pc}
;;;501    
                          ENDP

000062  0000              DCW      0x0000
                  |L9.100|
000064  74696d65          DCB      "timer",0
000068  7200    
00006a  00                DCB      0
00006b  00                DCB      0
                  |L9.108|
00006c  252d2a2e          DCB      "%-*.s  periodic   timeout       flag\n",0
000070  73202070
000074  6572696f
000078  64696320
00007c  20207469
000080  6d656f75
000084  74202020
000088  20202020
00008c  666c6167
000090  0a00    
000092  00                DCB      0
000093  00                DCB      0
                  |L9.148|
000094  202d2d2d          DCB      " ---------- ---------- -----------\n",0
000098  2d2d2d2d
00009c  2d2d2d20
0000a0  2d2d2d2d
0000a4  2d2d2d2d
0000a8  2d2d202d
0000ac  2d2d2d2d
0000b0  2d2d2d2d
0000b4  2d2d0a00
                  |L9.184|
0000b8  252d2a2e          DCB      "%-*.*s 0x%08x 0x%08x ",0
0000bc  2a732030
0000c0  78253038
0000c4  78203078
0000c8  25303878
0000cc  2000    
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L9.208|
0000d0  61637469          DCB      "activated\n",0
0000d4  76617465
0000d8  640a00  
0000db  00                DCB      0
                  |L9.220|
0000dc  64656163          DCB      "deactivated\n",0
0000e0  74697661
0000e4  7465640a
0000e8  00      
0000e9  00                DCB      0
0000ea  00                DCB      0
0000eb  00                DCB      0
                  |L9.236|
0000ec  63757272          DCB      "current tick:0x%08x\n",0
0000f0  656e7420
0000f4  7469636b
0000f8  3a307825
0000fc  3038780a
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0

                          AREA ||i.hello||, CODE, READONLY, ALIGN=2

                  hello PROC
;;;64     
;;;65     long hello(void)
000000  b510              PUSH     {r4,lr}
;;;66     {
;;;67         rt_kprintf("Hello RT-Thread!\n");
000002  a002              ADR      r0,|L10.12|
000004  f7fffffe          BL       rt_kprintf
;;;68     
;;;69         return 0;
000008  2000              MOVS     r0,#0
;;;70     }
00000a  bd10              POP      {r4,pc}
;;;71     FINSH_FUNCTION_EXPORT(hello, say hello world);
                          ENDP

                  |L10.12|
00000c  48656c6c          DCB      "Hello RT-Thread!\n",0
000010  6f205254
000014  2d546872
000018  65616421
00001c  0a00    
00001e  00                DCB      0
00001f  00                DCB      0

                          AREA ||i.list||, CODE, READONLY, ALIGN=2

                  list PROC
;;;702    
;;;703    long list(void)
000000  b570              PUSH     {r4-r6,lr}
;;;704    {
;;;705    #ifndef FINSH_USING_MSH_ONLY
;;;706        struct finsh_syscall_item *syscall_item;
;;;707        struct finsh_sysvar_item *sysvar_item;
;;;708    #endif
;;;709    
;;;710        rt_kprintf("--Function List:\n");
000002  a01e              ADR      r0,|L11.124|
000004  f7fffffe          BL       rt_kprintf
;;;711        {
;;;712            struct finsh_syscall *index;
;;;713            for (index = _syscall_table_begin;
000008  4821              LDR      r0,|L11.144|
;;;714                    index < _syscall_table_end;
00000a  4d22              LDR      r5,|L11.148|
00000c  6804              LDR      r4,[r0,#0]            ;713  ; _syscall_table_begin
00000e  e00c              B        |L11.42|
                  |L11.16|
;;;715                    FINSH_NEXT_SYSCALL(index))
;;;716            {
;;;717                /* skip the internal command */
;;;718                if (strncmp((char *)index->name, "__", 2) == 0) continue;
000010  2202              MOVS     r2,#2
000012  a121              ADR      r1,|L11.152|
000014  6820              LDR      r0,[r4,#0]
000016  f7fffffe          BL       strncmp
00001a  2800              CMP      r0,#0
00001c  d004              BEQ      |L11.40|
;;;719    
;;;720    #ifdef FINSH_USING_DESCRIPTION
;;;721                rt_kprintf("%-16s -- %s\n", index->name, index->desc);
00001e  cc06              LDM      r4!,{r1,r2}
000020  a01e              ADR      r0,|L11.156|
000022  3c08              SUBS     r4,r4,#8
000024  f7fffffe          BL       rt_kprintf
                  |L11.40|
000028  340c              ADDS     r4,r4,#0xc
                  |L11.42|
00002a  6828              LDR      r0,[r5,#0]            ;714  ; _syscall_table_end
00002c  4284              CMP      r4,r0                 ;714
00002e  d3ef              BCC      |L11.16|
;;;722    #else
;;;723                rt_kprintf("%s\n", index->name);
;;;724    #endif
;;;725            }
;;;726        }
;;;727    
;;;728    #ifndef FINSH_USING_MSH_ONLY
;;;729        /* list syscall list */
;;;730        syscall_item = global_syscall_list;
000030  481e              LDR      r0,|L11.172|
;;;731        while (syscall_item != NULL)
000032  6804              LDR      r4,[r0,#0]  ; global_syscall_list
000034  e004              B        |L11.64|
                  |L11.54|
;;;732        {
;;;733            rt_kprintf("[l] %s\n", syscall_item->syscall.name);
000036  a01e              ADR      r0,|L11.176|
000038  6861              LDR      r1,[r4,#4]
00003a  f7fffffe          BL       rt_kprintf
;;;734            syscall_item = syscall_item->next;
00003e  6824              LDR      r4,[r4,#0]
                  |L11.64|
000040  2c00              CMP      r4,#0                 ;731
000042  d1f8              BNE      |L11.54|
;;;735        }
;;;736    
;;;737        rt_kprintf("--Variable List:\n");
000044  a01c              ADR      r0,|L11.184|
000046  f7fffffe          BL       rt_kprintf
;;;738        {
;;;739            struct finsh_sysvar *index;
;;;740            for (index = _sysvar_table_begin;
00004a  4820              LDR      r0,|L11.204|
;;;741                    index < _sysvar_table_end;
00004c  4d20              LDR      r5,|L11.208|
00004e  6804              LDR      r4,[r0,#0]            ;740  ; _sysvar_table_begin
000050  e005              B        |L11.94|
                  |L11.82|
;;;742                    FINSH_NEXT_SYSVAR(index))
;;;743            {
;;;744    #ifdef FINSH_USING_DESCRIPTION
;;;745                rt_kprintf("%-16s -- %s\n", index->name, index->desc);
000052  cc06              LDM      r4!,{r1,r2}
000054  a011              ADR      r0,|L11.156|
000056  3c08              SUBS     r4,r4,#8
000058  f7fffffe          BL       rt_kprintf
00005c  3410              ADDS     r4,r4,#0x10
                  |L11.94|
00005e  6828              LDR      r0,[r5,#0]            ;741  ; _sysvar_table_end
000060  4284              CMP      r4,r0                 ;741
000062  d3f6              BCC      |L11.82|
;;;746    #else
;;;747                rt_kprintf("%s\n", index->name);
;;;748    #endif
;;;749            }
;;;750        }
;;;751    
;;;752        sysvar_item = global_sysvar_list;
000064  481b              LDR      r0,|L11.212|
;;;753        while (sysvar_item != NULL)
000066  6804              LDR      r4,[r0,#0]  ; global_sysvar_list
000068  e004              B        |L11.116|
                  |L11.106|
;;;754        {
;;;755            rt_kprintf("[l] %s\n", sysvar_item->sysvar.name);
00006a  a011              ADR      r0,|L11.176|
00006c  6861              LDR      r1,[r4,#4]
00006e  f7fffffe          BL       rt_kprintf
;;;756            sysvar_item = sysvar_item->next;
000072  6824              LDR      r4,[r4,#0]
                  |L11.116|
000074  2c00              CMP      r4,#0                 ;753
000076  d1f8              BNE      |L11.106|
;;;757        }
;;;758    #endif
;;;759    
;;;760        return 0;
000078  2000              MOVS     r0,#0
;;;761    }
00007a  bd70              POP      {r4-r6,pc}
;;;762    FINSH_FUNCTION_EXPORT(list, list all symbol in system)
                          ENDP

                  |L11.124|
00007c  2d2d4675          DCB      "--Function List:\n",0
000080  6e637469
000084  6f6e204c
000088  6973743a
00008c  0a00    
00008e  00                DCB      0
00008f  00                DCB      0
                  |L11.144|
                          DCD      _syscall_table_begin
                  |L11.148|
                          DCD      _syscall_table_end
                  |L11.152|
000098  5f5f00            DCB      "__",0
00009b  00                DCB      0
                  |L11.156|
00009c  252d3136          DCB      "%-16s -- %s\n",0
0000a0  73202d2d
0000a4  2025730a
0000a8  00      
0000a9  00                DCB      0
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L11.172|
                          DCD      global_syscall_list
                  |L11.176|
0000b0  5b6c5d20          DCB      "[l] %s\n",0
0000b4  25730a00
                  |L11.184|
0000b8  2d2d5661          DCB      "--Variable List:\n",0
0000bc  72696162
0000c0  6c65204c
0000c4  6973743a
0000c8  0a00    
0000ca  00                DCB      0
0000cb  00                DCB      0
                  |L11.204|
                          DCD      _sysvar_table_begin
                  |L11.208|
                          DCD      _sysvar_table_end
                  |L11.212|
                          DCD      global_sysvar_list

                          AREA ||i.list_device||, CODE, READONLY, ALIGN=2

                  list_device PROC
;;;561    
;;;562    long list_device(void)
000000  b510              PUSH     {r4,lr}
;;;563    {
;;;564        return _list_device(&rt_object_container[RT_Object_Class_Device].object_list);
000002  4802              LDR      r0,|L12.12|
000004  f7fffffe          BL       _list_device
;;;565    }
000008  bd10              POP      {r4,pc}
;;;566    FINSH_FUNCTION_EXPORT(list_device, list device in system);
                          ENDP

00000a  0000              DCW      0x0000
                  |L12.12|
                          DCD      rt_object_container+0x74

                          AREA ||i.list_event||, CODE, READONLY, ALIGN=2

                  list_event PROC
;;;248    
;;;249    long list_event(void)
000000  b510              PUSH     {r4,lr}
;;;250    {
;;;251        return _list_event(&rt_object_container[RT_Object_Class_Event].object_list);
000002  4802              LDR      r0,|L13.12|
000004  f7fffffe          BL       _list_event
;;;252    }
000008  bd10              POP      {r4,pc}
;;;253    FINSH_FUNCTION_EXPORT(list_event, list event in system);
                          ENDP

00000a  0000              DCW      0x0000
                  |L13.12|
                          DCD      rt_object_container+0x34

                          AREA ||i.list_mailbox||, CODE, READONLY, ALIGN=2

                  list_mailbox PROC
;;;332    
;;;333    long list_mailbox(void)
000000  b510              PUSH     {r4,lr}
;;;334    {
;;;335        return _list_mailbox(&rt_object_container[RT_Object_Class_MailBox].object_list);
000002  4802              LDR      r0,|L14.12|
000004  f7fffffe          BL       _list_mailbox
;;;336    }
000008  bd10              POP      {r4,pc}
;;;337    FINSH_FUNCTION_EXPORT(list_mailbox, list mail box in system);
                          ENDP

00000a  0000              DCW      0x0000
                  |L14.12|
                          DCD      rt_object_container+0x44

                          AREA ||i.list_mempool||, CODE, READONLY, ALIGN=2

                  list_mempool PROC
;;;464    
;;;465    long list_mempool(void)
000000  b510              PUSH     {r4,lr}
;;;466    {
;;;467        return _list_mempool(&rt_object_container[RT_Object_Class_MemPool].object_list);
000002  4802              LDR      r0,|L15.12|
000004  f7fffffe          BL       _list_mempool
;;;468    }
000008  bd10              POP      {r4,pc}
;;;469    FINSH_FUNCTION_EXPORT(list_mempool, list memory pool in system)
                          ENDP

00000a  0000              DCW      0x0000
                  |L15.12|
                          DCD      rt_object_container+0x64

                          AREA ||i.list_msgqueue||, CODE, READONLY, ALIGN=2

                  list_msgqueue PROC
;;;381    
;;;382    long list_msgqueue(void)
000000  b510              PUSH     {r4,lr}
;;;383    {
;;;384        return _list_msgqueue(&rt_object_container[RT_Object_Class_MessageQueue].object_list);
000002  4802              LDR      r0,|L16.12|
000004  f7fffffe          BL       _list_msgqueue
;;;385    }
000008  bd10              POP      {r4,pc}
;;;386    FINSH_FUNCTION_EXPORT(list_msgqueue, list message queue in system);
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      rt_object_container+0x54

                          AREA ||i.list_mutex||, CODE, READONLY, ALIGN=2

                  list_mutex PROC
;;;281    
;;;282    long list_mutex(void)
000000  b510              PUSH     {r4,lr}
;;;283    {
;;;284        return _list_mutex(&rt_object_container[RT_Object_Class_Mutex].object_list);
000002  4802              LDR      r0,|L17.12|
000004  f7fffffe          BL       _list_mutex
;;;285    }
000008  bd10              POP      {r4,pc}
;;;286    FINSH_FUNCTION_EXPORT(list_mutex, list mutex in system);
                          ENDP

00000a  0000              DCW      0x0000
                  |L17.12|
                          DCD      rt_object_container+0x24

                          AREA ||i.list_prefix||, CODE, READONLY, ALIGN=2

                  list_prefix PROC
;;;791    
;;;792    void list_prefix(char *prefix)
000000  b5fe              PUSH     {r1-r7,lr}
;;;793    {
000002  4607              MOV      r7,r0
;;;794        struct finsh_syscall_item *syscall_item;
;;;795        struct finsh_sysvar_item *sysvar_item;
;;;796        rt_uint16_t func_cnt, var_cnt;
;;;797        int length, min_length;
;;;798        const char *name_ptr;
;;;799    
;;;800        func_cnt = 0;
000004  2000              MOVS     r0,#0
;;;801        var_cnt  = 0;
000006  9001              STR      r0,[sp,#4]
;;;802        min_length = 0;
000008  4605              MOV      r5,r0
;;;803        name_ptr = RT_NULL;
00000a  4606              MOV      r6,r0
;;;804    
;;;805        /* checks in system function call */
;;;806        {
;;;807            struct finsh_syscall *index;
;;;808            for (index = _syscall_table_begin;
00000c  9000              STR      r0,[sp,#0]
00000e  4865              LDR      r0,|L18.420|
000010  6804              LDR      r4,[r0,#0]            ;793  ; _syscall_table_begin
000012  e02d              B        |L18.112|
                  |L18.20|
;;;809                    index < _syscall_table_end;
;;;810                    FINSH_NEXT_SYSCALL(index))
;;;811            {
;;;812                /* skip internal command */
;;;813                if (str_is_prefix("__", index->name) == 0) continue;
000014  a064              ADR      r0,|L18.424|
000016  6821              LDR      r1,[r4,#0]
000018  f7fffffe          BL       str_is_prefix
00001c  2800              CMP      r0,#0
00001e  d026              BEQ      |L18.110|
;;;814    
;;;815                if (str_is_prefix(prefix, index->name) == 0)
000020  4638              MOV      r0,r7
000022  6821              LDR      r1,[r4,#0]
000024  f7fffffe          BL       str_is_prefix
000028  2800              CMP      r0,#0
00002a  d120              BNE      |L18.110|
;;;816                {
;;;817                    if (func_cnt == 0)
00002c  9801              LDR      r0,[sp,#4]
00002e  2800              CMP      r0,#0
000030  d10a              BNE      |L18.72|
;;;818                    {
;;;819                        rt_kprintf("--function:\n");
000032  a05e              ADR      r0,|L18.428|
000034  f7fffffe          BL       rt_kprintf
;;;820    
;;;821                        if (*prefix != 0)
000038  7838              LDRB     r0,[r7,#0]
00003a  2800              CMP      r0,#0
00003c  d004              BEQ      |L18.72|
;;;822                        {
;;;823                            /* set name_ptr */
;;;824                            name_ptr = index->name;
;;;825    
;;;826                            /* set initial length */
;;;827                            min_length = strlen(name_ptr);
00003e  6826              LDR      r6,[r4,#0]
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       strlen
000046  4605              MOV      r5,r0
                  |L18.72|
;;;828                        }
;;;829                    }
;;;830    
;;;831                    func_cnt ++;
000048  9801              LDR      r0,[sp,#4]
00004a  1c40              ADDS     r0,r0,#1
00004c  b280              UXTH     r0,r0
;;;832    
;;;833                    if (*prefix != 0)
00004e  9001              STR      r0,[sp,#4]
000050  7838              LDRB     r0,[r7,#0]
000052  2800              CMP      r0,#0
000054  d006              BEQ      |L18.100|
;;;834                    {
;;;835                        length = str_common(name_ptr, index->name);
000056  4630              MOV      r0,r6
000058  6821              LDR      r1,[r4,#0]
00005a  f7fffffe          BL       str_common
;;;836                        if (length < min_length)
00005e  42a8              CMP      r0,r5
000060  da00              BGE      |L18.100|
;;;837                            min_length = length;
000062  4605              MOV      r5,r0
                  |L18.100|
;;;838                    }
;;;839    
;;;840    #ifdef FINSH_USING_DESCRIPTION
;;;841                    rt_kprintf("%-16s -- %s\n", index->name, index->desc);
000064  cc06              LDM      r4!,{r1,r2}
000066  a055              ADR      r0,|L18.444|
000068  3c08              SUBS     r4,r4,#8
00006a  f7fffffe          BL       rt_kprintf
                  |L18.110|
00006e  340c              ADDS     r4,r4,#0xc
                  |L18.112|
000070  4856              LDR      r0,|L18.460|
000072  6800              LDR      r0,[r0,#0]            ;809  ; _syscall_table_end
000074  4284              CMP      r4,r0                 ;809
000076  d3cd              BCC      |L18.20|
;;;842    #else
;;;843                    rt_kprintf("%s\n", index->name);
;;;844    #endif
;;;845                }
;;;846            }
;;;847        }
;;;848    
;;;849        /* checks in dynamic system function call */
;;;850        syscall_item = global_syscall_list;
000078  4855              LDR      r0,|L18.464|
;;;851        while (syscall_item != NULL)
00007a  6804              LDR      r4,[r0,#0]  ; global_syscall_list
00007c  e028              B        |L18.208|
                  |L18.126|
;;;852        {
;;;853            if (str_is_prefix(prefix, syscall_item->syscall.name) == 0)
00007e  4638              MOV      r0,r7
000080  6861              LDR      r1,[r4,#4]
000082  f7fffffe          BL       str_is_prefix
000086  2800              CMP      r0,#0
000088  d121              BNE      |L18.206|
;;;854            {
;;;855                if (func_cnt == 0)
00008a  9801              LDR      r0,[sp,#4]
00008c  2800              CMP      r0,#0
00008e  d10c              BNE      |L18.170|
;;;856                {
;;;857                    rt_kprintf("--function:\n");
000090  a046              ADR      r0,|L18.428|
000092  f7fffffe          BL       rt_kprintf
;;;858                    if (*prefix != 0 && name_ptr == NULL)
000096  7838              LDRB     r0,[r7,#0]
000098  2800              CMP      r0,#0
00009a  d006              BEQ      |L18.170|
00009c  2e00              CMP      r6,#0
00009e  d104              BNE      |L18.170|
;;;859                    {
;;;860                        /* set name_ptr */
;;;861                        name_ptr = syscall_item->syscall.name;
;;;862    
;;;863                        /* set initial length */
;;;864                        min_length = strlen(name_ptr);
0000a0  6866              LDR      r6,[r4,#4]
0000a2  4630              MOV      r0,r6
0000a4  f7fffffe          BL       strlen
0000a8  4605              MOV      r5,r0
                  |L18.170|
;;;865                    }
;;;866                }
;;;867    
;;;868                func_cnt ++;
0000aa  9801              LDR      r0,[sp,#4]
0000ac  1c40              ADDS     r0,r0,#1
0000ae  b280              UXTH     r0,r0
;;;869    
;;;870                if (*prefix != 0)
0000b0  9001              STR      r0,[sp,#4]
0000b2  7838              LDRB     r0,[r7,#0]
0000b4  2800              CMP      r0,#0
0000b6  d006              BEQ      |L18.198|
;;;871                {
;;;872                    length = str_common(name_ptr, syscall_item->syscall.name);
0000b8  4630              MOV      r0,r6
0000ba  6861              LDR      r1,[r4,#4]
0000bc  f7fffffe          BL       str_common
;;;873                    if (length < min_length)
0000c0  42a8              CMP      r0,r5
0000c2  da00              BGE      |L18.198|
;;;874                        min_length = length;
0000c4  4605              MOV      r5,r0
                  |L18.198|
;;;875                }
;;;876    
;;;877                rt_kprintf("[l] %s\n", syscall_item->syscall.name);
0000c6  a043              ADR      r0,|L18.468|
0000c8  6861              LDR      r1,[r4,#4]
0000ca  f7fffffe          BL       rt_kprintf
                  |L18.206|
;;;878            }
;;;879            syscall_item = syscall_item->next;
0000ce  6824              LDR      r4,[r4,#0]
                  |L18.208|
0000d0  2c00              CMP      r4,#0                 ;851
0000d2  d1d4              BNE      |L18.126|
;;;880        }
;;;881    
;;;882        /* checks in system variable */
;;;883        {
;;;884            struct finsh_sysvar *index;
;;;885            for (index = _sysvar_table_begin;
0000d4  4841              LDR      r0,|L18.476|
0000d6  6804              LDR      r4,[r0,#0]  ; _sysvar_table_begin
0000d8  e029              B        |L18.302|
                  |L18.218|
;;;886                    index < _sysvar_table_end;
;;;887                    FINSH_NEXT_SYSVAR(index))
;;;888            {
;;;889                if (str_is_prefix(prefix, index->name) == 0)
0000da  4638              MOV      r0,r7
0000dc  6821              LDR      r1,[r4,#0]
0000de  f7fffffe          BL       str_is_prefix
0000e2  2800              CMP      r0,#0
0000e4  d122              BNE      |L18.300|
;;;890                {
;;;891                    if (var_cnt == 0)
0000e6  9800              LDR      r0,[sp,#0]
0000e8  2800              CMP      r0,#0
0000ea  d10c              BNE      |L18.262|
;;;892                    {
;;;893                        rt_kprintf("--variable:\n");
0000ec  a03c              ADR      r0,|L18.480|
0000ee  f7fffffe          BL       rt_kprintf
;;;894    
;;;895                        if (*prefix != 0 && name_ptr == NULL)
0000f2  7838              LDRB     r0,[r7,#0]
0000f4  2800              CMP      r0,#0
0000f6  d006              BEQ      |L18.262|
0000f8  2e00              CMP      r6,#0
0000fa  d104              BNE      |L18.262|
;;;896                        {
;;;897                            /* set name_ptr */
;;;898                            name_ptr = index->name;
;;;899    
;;;900                            /* set initial length */
;;;901                            min_length = strlen(name_ptr);
0000fc  6826              LDR      r6,[r4,#0]
0000fe  4630              MOV      r0,r6
000100  f7fffffe          BL       strlen
000104  4605              MOV      r5,r0
                  |L18.262|
;;;902    
;;;903                        }
;;;904                    }
;;;905    
;;;906                    var_cnt ++;
000106  9800              LDR      r0,[sp,#0]
000108  1c40              ADDS     r0,r0,#1
00010a  b280              UXTH     r0,r0
;;;907    
;;;908                    if (*prefix != 0)
00010c  9000              STR      r0,[sp,#0]
00010e  7838              LDRB     r0,[r7,#0]
000110  2800              CMP      r0,#0
000112  d006              BEQ      |L18.290|
;;;909                    {
;;;910                        length = str_common(name_ptr, index->name);
000114  4630              MOV      r0,r6
000116  6821              LDR      r1,[r4,#0]
000118  f7fffffe          BL       str_common
;;;911                        if (length < min_length)
00011c  42a8              CMP      r0,r5
00011e  da00              BGE      |L18.290|
;;;912                            min_length = length;
000120  4605              MOV      r5,r0
                  |L18.290|
;;;913                    }
;;;914    
;;;915    #ifdef FINSH_USING_DESCRIPTION
;;;916                    rt_kprintf("%-16s -- %s\n", index->name, index->desc);
000122  cc06              LDM      r4!,{r1,r2}
000124  a025              ADR      r0,|L18.444|
000126  3c08              SUBS     r4,r4,#8
000128  f7fffffe          BL       rt_kprintf
                  |L18.300|
00012c  3410              ADDS     r4,r4,#0x10
                  |L18.302|
00012e  4830              LDR      r0,|L18.496|
000130  6800              LDR      r0,[r0,#0]            ;886  ; _sysvar_table_end
000132  4284              CMP      r4,r0                 ;886
000134  d3d1              BCC      |L18.218|
;;;917    #else
;;;918                    rt_kprintf("%s\n", index->name);
;;;919    #endif
;;;920                }
;;;921            }
;;;922        }
;;;923    
;;;924        /* checks in dynamic system variable */
;;;925        sysvar_item = global_sysvar_list;
000136  482f              LDR      r0,|L18.500|
;;;926        while (sysvar_item != NULL)
000138  6804              LDR      r4,[r0,#0]  ; global_sysvar_list
00013a  e028              B        |L18.398|
                  |L18.316|
;;;927        {
;;;928            if (str_is_prefix(prefix, sysvar_item->sysvar.name) == 0)
00013c  4638              MOV      r0,r7
00013e  6861              LDR      r1,[r4,#4]
000140  f7fffffe          BL       str_is_prefix
000144  2800              CMP      r0,#0
000146  d121              BNE      |L18.396|
;;;929            {
;;;930                if (var_cnt == 0)
000148  9800              LDR      r0,[sp,#0]
00014a  2800              CMP      r0,#0
00014c  d10c              BNE      |L18.360|
;;;931                {
;;;932                    rt_kprintf("--variable:\n");
00014e  a024              ADR      r0,|L18.480|
000150  f7fffffe          BL       rt_kprintf
;;;933                    if (*prefix != 0 && name_ptr == NULL)
000154  7838              LDRB     r0,[r7,#0]
000156  2800              CMP      r0,#0
000158  d006              BEQ      |L18.360|
00015a  2e00              CMP      r6,#0
00015c  d104              BNE      |L18.360|
;;;934                    {
;;;935                        /* set name_ptr */
;;;936                        name_ptr = sysvar_item->sysvar.name;
;;;937    
;;;938                        /* set initial length */
;;;939                        min_length = strlen(name_ptr);
00015e  6866              LDR      r6,[r4,#4]
000160  4630              MOV      r0,r6
000162  f7fffffe          BL       strlen
000166  4605              MOV      r5,r0
                  |L18.360|
;;;940                    }
;;;941                }
;;;942    
;;;943                var_cnt ++;
000168  9800              LDR      r0,[sp,#0]
00016a  1c40              ADDS     r0,r0,#1
00016c  b280              UXTH     r0,r0
;;;944    
;;;945                if (*prefix != 0)
00016e  9000              STR      r0,[sp,#0]
000170  7838              LDRB     r0,[r7,#0]
000172  2800              CMP      r0,#0
000174  d006              BEQ      |L18.388|
;;;946                {
;;;947                    length = str_common(name_ptr, sysvar_item->sysvar.name);
000176  4630              MOV      r0,r6
000178  6861              LDR      r1,[r4,#4]
00017a  f7fffffe          BL       str_common
;;;948                    if (length < min_length)
00017e  42a8              CMP      r0,r5
000180  da00              BGE      |L18.388|
;;;949                        min_length = length;
000182  4605              MOV      r5,r0
                  |L18.388|
;;;950                }
;;;951    
;;;952                rt_kprintf("[v] %s\n", sysvar_item->sysvar.name);
000184  a01c              ADR      r0,|L18.504|
000186  6861              LDR      r1,[r4,#4]
000188  f7fffffe          BL       rt_kprintf
                  |L18.396|
;;;953            }
;;;954            sysvar_item = sysvar_item->next;
00018c  6824              LDR      r4,[r4,#0]
                  |L18.398|
00018e  2c00              CMP      r4,#0                 ;926
000190  d1d4              BNE      |L18.316|
;;;955        }
;;;956    
;;;957        /* only one matched */
;;;958        if (name_ptr != NULL)
000192  2e00              CMP      r6,#0
000194  d004              BEQ      |L18.416|
;;;959        {
;;;960            rt_strncpy(prefix, name_ptr, min_length);
000196  462a              MOV      r2,r5
000198  4631              MOV      r1,r6
00019a  4638              MOV      r0,r7
00019c  f7fffffe          BL       rt_strncpy
                  |L18.416|
;;;961        }
;;;962    }
0001a0  bdfe              POP      {r1-r7,pc}
;;;963    #endif
                          ENDP

0001a2  0000              DCW      0x0000
                  |L18.420|
                          DCD      _syscall_table_begin
                  |L18.424|
0001a8  5f5f00            DCB      "__",0
0001ab  00                DCB      0
                  |L18.428|
0001ac  2d2d6675          DCB      "--function:\n",0
0001b0  6e637469
0001b4  6f6e3a0a
0001b8  00      
0001b9  00                DCB      0
0001ba  00                DCB      0
0001bb  00                DCB      0
                  |L18.444|
0001bc  252d3136          DCB      "%-16s -- %s\n",0
0001c0  73202d2d
0001c4  2025730a
0001c8  00      
0001c9  00                DCB      0
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L18.460|
                          DCD      _syscall_table_end
                  |L18.464|
                          DCD      global_syscall_list
                  |L18.468|
0001d4  5b6c5d20          DCB      "[l] %s\n",0
0001d8  25730a00
                  |L18.476|
                          DCD      _sysvar_table_begin
                  |L18.480|
0001e0  2d2d7661          DCB      "--variable:\n",0
0001e4  72696162
0001e8  6c653a0a
0001ec  00      
0001ed  00                DCB      0
0001ee  00                DCB      0
0001ef  00                DCB      0
                  |L18.496|
                          DCD      _sysvar_table_end
                  |L18.500|
                          DCD      global_sysvar_list
                  |L18.504|
0001f8  5b765d20          DCB      "[v] %s\n",0
0001fc  25730a00

                          AREA ||i.list_sem||, CODE, READONLY, ALIGN=2

                  list_sem PROC
;;;206    
;;;207    long list_sem(void)
000000  b510              PUSH     {r4,lr}
;;;208    {
;;;209        return _list_sem(&rt_object_container[RT_Object_Class_Semaphore].object_list);
000002  4802              LDR      r0,|L19.12|
000004  f7fffffe          BL       _list_sem
;;;210    }
000008  bd10              POP      {r4,pc}
;;;211    FINSH_FUNCTION_EXPORT(list_sem, list semaphone in system);
                          ENDP

00000a  0000              DCW      0x0000
                  |L19.12|
                          DCD      rt_object_container+0x14

                          AREA ||i.list_thread||, CODE, READONLY, ALIGN=2

                  list_thread PROC
;;;146    
;;;147    long list_thread(void)
000000  b510              PUSH     {r4,lr}
;;;148    {
;;;149        return _list_thread(&rt_object_container[RT_Object_Class_Thread].object_list);
000002  4802              LDR      r0,|L20.12|
000004  f7fffffe          BL       _list_thread
;;;150    }
000008  bd10              POP      {r4,pc}
;;;151    FINSH_FUNCTION_EXPORT(list_thread, list thread);
                          ENDP

00000a  0000              DCW      0x0000
                  |L20.12|
                          DCD      rt_object_container+0x4

                          AREA ||i.list_timer||, CODE, READONLY, ALIGN=2

                  list_timer PROC
;;;501    
;;;502    long list_timer(void)
000000  b510              PUSH     {r4,lr}
;;;503    {
;;;504        return _list_timer(&rt_object_container[RT_Object_Class_Timer].object_list);
000002  4802              LDR      r0,|L21.12|
000004  f7fffffe          BL       _list_timer
;;;505    }
000008  bd10              POP      {r4,pc}
;;;506    FINSH_FUNCTION_EXPORT(list_timer, list timer in system);
                          ENDP

00000a  0000              DCW      0x0000
                  |L21.12|
                          DCD      rt_object_container+0x84

                          AREA ||i.object_name_maxlen||, CODE, READONLY, ALIGN=1

                  object_name_maxlen PROC
;;;84     
;;;85     static int object_name_maxlen(struct rt_list_node *list)
000000  b570              PUSH     {r4-r6,lr}
;;;86     {
000002  4606              MOV      r6,r0
;;;87         struct rt_list_node *node;
;;;88         struct rt_object *object = NULL;
;;;89         int max_length = 0, length;
000004  2500              MOVS     r5,#0
;;;90     
;;;91         rt_enter_critical();
000006  f7fffffe          BL       rt_enter_critical
;;;92         for (node = list->next; node != list; node = node->next)
00000a  6834              LDR      r4,[r6,#0]
00000c  e007              B        |L22.30|
                  |L22.14|
;;;93         {
;;;94             object = rt_list_entry(node, struct rt_object, list);
00000e  4620              MOV      r0,r4
000010  380c              SUBS     r0,r0,#0xc
;;;95     
;;;96             length = rt_strlen(object->name);
000012  f7fffffe          BL       rt_strlen
;;;97             if (length > max_length) max_length = length;
000016  42a8              CMP      r0,r5
000018  dd00              BLE      |L22.28|
00001a  4605              MOV      r5,r0
                  |L22.28|
00001c  6824              LDR      r4,[r4,#0]            ;92
                  |L22.30|
00001e  42b4              CMP      r4,r6                 ;92
000020  d1f5              BNE      |L22.14|
;;;98         }
;;;99         rt_exit_critical();
000022  f7fffffe          BL       rt_exit_critical
;;;100    
;;;101        if (max_length > RT_NAME_MAX || max_length == 0) max_length = RT_NAME_MAX;
000026  2d08              CMP      r5,#8
000028  dc01              BGT      |L22.46|
00002a  2d00              CMP      r5,#0
00002c  d100              BNE      |L22.48|
                  |L22.46|
00002e  2508              MOVS     r5,#8
                  |L22.48|
;;;102    
;;;103        return max_length;
000030  4628              MOV      r0,r5
;;;104    }
000032  bd70              POP      {r4-r6,pc}
;;;105    
                          ENDP


                          AREA ||i.object_split||, CODE, READONLY, ALIGN=2

                  object_split PROC
;;;105    
;;;106    rt_inline void object_split(int len)
000000  b510              PUSH     {r4,lr}
;;;107    {
000002  4604              MOV      r4,r0
;;;108        while (len--) rt_kprintf("-");
000004  e002              B        |L23.12|
                  |L23.6|
000006  a003              ADR      r0,|L23.20|
000008  f7fffffe          BL       rt_kprintf
                  |L23.12|
00000c  1e64              SUBS     r4,r4,#1
00000e  d2fa              BCS      |L23.6|
;;;109    }
000010  bd10              POP      {r4,pc}
;;;110    
                          ENDP

000012  0000              DCW      0x0000
                  |L23.20|
000014  2d00              DCB      "-",0
000016  00                DCB      0
000017  00                DCB      0

                          AREA ||i.rt_list_isempty||, CODE, READONLY, ALIGN=1

                  rt_list_isempty PROC
;;;102     */
;;;103    rt_inline int rt_list_isempty(const rt_list_t *l)
000000  6801              LDR      r1,[r0,#0]
;;;104    {
;;;105        return l->next == l;
000002  4281              CMP      r1,r0
000004  d101              BNE      |L24.10|
000006  2001              MOVS     r0,#1
;;;106    }
000008  4770              BX       lr
                  |L24.10|
00000a  2000              MOVS     r0,#0                 ;105
00000c  4770              BX       lr
;;;107    
                          ENDP


                          AREA ||i.rt_list_len||, CODE, READONLY, ALIGN=1

                  rt_list_len PROC
;;;51     
;;;52     rt_inline unsigned int rt_list_len(const rt_list_t *l)
000000  4602              MOV      r2,r0
;;;53     {
;;;54         unsigned int len = 0;
000002  2000              MOVS     r0,#0
;;;55         const rt_list_t *p = l;
000004  4611              MOV      r1,r2
000006  e000              B        |L25.10|
                  |L25.8|
000008  1c40              ADDS     r0,r0,#1              ;53
                  |L25.10|
;;;56         while (p->next != l)
00000a  6809              LDR      r1,[r1,#0]
00000c  4291              CMP      r1,r2
00000e  d1fb              BNE      |L25.8|
;;;57         {
;;;58             p = p->next;
;;;59             len ++;
;;;60         }
;;;61     
;;;62         return len;
;;;63     }
000010  4770              BX       lr
;;;64     
                          ENDP


                          AREA ||i.show_wait_queue||, CODE, READONLY, ALIGN=2

                  show_wait_queue PROC
;;;153    
;;;154    static void show_wait_queue(struct rt_list_node *list)
000000  b570              PUSH     {r4-r6,lr}
;;;155    {
000002  4605              MOV      r5,r0
000004  6804              LDR      r4,[r0,#0]
000006  e00b              B        |L26.32|
                  |L26.8|
;;;156        struct rt_thread *thread;
;;;157        struct rt_list_node *node;
;;;158    
;;;159        for (node = list->next; node != list; node = node->next)
;;;160        {
;;;161            thread = rt_list_entry(node, struct rt_thread, tlist);
000008  4621              MOV      r1,r4
00000a  3914              SUBS     r1,r1,#0x14
;;;162            rt_kprintf("%s", thread->name);
00000c  a006              ADR      r0,|L26.40|
00000e  f7fffffe          BL       rt_kprintf
;;;163    
;;;164            if (node->next != list)
000012  6820              LDR      r0,[r4,#0]
000014  42a8              CMP      r0,r5
000016  d002              BEQ      |L26.30|
;;;165                rt_kprintf("/");
000018  a004              ADR      r0,|L26.44|
00001a  f7fffffe          BL       rt_kprintf
                  |L26.30|
00001e  6824              LDR      r4,[r4,#0]            ;159
                  |L26.32|
000020  42ac              CMP      r4,r5                 ;159
000022  d1f1              BNE      |L26.8|
;;;166        }
;;;167    }
000024  bd70              POP      {r4-r6,pc}
;;;168    
                          ENDP

000026  0000              DCW      0x0000
                  |L26.40|
000028  257300            DCB      "%s",0
00002b  00                DCB      0
                  |L26.44|
00002c  2f00              DCB      "/",0
00002e  00                DCB      0
00002f  00                DCB      0

                          AREA ||i.str_common||, CODE, READONLY, ALIGN=1

                  str_common PROC
;;;778    
;;;779    static int str_common(const char *str1, const char *str2)
000000  b510              PUSH     {r4,lr}
;;;780    {
;;;781        const char *str = str1;
000002  4602              MOV      r2,r0
000004  e001              B        |L27.10|
                  |L27.6|
000006  1c49              ADDS     r1,r1,#1              ;780
000008  1c52              ADDS     r2,r2,#1              ;780
                  |L27.10|
;;;782    
;;;783        while ((*str != 0) && (*str2 != 0) && (*str == *str2))
00000a  7814              LDRB     r4,[r2,#0]
00000c  2c00              CMP      r4,#0
00000e  d004              BEQ      |L27.26|
000010  780b              LDRB     r3,[r1,#0]
000012  2b00              CMP      r3,#0
000014  d001              BEQ      |L27.26|
000016  429c              CMP      r4,r3
000018  d0f5              BEQ      |L27.6|
                  |L27.26|
;;;784        {
;;;785            str ++;
;;;786            str2 ++;
;;;787        }
;;;788    
;;;789        return (str - str1);
00001a  1a10              SUBS     r0,r2,r0
;;;790    }
00001c  bd10              POP      {r4,pc}
;;;791    
                          ENDP


                          AREA ||i.str_is_prefix||, CODE, READONLY, ALIGN=1

                  str_is_prefix PROC
;;;764    #ifndef FINSH_USING_MSH_ONLY
;;;765    static int str_is_prefix(const char *prefix, const char *str)
000000  e001              B        |L28.6|
                  |L28.2|
;;;766    {
;;;767        while ((*prefix) && (*prefix == *str))
;;;768        {
;;;769            prefix ++;
;;;770            str ++;
000002  1c40              ADDS     r0,r0,#1
000004  1c49              ADDS     r1,r1,#1
                  |L28.6|
000006  7802              LDRB     r2,[r0,#0]            ;767
000008  2a00              CMP      r2,#0                 ;767
00000a  d005              BEQ      |L28.24|
00000c  780b              LDRB     r3,[r1,#0]            ;767
00000e  429a              CMP      r2,r3                 ;767
000010  d0f7              BEQ      |L28.2|
;;;771        }
;;;772    
;;;773        if (*prefix == 0)
;;;774            return 0;
;;;775    
;;;776        return -1;
000012  2000              MOVS     r0,#0
000014  43c0              MVNS     r0,r0
;;;777    }
000016  4770              BX       lr
                  |L28.24|
000018  2000              MOVS     r0,#0                 ;774
00001a  4770              BX       lr
;;;778    
                          ENDP


                          AREA ||i.version||, CODE, READONLY, ALIGN=1

                  version PROC
;;;73     extern void rt_show_version(void);
;;;74     long version(void)
000000  b510              PUSH     {r4,lr}
;;;75     {
;;;76         rt_show_version();
000002  f7fffffe          BL       rt_show_version
;;;77     
;;;78         return 0;
000006  2000              MOVS     r0,#0
;;;79     }
000008  bd10              POP      {r4,pc}
;;;80     FINSH_FUNCTION_EXPORT(version, show RT-Thread version information);
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      ||.conststring||
                          DCD      ||.conststring||+0x14
                          DCD      ||.conststring||+0x24
                          DCD      ||.conststring||+0x38
                          DCD      ||.conststring||+0x44
                          DCD      ||.conststring||+0x50
                          DCD      ||.conststring||+0x54
                          DCD      ||.conststring||+0x64
                          DCD      ||.conststring||+0x74
                          DCD      ||.conststring||+0x7c
                          DCD      ||.conststring||+0x90
                          DCD      ||.conststring||+0xa0
                          DCD      ||.conststring||+0xa8
                          DCD      ||.conststring||+0xb4
                          DCD      ||.conststring||+0xc0
                          DCD      ||.conststring||+0xd4
                          DCD      ||.conststring||+0xdc
                          DCD      ||.conststring||+0xec
                          DCD      ||.conststring||+0xfc
                          DCD      ||.conststring||+0x114

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  43686172          DCB      "Character Device",0
000004  61637465
000008  72204465
00000c  76696365
000010  00      
000011  00                DCB      0
000012  00                DCB      0
000013  00                DCB      0
000014  426c6f63          DCB      "Block Device",0
000018  6b204465
00001c  76696365
000020  00      
000021  00                DCB      0
000022  00                DCB      0
000023  00                DCB      0
000024  4e657477          DCB      "Network Interface",0
000028  6f726b20
00002c  496e7465
000030  72666163
000034  6500    
000036  00                DCB      0
000037  00                DCB      0
000038  4d544420          DCB      "MTD Device",0
00003c  44657669
000040  636500  
000043  00                DCB      0
000044  43414e20          DCB      "CAN Device",0
000048  44657669
00004c  636500  
00004f  00                DCB      0
000050  52544300          DCB      "RTC",0
000054  536f756e          DCB      "Sound Device",0
000058  64204465
00005c  76696365
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0
000064  47726170          DCB      "Graphic Device",0
000068  68696320
00006c  44657669
000070  636500  
000073  00                DCB      0
000074  49324320          DCB      "I2C Bus",0
000078  42757300
00007c  55534220          DCB      "USB Slave Device",0
000080  536c6176
000084  65204465
000088  76696365
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
000090  55534220          DCB      "USB Host Bus",0
000094  486f7374
000098  20427573
00009c  00      
00009d  00                DCB      0
00009e  00                DCB      0
00009f  00                DCB      0
0000a0  53504920          DCB      "SPI Bus",0
0000a4  42757300
0000a8  53504920          DCB      "SPI Device",0
0000ac  44657669
0000b0  636500  
0000b3  00                DCB      0
0000b4  5344494f          DCB      "SDIO Bus",0
0000b8  20427573
0000bc  00      
0000bd  00                DCB      0
0000be  00                DCB      0
0000bf  00                DCB      0
0000c0  504d2050          DCB      "PM Pseudo Device",0
0000c4  73657564
0000c8  6f204465
0000cc  76696365
0000d0  00      
0000d1  00                DCB      0
0000d2  00                DCB      0
0000d3  00                DCB      0
0000d4  50697065          DCB      "Pipe",0
0000d8  00      
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
0000dc  506f7274          DCB      "Portal Device",0
0000e0  616c2044
0000e4  65766963
0000e8  6500    
0000ea  00                DCB      0
0000eb  00                DCB      0
0000ec  54696d65          DCB      "Timer Device",0
0000f0  72204465
0000f4  76696365
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
0000fc  4d697363          DCB      "Miscellaneous Device",0
000100  656c6c61
000104  6e656f75
000108  73204465
00010c  76696365
000110  00      
000111  00                DCB      0
000112  00                DCB      0
000113  00                DCB      0
000114  556e6b6e          DCB      "Unknown",0
000118  6f776e00
00011c  252d2a2e          DCB      "%-*.s pri  status      sp     stack size max used left "
000120  73207072
000124  69202073
000128  74617475
00012c  73202020
000130  20202073
000134  70202020
000138  20207374
00013c  61636b20
000140  73697a65
000144  206d6178
000148  20757365
00014c  64206c65
000150  667420  
000153  7469636b          DCB      "tick  error\n",0
000157  20206572
00015b  726f720a
00015f  00      

                          AREA ||.data||, DATA, ALIGN=2

                  dummy
                          DCD      0x00000000

                          AREA ||.rodata.name||, DATA, READONLY, ALIGN=0

                  __fsym_hello_name
000000  68656c6c          DCB      0x68,0x65,0x6c,0x6c
000004  6f00              DCB      0x6f,0x00

                          AREA ||area_number.36||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.36||, ||.rodata.name||
                  __fsym_hello_desc
000000  73617920          DCB      0x73,0x61,0x79,0x20
000004  68656c6c          DCB      0x68,0x65,0x6c,0x6c
000008  6f20776f          DCB      0x6f,0x20,0x77,0x6f
00000c  726c6400          DCB      0x72,0x6c,0x64,0x00

                          AREA ||area_number.37||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.37||, ||.rodata.name||
                  __fsym_version_name
000000  76657273          DCB      0x76,0x65,0x72,0x73
000004  696f6e00          DCB      0x69,0x6f,0x6e,0x00

                          AREA ||area_number.38||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.38||, ||.rodata.name||
                  __fsym_version_desc
000000  73686f77          DCB      0x73,0x68,0x6f,0x77
000004  2052542d          DCB      0x20,0x52,0x54,0x2d
000008  54687265          DCB      0x54,0x68,0x72,0x65
00000c  61642076          DCB      0x61,0x64,0x20,0x76
000010  65727369          DCB      0x65,0x72,0x73,0x69
000014  6f6e2069          DCB      0x6f,0x6e,0x20,0x69
000018  6e666f72          DCB      0x6e,0x66,0x6f,0x72
00001c  6d617469          DCB      0x6d,0x61,0x74,0x69
000020  6f6e00            DCB      0x6f,0x6e,0x00

                          AREA ||area_number.39||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.39||, ||.rodata.name||
                  __fsym_list_thread_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f746872          DCB      0x5f,0x74,0x68,0x72
000008  65616400          DCB      0x65,0x61,0x64,0x00

                          AREA ||area_number.40||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.40||, ||.rodata.name||
                  __fsym_list_thread_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  20746872          DCB      0x20,0x74,0x68,0x72
000008  65616400          DCB      0x65,0x61,0x64,0x00

                          AREA ||area_number.41||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.41||, ||.rodata.name||
                  __fsym_list_sem_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f73656d          DCB      0x5f,0x73,0x65,0x6d
000008  00                DCB      0x00

                          AREA ||area_number.42||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.42||, ||.rodata.name||
                  __fsym_list_sem_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  2073656d          DCB      0x20,0x73,0x65,0x6d
000008  6170686f          DCB      0x61,0x70,0x68,0x6f
00000c  6e652069          DCB      0x6e,0x65,0x20,0x69
000010  6e207379          DCB      0x6e,0x20,0x73,0x79
000014  7374656d          DCB      0x73,0x74,0x65,0x6d
000018  00                DCB      0x00

                          AREA ||area_number.43||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.43||, ||.rodata.name||
                  __fsym_list_event_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f657665          DCB      0x5f,0x65,0x76,0x65
000008  6e7400            DCB      0x6e,0x74,0x00

                          AREA ||area_number.44||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.44||, ||.rodata.name||
                  __fsym_list_event_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  20657665          DCB      0x20,0x65,0x76,0x65
000008  6e742069          DCB      0x6e,0x74,0x20,0x69
00000c  6e207379          DCB      0x6e,0x20,0x73,0x79
000010  7374656d          DCB      0x73,0x74,0x65,0x6d
000014  00                DCB      0x00

                          AREA ||area_number.45||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.45||, ||.rodata.name||
                  __fsym_list_mutex_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f6d7574          DCB      0x5f,0x6d,0x75,0x74
000008  657800            DCB      0x65,0x78,0x00

                          AREA ||area_number.46||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.46||, ||.rodata.name||
                  __fsym_list_mutex_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  206d7574          DCB      0x20,0x6d,0x75,0x74
000008  65782069          DCB      0x65,0x78,0x20,0x69
00000c  6e207379          DCB      0x6e,0x20,0x73,0x79
000010  7374656d          DCB      0x73,0x74,0x65,0x6d
000014  00                DCB      0x00

                          AREA ||area_number.47||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.47||, ||.rodata.name||
                  __fsym_list_mailbox_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f6d6169          DCB      0x5f,0x6d,0x61,0x69
000008  6c626f78          DCB      0x6c,0x62,0x6f,0x78
00000c  00                DCB      0x00

                          AREA ||area_number.48||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.48||, ||.rodata.name||
                  __fsym_list_mailbox_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  206d6169          DCB      0x20,0x6d,0x61,0x69
000008  6c20626f          DCB      0x6c,0x20,0x62,0x6f
00000c  7820696e          DCB      0x78,0x20,0x69,0x6e
000010  20737973          DCB      0x20,0x73,0x79,0x73
000014  74656d00          DCB      0x74,0x65,0x6d,0x00

                          AREA ||area_number.49||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.49||, ||.rodata.name||
                  __fsym_list_msgqueue_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f6d7367          DCB      0x5f,0x6d,0x73,0x67
000008  71756575          DCB      0x71,0x75,0x65,0x75
00000c  6500              DCB      0x65,0x00

                          AREA ||area_number.50||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.50||, ||.rodata.name||
                  __fsym_list_msgqueue_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  206d6573          DCB      0x20,0x6d,0x65,0x73
000008  73616765          DCB      0x73,0x61,0x67,0x65
00000c  20717565          DCB      0x20,0x71,0x75,0x65
000010  75652069          DCB      0x75,0x65,0x20,0x69
000014  6e207379          DCB      0x6e,0x20,0x73,0x79
000018  7374656d          DCB      0x73,0x74,0x65,0x6d
00001c  00                DCB      0x00

                          AREA ||area_number.51||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.51||, ||.rodata.name||
                  __fsym_list_mempool_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f6d656d          DCB      0x5f,0x6d,0x65,0x6d
000008  706f6f6c          DCB      0x70,0x6f,0x6f,0x6c
00000c  00                DCB      0x00

                          AREA ||area_number.52||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.52||, ||.rodata.name||
                  __fsym_list_mempool_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  206d656d          DCB      0x20,0x6d,0x65,0x6d
000008  6f727920          DCB      0x6f,0x72,0x79,0x20
00000c  706f6f6c          DCB      0x70,0x6f,0x6f,0x6c
000010  20696e20          DCB      0x20,0x69,0x6e,0x20
000014  73797374          DCB      0x73,0x79,0x73,0x74
000018  656d00            DCB      0x65,0x6d,0x00

                          AREA ||area_number.53||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.53||, ||.rodata.name||
                  __fsym_list_timer_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f74696d          DCB      0x5f,0x74,0x69,0x6d
000008  657200            DCB      0x65,0x72,0x00

                          AREA ||area_number.54||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.54||, ||.rodata.name||
                  __fsym_list_timer_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  2074696d          DCB      0x20,0x74,0x69,0x6d
000008  65722069          DCB      0x65,0x72,0x20,0x69
00000c  6e207379          DCB      0x6e,0x20,0x73,0x79
000010  7374656d          DCB      0x73,0x74,0x65,0x6d
000014  00                DCB      0x00

                          AREA ||area_number.55||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.55||, ||.rodata.name||
                  __fsym_list_device_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  5f646576          DCB      0x5f,0x64,0x65,0x76
000008  69636500          DCB      0x69,0x63,0x65,0x00

                          AREA ||area_number.56||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.56||, ||.rodata.name||
                  __fsym_list_device_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  20646576          DCB      0x20,0x64,0x65,0x76
000008  69636520          DCB      0x69,0x63,0x65,0x20
00000c  696e2073          DCB      0x69,0x6e,0x20,0x73
000010  79737465          DCB      0x79,0x73,0x74,0x65
000014  6d00              DCB      0x6d,0x00

                          AREA ||area_number.57||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.57||, ||.rodata.name||
                  __fsym_list_name
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  00                DCB      0x00

                          AREA ||area_number.58||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.58||, ||.rodata.name||
                  __fsym_list_desc
000000  6c697374          DCB      0x6c,0x69,0x73,0x74
000004  20616c6c          DCB      0x20,0x61,0x6c,0x6c
000008  2073796d          DCB      0x20,0x73,0x79,0x6d
00000c  626f6c20          DCB      0x62,0x6f,0x6c,0x20
000010  696e2073          DCB      0x69,0x6e,0x20,0x73
000014  79737465          DCB      0x79,0x73,0x74,0x65
000018  6d00              DCB      0x6d,0x00

                          AREA ||area_number.59||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.59||, ||.rodata.name||
                  __vsym_dummy_name
000000  64756d6d          DCB      0x64,0x75,0x6d,0x6d
000004  7900              DCB      0x79,0x00

                          AREA ||area_number.60||, DATA, READONLY, ALIGN=0

                          EXPORTAS ||area_number.60||, ||.rodata.name||
                  __vsym_dummy_desc
000000  64756d6d          DCB      0x64,0x75,0x6d,0x6d
000004  79207661          DCB      0x79,0x20,0x76,0x61
000008  72696162          DCB      0x72,0x69,0x61,0x62
00000c  6c652066          DCB      0x6c,0x65,0x20,0x66
000010  6f722066          DCB      0x6f,0x72,0x20,0x66
000014  696e7368          DCB      0x69,0x6e,0x73,0x68
000018  00                DCB      0x00

                          AREA FSymTab, DATA, READONLY, ALIGN=2

                  __fsym_hello
                          DCD      __fsym_hello_name
                          DCD      __fsym_hello_desc
                          DCD      hello

                          AREA ||area_number.62||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.62||, FSymTab
                  __fsym_version
                          DCD      __fsym_version_name
                          DCD      __fsym_version_desc
                          DCD      version

                          AREA ||area_number.63||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.63||, FSymTab
                  __fsym_list_thread
                          DCD      __fsym_list_thread_name
                          DCD      __fsym_list_thread_desc
                          DCD      list_thread

                          AREA ||area_number.64||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.64||, FSymTab
                  __fsym_list_sem
                          DCD      __fsym_list_sem_name
                          DCD      __fsym_list_sem_desc
                          DCD      list_sem

                          AREA ||area_number.65||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.65||, FSymTab
                  __fsym_list_event
                          DCD      __fsym_list_event_name
                          DCD      __fsym_list_event_desc
                          DCD      list_event

                          AREA ||area_number.66||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.66||, FSymTab
                  __fsym_list_mutex
                          DCD      __fsym_list_mutex_name
                          DCD      __fsym_list_mutex_desc
                          DCD      list_mutex

                          AREA ||area_number.67||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.67||, FSymTab
                  __fsym_list_mailbox
                          DCD      __fsym_list_mailbox_name
                          DCD      __fsym_list_mailbox_desc
                          DCD      list_mailbox

                          AREA ||area_number.68||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.68||, FSymTab
                  __fsym_list_msgqueue
                          DCD      __fsym_list_msgqueue_name
                          DCD      __fsym_list_msgqueue_desc
                          DCD      list_msgqueue

                          AREA ||area_number.69||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.69||, FSymTab
                  __fsym_list_mempool
                          DCD      __fsym_list_mempool_name
                          DCD      __fsym_list_mempool_desc
                          DCD      list_mempool

                          AREA ||area_number.70||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.70||, FSymTab
                  __fsym_list_timer
                          DCD      __fsym_list_timer_name
                          DCD      __fsym_list_timer_desc
                          DCD      list_timer

                          AREA ||area_number.71||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.71||, FSymTab
                  __fsym_list_device
                          DCD      __fsym_list_device_name
                          DCD      __fsym_list_device_desc
                          DCD      list_device

                          AREA ||area_number.72||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.72||, FSymTab
                  __fsym_list
                          DCD      __fsym_list_name
                          DCD      __fsym_list_desc
                          DCD      list

                          AREA VSymTab, DATA, READONLY, ALIGN=2

                  __vsym_dummy
                          DCD      __vsym_dummy_name
                          DCD      __vsym_dummy_desc
000008  09000000          DCB      0x09,0x00,0x00,0x00
                          DCD      dummy
