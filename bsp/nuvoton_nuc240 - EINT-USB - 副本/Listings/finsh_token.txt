; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\finsh_token.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\finsh_token.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 -DRT_DEBUG --omf_browse=.\objects\finsh_token.crf ..\..\components\finsh\finsh_token.c]
                          THUMB

                          AREA ||i.finsh_token_get_token||, CODE, READONLY, ALIGN=1

                  finsh_token_get_token PROC
;;;88     
;;;89     void finsh_token_get_token(struct finsh_token* self, u_char* token)
000000  460b              MOV      r3,r1
;;;90     {
;;;91     	strncpy((char*)token, (char*)self->string, FINSH_NAME_MAX);
000002  2210              MOVS     r2,#0x10
000004  b510              PUSH     {r4,lr}               ;90
000006  1881              ADDS     r1,r0,r2
000008  4618              MOV      r0,r3
00000a  f7fffffe          BL       strncpy
;;;92     }
00000e  bd10              POP      {r4,pc}
;;;93     
                          ENDP


                          AREA ||i.finsh_token_init||, CODE, READONLY, ALIGN=1

                  finsh_token_init PROC
;;;73     
;;;74     void finsh_token_init(struct finsh_token* self, u_char* line)
000000  b570              PUSH     {r4-r6,lr}
;;;75     {
000002  460d              MOV      r5,r1
000004  4604              MOV      r4,r0
;;;76     	memset(self, 0, sizeof(struct finsh_token));
000006  2194              MOVS     r1,#0x94
000008  f7fffffe          BL       __aeabi_memclr4
00000c  3480              ADDS     r4,r4,#0x80
;;;77     
;;;78     	self->line = line;
00000e  6125              STR      r5,[r4,#0x10]
;;;79     }
000010  bd70              POP      {r4-r6,pc}
;;;80     
                          ENDP


                          AREA ||i.finsh_token_token||, CODE, READONLY, ALIGN=1

                  finsh_token_token PROC
;;;80     
;;;81     enum finsh_token_type finsh_token_token(struct finsh_token* self)
000000  b510              PUSH     {r4,lr}
;;;82     {
000002  4604              MOV      r4,r0
;;;83     	if ( self->replay )	self->replay = 0;
000004  7840              LDRB     r0,[r0,#1]
000006  2800              CMP      r0,#0
000008  d002              BEQ      |L3.16|
00000a  2000              MOVS     r0,#0
00000c  7060              STRB     r0,[r4,#1]
00000e  e002              B        |L3.22|
                  |L3.16|
;;;84     	else token_run(self);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       token_run
                  |L3.22|
;;;85     
;;;86     	return (enum finsh_token_type)self->current_token;
000016  7a20              LDRB     r0,[r4,#8]
;;;87     }
000018  bd10              POP      {r4,pc}
;;;88     
                          ENDP


                          AREA ||i.token_get_string||, CODE, READONLY, ALIGN=1

                  token_get_string PROC
;;;93     
;;;94     int token_get_string(struct finsh_token* self, u_char* str)
000000  b5f8              PUSH     {r3-r7,lr}
;;;95     {
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;96     	unsigned char *p=str;
;;;97     	char ch;
;;;98     
;;;99     	ch = token_next_char(self);
000006  f7fffffe          BL       token_next_char
;;;100    	if (is_eof(self)) return -1;
00000a  7829              LDRB     r1,[r5,#0]
00000c  2700              MOVS     r7,#0
00000e  43ff              MVNS     r7,r7
000010  2900              CMP      r1,#0
000012  d001              BEQ      |L4.24|
                  |L4.20|
000014  4638              MOV      r0,r7
;;;101    
;;;102    	str[0] = '\0';
;;;103    
;;;104    	if ( is_digit(ch) )/*the first character of identifier is not a digit.*/
;;;105    	{
;;;106    		token_prev_char(self);
;;;107    		return -1;
;;;108    	}
;;;109    
;;;110    	while (!is_separator(ch) && !is_eof(self))
;;;111    	{
;;;112    		*p++ = ch;
;;;113    
;;;114    		ch = token_next_char(self);
;;;115    	}
;;;116    	self->eof = 0;
;;;117    
;;;118    	token_prev_char(self);
;;;119    	*p = '\0';
;;;120    
;;;121    	return 0;
;;;122    }
000016  bdf8              POP      {r3-r7,pc}
                  |L4.24|
000018  2600              MOVS     r6,#0                 ;102
00001a  4601              MOV      r1,r0                 ;104
00001c  3930              SUBS     r1,r1,#0x30           ;104
00001e  7026              STRB     r6,[r4,#0]            ;102
000020  2909              CMP      r1,#9                 ;104
000022  d808              BHI      |L4.54|
000024  4628              MOV      r0,r5                 ;106
000026  f7fffffe          BL       token_prev_char
00002a  e7f3              B        |L4.20|
                  |L4.44|
00002c  7020              STRB     r0,[r4,#0]            ;112
00002e  4628              MOV      r0,r5                 ;114
000030  1c64              ADDS     r4,r4,#1              ;114
000032  f7fffffe          BL       token_next_char
                  |L4.54|
000036  4601              MOV      r1,r0                 ;110
000038  3961              SUBS     r1,r1,#0x61           ;110
00003a  2919              CMP      r1,#0x19              ;110
00003c  d907              BLS      |L4.78|
00003e  3120              ADDS     r1,r1,#0x20           ;110
000040  2919              CMP      r1,#0x19              ;110
000042  d904              BLS      |L4.78|
000044  3111              ADDS     r1,r1,#0x11           ;110
000046  2909              CMP      r1,#9                 ;110
000048  d901              BLS      |L4.78|
00004a  285f              CMP      r0,#0x5f              ;110
00004c  d102              BNE      |L4.84|
                  |L4.78|
00004e  7829              LDRB     r1,[r5,#0]            ;110
000050  2900              CMP      r1,#0                 ;110
000052  d0eb              BEQ      |L4.44|
                  |L4.84|
000054  702e              STRB     r6,[r5,#0]            ;116
000056  4628              MOV      r0,r5                 ;118
000058  f7fffffe          BL       token_prev_char
00005c  7026              STRB     r6,[r4,#0]            ;119
00005e  2000              MOVS     r0,#0                 ;121
000060  bdf8              POP      {r3-r7,pc}
;;;123    
                          ENDP


                          AREA ||i.token_next_char||, CODE, READONLY, ALIGN=1

                  token_next_char PROC
;;;126    */
;;;127    static char token_next_char(struct finsh_token* self)
000000  b570              PUSH     {r4-r6,lr}
;;;128    {
000002  4604              MOV      r4,r0
;;;129    	if (self->eof) return '\0';
000004  7800              LDRB     r0,[r0,#0]
000006  2800              CMP      r0,#0
000008  d001              BEQ      |L5.14|
                  |L5.10|
00000a  2000              MOVS     r0,#0
;;;130    
;;;131    	if (self->position == (int)strlen((char*)self->line) || self->line[self->position] =='\n')
;;;132    	{
;;;133    			self->eof = 1;
;;;134    			self->position = 0;
;;;135    			return '\0';
;;;136    	}
;;;137    
;;;138    	return self->line[self->position++];
;;;139    }
00000c  bd70              POP      {r4-r6,pc}
                  |L5.14|
00000e  4625              MOV      r5,r4                 ;131
000010  3580              ADDS     r5,r5,#0x80           ;131
000012  6928              LDR      r0,[r5,#0x10]         ;131
000014  f7fffffe          BL       strlen
000018  4601              MOV      r1,r0                 ;131
00001a  6860              LDR      r0,[r4,#4]            ;131
00001c  4281              CMP      r1,r0                 ;131
00001e  d007              BEQ      |L5.48|
000020  6929              LDR      r1,[r5,#0x10]         ;131
000022  5c0a              LDRB     r2,[r1,r0]            ;131
000024  2a0a              CMP      r2,#0xa               ;131
000026  d003              BEQ      |L5.48|
000028  1c42              ADDS     r2,r0,#1              ;138
00002a  6062              STR      r2,[r4,#4]            ;138
00002c  5c08              LDRB     r0,[r1,r0]            ;138
00002e  bd70              POP      {r4-r6,pc}
                  |L5.48|
000030  2001              MOVS     r0,#1                 ;133
000032  7020              STRB     r0,[r4,#0]            ;133
000034  2000              MOVS     r0,#0                 ;134
000036  6060              STR      r0,[r4,#4]            ;135
000038  e7e7              B        |L5.10|
;;;140    
                          ENDP


                          AREA ||i.token_prev_char||, CODE, READONLY, ALIGN=1

                  token_prev_char PROC
;;;140    
;;;141    static void token_prev_char(struct finsh_token* self)
000000  7801              LDRB     r1,[r0,#0]
;;;142    {
;;;143    	if ( self->eof ) return;
000002  2900              CMP      r1,#0
000004  d104              BNE      |L6.16|
;;;144    
;;;145    	if ( self->position == 0 ) return;
000006  6841              LDR      r1,[r0,#4]
000008  2900              CMP      r1,#0
00000a  d001              BEQ      |L6.16|
00000c  1e49              SUBS     r1,r1,#1
;;;146        else self->position--;
00000e  6041              STR      r1,[r0,#4]
                  |L6.16|
;;;147    }
000010  4770              BX       lr
;;;148    
                          ENDP


                          AREA ||i.token_proc_char||, CODE, READONLY, ALIGN=1

                  token_proc_char PROC
;;;340    
;;;341    static char token_proc_char(struct finsh_token* self)
000000  b5f8              PUSH     {r3-r7,lr}
;;;342    {
000002  4606              MOV      r6,r0
;;;343    	char ch;
;;;344    	char buf[4], *p;
;;;345    
;;;346    	p = buf;
000004  466d              MOV      r5,sp
;;;347    	ch = token_next_char(self);
000006  f7fffffe          BL       token_next_char
00000a  4604              MOV      r4,r0
;;;348    
;;;349    	if ( ch == '\\' )
00000c  285c              CMP      r0,#0x5c
00000e  d131              BNE      |L7.116|
;;;350    	{
;;;351    		ch = token_next_char(self);
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       token_next_char
;;;352    		switch ( ch )
000016  286e              CMP      r0,#0x6e
000018  d00e              BEQ      |L7.56|
00001a  dc06              BGT      |L7.42|
00001c  2827              CMP      r0,#0x27
00001e  d017              BEQ      |L7.80|
000020  285c              CMP      r0,#0x5c
000022  d013              BEQ      |L7.76|
000024  2862              CMP      r0,#0x62
000026  d119              BNE      |L7.92|
000028  e00c              B        |L7.68|
                  |L7.42|
00002a  2872              CMP      r0,#0x72
00002c  d00c              BEQ      |L7.72|
00002e  2874              CMP      r0,#0x74
000030  d004              BEQ      |L7.60|
000032  2876              CMP      r0,#0x76
000034  d112              BNE      |L7.92|
000036  e003              B        |L7.64|
                  |L7.56|
;;;353    		{
;;;354    		case 'n': ch = '\n'; break;
000038  240a              MOVS     r4,#0xa
00003a  e01b              B        |L7.116|
                  |L7.60|
;;;355    		case 't': ch = '\t'; break;
00003c  2409              MOVS     r4,#9
00003e  e019              B        |L7.116|
                  |L7.64|
;;;356    		case 'v': ch = '\v'; break;
000040  240b              MOVS     r4,#0xb
000042  e017              B        |L7.116|
                  |L7.68|
;;;357    		case 'b': ch = '\b'; break;
000044  2408              MOVS     r4,#8
000046  e015              B        |L7.116|
                  |L7.72|
;;;358    		case 'r': ch = '\r'; break;
000048  240d              MOVS     r4,#0xd
00004a  e013              B        |L7.116|
                  |L7.76|
;;;359    		case '\\': ch = '\\';  break;
00004c  245c              MOVS     r4,#0x5c
00004e  e011              B        |L7.116|
                  |L7.80|
;;;360    		case '\'': ch = '\'';  break;
000050  2427              MOVS     r4,#0x27
000052  e00f              B        |L7.116|
                  |L7.84|
;;;361    		default :
;;;362    			while ( is_digit(ch) )/*for '\113' char*/
;;;363    			{
;;;364    				ch = token_next_char(self);
000054  f7fffffe          BL       token_next_char
;;;365    				*p++ = ch;
000058  7028              STRB     r0,[r5,#0]
00005a  1c6d              ADDS     r5,r5,#1
                  |L7.92|
00005c  3830              SUBS     r0,r0,#0x30
00005e  2809              CMP      r0,#9                 ;362
;;;366    			}
;;;367    
;;;368    			token_prev_char(self);
000060  4630              MOV      r0,r6
000062  d9f7              BLS      |L7.84|
000064  f7fffffe          BL       token_prev_char
;;;369    			*p = '\0';
000068  2000              MOVS     r0,#0
00006a  7028              STRB     r0,[r5,#0]
;;;370    			ch = atoi(p);
00006c  4628              MOV      r0,r5
00006e  f7fffffe          BL       atoi
000072  b2c4              UXTB     r4,r0
                  |L7.116|
;;;371    			break;
;;;372    		}
;;;373    	}
;;;374    
;;;375    	if ( token_next_char(self) != '\'' )
000074  4630              MOV      r0,r6
000076  f7fffffe          BL       token_next_char
00007a  2827              CMP      r0,#0x27
00007c  d005              BEQ      |L7.138|
;;;376    	{
;;;377    		token_prev_char(self);
00007e  4630              MOV      r0,r6
000080  f7fffffe          BL       token_prev_char
;;;378    		finsh_error_set(FINSH_ERROR_EXPECT_CHAR);
000084  2009              MOVS     r0,#9
000086  f7fffffe          BL       finsh_error_set
                  |L7.138|
;;;379    		return ch;
;;;380    	}
;;;381    
;;;382    	return ch;
00008a  4620              MOV      r0,r4
;;;383    }
00008c  bdf8              POP      {r3-r7,pc}
;;;384    
                          ENDP


                          AREA ||i.token_proc_escape||, CODE, READONLY, ALIGN=1

                  token_proc_escape PROC
;;;413    
;;;414    static int token_proc_escape(struct finsh_token* self)
000000  b570              PUSH     {r4-r6,lr}
;;;415    {
000002  4605              MOV      r5,r0
;;;416    	char ch;
;;;417    	int result=0;
000004  2400              MOVS     r4,#0
;;;418    
;;;419    	ch = token_next_char(self);
000006  f7fffffe          BL       token_next_char
;;;420    	switch (ch)
00000a  286e              CMP      r0,#0x6e
00000c  d028              BEQ      |L8.96|
00000e  dc0c              BGT      |L8.42|
000010  2861              CMP      r0,#0x61
000012  d031              BEQ      |L8.120|
000014  dc04              BGT      |L8.32|
000016  2822              CMP      r0,#0x22
000018  d030              BEQ      |L8.124|
00001a  2858              CMP      r0,#0x58
00001c  d10d              BNE      |L8.58|
00001e  e02f              B        |L8.128|
                  |L8.32|
000020  2862              CMP      r0,#0x62
000022  d023              BEQ      |L8.108|
000024  2866              CMP      r0,#0x66
000026  d108              BNE      |L8.58|
000028  e024              B        |L8.116|
                  |L8.42|
00002a  2872              CMP      r0,#0x72
00002c  d020              BEQ      |L8.112|
00002e  2874              CMP      r0,#0x74
000030  d018              BEQ      |L8.100|
000032  2876              CMP      r0,#0x76
000034  d018              BEQ      |L8.104|
000036  2878              CMP      r0,#0x78
000038  d022              BEQ      |L8.128|
                  |L8.58|
;;;421    	{
;;;422    	case 'n':
;;;423    		result = '\n';
;;;424    		break;
;;;425    	case 't':
;;;426    		result = '\t';
;;;427    		break;
;;;428    	case 'v':
;;;429    		result = '\v';
;;;430    		break;
;;;431    	case 'b':
;;;432    		result = '\b';
;;;433    		break;
;;;434    	case 'r':
;;;435    		result = '\r';
;;;436    		break;
;;;437    	case 'f':
;;;438    		result = '\f';
;;;439    		break;
;;;440    	case 'a':
;;;441    		result = '\007';
;;;442    		break;
;;;443    	case '"':
;;;444    		result = '"';
;;;445    		break;
;;;446    	case 'x':
;;;447    	case 'X':
;;;448    		result = 0;
;;;449    		ch  = token_next_char(self);
;;;450    		while (is_xdigit(ch))
;;;451    		{
;;;452    			result = result * 16 + ((ch < 'A') ? (ch - '0') : (ch | 0x20) - 'a' + 10);
;;;453    			ch = token_next_char(self);
;;;454    		}
;;;455    		token_prev_char(self);
;;;456    		break;
;;;457    	default:
;;;458    		if ( (ch - '0') < 8u)
00003a  4601              MOV      r1,r0
00003c  3930              SUBS     r1,r1,#0x30
00003e  2908              CMP      r1,#8
000040  d20c              BCS      |L8.92|
                  |L8.66|
;;;459    		{
;;;460    			result = 0;
;;;461    			while ( (ch - '0') < 8u )
;;;462    			{
;;;463    				result = result*8 + ch - '0';
000042  00e1              LSLS     r1,r4,#3
000044  180c              ADDS     r4,r1,r0
;;;464    				ch = token_next_char(self);
000046  4628              MOV      r0,r5
000048  3c30              SUBS     r4,r4,#0x30
00004a  f7fffffe          BL       token_next_char
00004e  4601              MOV      r1,r0                 ;461
000050  3930              SUBS     r1,r1,#0x30           ;461
000052  2908              CMP      r1,#8                 ;461
000054  d3f5              BCC      |L8.66|
                  |L8.86|
;;;465    			}
;;;466    
;;;467    			token_prev_char(self);
000056  4628              MOV      r0,r5
000058  f7fffffe          BL       token_prev_char
                  |L8.92|
;;;468    		}
;;;469    		break;
;;;470    	}
;;;471    
;;;472    	return result;
00005c  4620              MOV      r0,r4
;;;473    }
00005e  bd70              POP      {r4-r6,pc}
                  |L8.96|
000060  240a              MOVS     r4,#0xa               ;423
000062  e7fb              B        |L8.92|
                  |L8.100|
000064  2409              MOVS     r4,#9                 ;426
000066  e7f9              B        |L8.92|
                  |L8.104|
000068  240b              MOVS     r4,#0xb               ;429
00006a  e7f7              B        |L8.92|
                  |L8.108|
00006c  2408              MOVS     r4,#8                 ;432
00006e  e7f5              B        |L8.92|
                  |L8.112|
000070  240d              MOVS     r4,#0xd               ;435
000072  e7f3              B        |L8.92|
                  |L8.116|
000074  240c              MOVS     r4,#0xc               ;438
000076  e7f1              B        |L8.92|
                  |L8.120|
000078  2407              MOVS     r4,#7                 ;441
00007a  e7ef              B        |L8.92|
                  |L8.124|
00007c  2422              MOVS     r4,#0x22              ;444
00007e  e7ed              B        |L8.92|
                  |L8.128|
000080  4628              MOV      r0,r5                 ;449
000082  f7fffffe          BL       token_next_char
000086  2620              MOVS     r6,#0x20              ;452
000088  e00a              B        |L8.160|
                  |L8.138|
00008a  0122              LSLS     r2,r4,#4              ;452
00008c  2841              CMP      r0,#0x41              ;452
00008e  d201              BCS      |L8.148|
000090  4608              MOV      r0,r1                 ;452
000092  e001              B        |L8.152|
                  |L8.148|
000094  4330              ORRS     r0,r0,r6              ;452
000096  3857              SUBS     r0,r0,#0x57           ;452
                  |L8.152|
000098  1814              ADDS     r4,r2,r0              ;452
00009a  4628              MOV      r0,r5                 ;453
00009c  f7fffffe          BL       token_next_char
                  |L8.160|
0000a0  4601              MOV      r1,r0                 ;450
0000a2  3930              SUBS     r1,r1,#0x30           ;450
0000a4  2909              CMP      r1,#9                 ;450
0000a6  d9f0              BLS      |L8.138|
0000a8  4602              MOV      r2,r0                 ;450
0000aa  4332              ORRS     r2,r2,r6              ;450
0000ac  3a61              SUBS     r2,r2,#0x61           ;450
0000ae  2a06              CMP      r2,#6                 ;450
0000b0  d3eb              BCC      |L8.138|
0000b2  e7d0              B        |L8.86|
;;;474    
                          ENDP


                          AREA ||i.token_proc_number||, CODE, READONLY, ALIGN=1

                  token_proc_number PROC
;;;477    */
;;;478    static void token_proc_number(struct finsh_token* self)
000000  b5f0              PUSH     {r4-r7,lr}
;;;479    {
000002  b0a1              SUB      sp,sp,#0x84
000004  4606              MOV      r6,r0
;;;480    	char ch;
;;;481    	char *p, buf[128];
;;;482    	long value;
;;;483    
;;;484    	value = 0;
000006  2700              MOVS     r7,#0
;;;485    	p = buf;
000008  466d              MOV      r5,sp
;;;486    
;;;487    	ch  = token_next_char(self);
00000a  f7fffffe          BL       token_next_char
00000e  4604              MOV      r4,r0
;;;488    	if ( ch == '0' )
000010  2830              CMP      r0,#0x30
000012  d155              BNE      |L9.192|
;;;489    	{
;;;490    		int b;
;;;491    		ch = token_next_char(self);
000014  4630              MOV      r0,r6
000016  f7fffffe          BL       token_next_char
00001a  4604              MOV      r4,r0
;;;492    		if ( ch == 'x' || ch == 'X' )/*it's a hex number*/
00001c  2878              CMP      r0,#0x78
00001e  d01f              BEQ      |L9.96|
000020  2c58              CMP      r4,#0x58
000022  d01d              BEQ      |L9.96|
;;;493    		{
;;;494    			b = 16;
;;;495    			ch = token_next_char(self);
;;;496    			while ( is_digit(ch) || is_alpha(ch) )
;;;497    			{
;;;498    				*p++ = ch;
;;;499    				ch = token_next_char(self);
;;;500    			}
;;;501    
;;;502    			*p = '\0';
;;;503    		}
;;;504    		else if ( ch == 'b' || ch == 'B' )
000024  2c62              CMP      r4,#0x62
000026  d02e              BEQ      |L9.134|
000028  2c42              CMP      r4,#0x42
00002a  d02c              BEQ      |L9.134|
;;;505    		{
;;;506    			b = 2;
;;;507    			ch = token_next_char(self);
;;;508    			while ( (ch=='0')||(ch=='1') )
;;;509    			{
;;;510    				*p++ = ch;
;;;511    				ch = token_next_char(self);
;;;512    			}
;;;513    
;;;514    			*p = '\0';
;;;515    		}
;;;516    		else if ( '0' <= ch && ch <= '7' )
00002c  4620              MOV      r0,r4
00002e  3830              SUBS     r0,r0,#0x30
000030  2807              CMP      r0,#7
000032  d836              BHI      |L9.162|
;;;517    		{
;;;518    			b = 8;
000034  2708              MOVS     r7,#8
                  |L9.54|
;;;519    			while ( '0' <= ch && ch <= '7' )
;;;520    			{
;;;521    				*p++ = ch;
000036  702c              STRB     r4,[r5,#0]
;;;522    				ch = token_next_char(self);
000038  4630              MOV      r0,r6
00003a  1c6d              ADDS     r5,r5,#1
00003c  f7fffffe          BL       token_next_char
000040  4604              MOV      r4,r0
000042  3830              SUBS     r0,r0,#0x30           ;519
000044  2807              CMP      r0,#7                 ;519
000046  d9f6              BLS      |L9.54|
                  |L9.72|
;;;523    			}
;;;524    
;;;525    			*p = '\0';
000048  2000              MOVS     r0,#0
00004a  7028              STRB     r0,[r5,#0]
;;;526    		}
;;;527    		else
;;;528    		{
;;;529    			token_prev_char(self);
;;;530    
;;;531    			/* made as 0 value */
;;;532    			self->value.int_value = 0;
;;;533    			self->current_token = finsh_token_type_value_int;
;;;534    			return;
;;;535    		}
;;;536    
;;;537    		self->value.int_value = token_spec_number(buf, strlen(buf), b);
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       strlen
000052  4601              MOV      r1,r0
000054  463a              MOV      r2,r7
000056  4668              MOV      r0,sp
000058  f7fffffe          BL       token_spec_number
;;;538    		self->current_token = finsh_token_type_value_int;
;;;539    	}
00005c  60f0              STR      r0,[r6,#0xc]
00005e  e034              B        |L9.202|
                  |L9.96|
000060  2710              MOVS     r7,#0x10              ;494
000062  4630              MOV      r0,r6                 ;495
000064  e002              B        |L9.108|
                  |L9.102|
000066  702c              STRB     r4,[r5,#0]            ;498
000068  4630              MOV      r0,r6                 ;499
00006a  1c6d              ADDS     r5,r5,#1              ;499
                  |L9.108|
00006c  f7fffffe          BL       token_next_char
000070  4604              MOV      r4,r0                 ;495
000072  3830              SUBS     r0,r0,#0x30           ;496
000074  2809              CMP      r0,#9                 ;496
000076  d9f6              BLS      |L9.102|
000078  4620              MOV      r0,r4                 ;496
00007a  2120              MOVS     r1,#0x20              ;496
00007c  4308              ORRS     r0,r0,r1              ;496
00007e  3861              SUBS     r0,r0,#0x61           ;496
000080  281a              CMP      r0,#0x1a              ;496
000082  d3f0              BCC      |L9.102|
000084  e7e0              B        |L9.72|
                  |L9.134|
000086  2702              MOVS     r7,#2                 ;506
000088  4630              MOV      r0,r6                 ;507
00008a  e002              B        |L9.146|
                  |L9.140|
00008c  7028              STRB     r0,[r5,#0]            ;510
00008e  4630              MOV      r0,r6                 ;511
000090  1c6d              ADDS     r5,r5,#1              ;511
                  |L9.146|
000092  f7fffffe          BL       token_next_char
000096  4604              MOV      r4,r0                 ;507
000098  2830              CMP      r0,#0x30              ;508
00009a  d0f7              BEQ      |L9.140|
00009c  2c31              CMP      r4,#0x31              ;508
00009e  d0f5              BEQ      |L9.140|
0000a0  e7d2              B        |L9.72|
                  |L9.162|
0000a2  4630              MOV      r0,r6                 ;529
0000a4  f7fffffe          BL       token_prev_char
0000a8  2000              MOVS     r0,#0                 ;532
0000aa  60f0              STR      r0,[r6,#0xc]          ;533
0000ac  201b              MOVS     r0,#0x1b              ;533
0000ae  e018              B        |L9.226|
                  |L9.176|
;;;540    	else
;;;541    	{
;;;542    		while ( is_digit(ch) )
;;;543    		{
;;;544    			value = value*10 + ( ch - '0' );
0000b0  200a              MOVS     r0,#0xa
0000b2  4347              MULS     r7,r0,r7
0000b4  193f              ADDS     r7,r7,r4
;;;545    			ch = token_next_char(self);
0000b6  4630              MOV      r0,r6
0000b8  3f30              SUBS     r7,r7,#0x30
0000ba  f7fffffe          BL       token_next_char
0000be  4604              MOV      r4,r0
                  |L9.192|
0000c0  4620              MOV      r0,r4                 ;542
0000c2  3830              SUBS     r0,r0,#0x30           ;542
0000c4  2809              CMP      r0,#9                 ;542
0000c6  d9f3              BLS      |L9.176|
;;;546    		}
;;;547    
;;;548    		self->value.int_value = value;
0000c8  60f7              STR      r7,[r6,#0xc]
                  |L9.202|
;;;549    		self->current_token = finsh_token_type_value_int;
0000ca  201b              MOVS     r0,#0x1b
0000cc  7230              STRB     r0,[r6,#8]
;;;550    	}
;;;551    
;;;552    	switch ( ch )
0000ce  2c4c              CMP      r4,#0x4c
0000d0  d006              BEQ      |L9.224|
0000d2  2c6c              CMP      r4,#0x6c
0000d4  d004              BEQ      |L9.224|
;;;553    	{
;;;554    	case 'l':
;;;555    	case 'L':
;;;556    		self->current_token = finsh_token_type_value_long;
;;;557    		break;
;;;558    
;;;559    	default:
;;;560    		token_prev_char(self);
0000d6  4630              MOV      r0,r6
0000d8  f7fffffe          BL       token_prev_char
                  |L9.220|
;;;561    		break;
;;;562    	}
;;;563    }
0000dc  b021              ADD      sp,sp,#0x84
0000de  bdf0              POP      {r4-r7,pc}
                  |L9.224|
0000e0  201c              MOVS     r0,#0x1c              ;556
                  |L9.226|
0000e2  7230              STRB     r0,[r6,#8]            ;556
0000e4  e7fa              B        |L9.220|
;;;564    
                          ENDP


                          AREA ||i.token_run||, CODE, READONLY, ALIGN=2

                  token_run PROC
;;;148    
;;;149    static void token_run(struct finsh_token* self)
000000  b5f8              PUSH     {r3-r7,lr}
;;;150    {
000002  4604              MOV      r4,r0
                  |L10.4|
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       token_next_char
00000a  2820              CMP      r0,#0x20
00000c  d0fa              BEQ      |L10.4|
00000e  2809              CMP      r0,#9
000010  d0f8              BEQ      |L10.4|
000012  280d              CMP      r0,#0xd
000014  d0f6              BEQ      |L10.4|
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       token_prev_char
;;;151    	char ch;
;;;152    
;;;153    	token_trim_space(self); /* first trim space and tab. */
;;;154    	token_get_string(self, &(self->string[0]));
00001c  4621              MOV      r1,r4
00001e  3110              ADDS     r1,r1,#0x10
000020  460e              MOV      r6,r1
000022  4620              MOV      r0,r4
000024  f7fffffe          BL       token_get_string
;;;155    
;;;156    	if ( is_eof(self) ) /*if it is eof, break;*/
000028  7820              LDRB     r0,[r4,#0]
;;;157    	{
;;;158    		self->current_token = finsh_token_type_eof;
00002a  2721              MOVS     r7,#0x21
00002c  2800              CMP      r0,#0                 ;156
00002e  d173              BNE      |L10.280|
;;;159    		return ;
;;;160    	}
;;;161    
;;;162    	if (self->string[0] != '\0') /*It is a key word or a identifier.*/
000030  7c20              LDRB     r0,[r4,#0x10]
000032  2800              CMP      r0,#0
000034  d012              BEQ      |L10.92|
;;;163    	{
;;;164    		if ( !token_match_name(self, (char*)self->string) )
000036  4637              MOV      r7,r6
000038  4e5c              LDR      r6,|L10.428|
00003a  2500              MOVS     r5,#0
                  |L10.60|
00003c  00e8              LSLS     r0,r5,#3
00003e  5830              LDR      r0,[r6,r0]
000040  4639              MOV      r1,r7
000042  f7fffffe          BL       strcmp
000046  2800              CMP      r0,#0
000048  d004              BEQ      |L10.84|
00004a  1c6d              ADDS     r5,r5,#1
00004c  2d08              CMP      r5,#8
00004e  d3f5              BCC      |L10.60|
;;;165    		{
;;;166    			self->current_token = finsh_token_type_identifier;
000050  201f              MOVS     r0,#0x1f
000052  e074              B        |L10.318|
                  |L10.84|
000054  00e8              LSLS     r0,r5,#3
000056  1980              ADDS     r0,r0,r6
000058  7900              LDRB     r0,[r0,#4]
00005a  e070              B        |L10.318|
                  |L10.92|
;;;167    		}
;;;168    	}
;;;169    	else/*It is a operator character.*/
;;;170    	{
;;;171    		ch = token_next_char(self);
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       token_next_char
000062  2520              MOVS     r5,#0x20
;;;172    
;;;173    		switch ( ch )
000064  282d              CMP      r0,#0x2d
000066  d040              BEQ      |L10.234|
000068  dc0b              BGT      |L10.130|
00006a  4601              MOV      r1,r0
00006c  3922              SUBS     r1,r1,#0x22
00006e  000b              MOVS     r3,r1
000070  f7fffffe          BL       __ARM_common_switch8
000074  0b8c1919          DCB      0x0b,0x8c,0x19,0x19
000078  692b7123          DCB      0x69,0x2b,0x71,0x23
00007c  252d2f27          DCB      0x25,0x2d,0x2f,0x27
000080  1900              DCB      0x19,0x00
                  |L10.130|
000082  283e              CMP      r0,#0x3e
000084  d051              BEQ      |L10.298|
000086  dc08              BGT      |L10.154|
000088  282f              CMP      r0,#0x2f
00008a  d03a              BEQ      |L10.258|
00008c  283b              CMP      r0,#0x3b
00008e  d01a              BEQ      |L10.198|
000090  283c              CMP      r0,#0x3c
000092  d043              BEQ      |L10.284|
000094  283d              CMP      r0,#0x3d
000096  d106              BNE      |L10.166|
000098  e05b              B        |L10.338|
                  |L10.154|
00009a  285e              CMP      r0,#0x5e
00009c  d057              BEQ      |L10.334|
00009e  287c              CMP      r0,#0x7c
0000a0  d04f              BEQ      |L10.322|
0000a2  287e              CMP      r0,#0x7e
0000a4  d051              BEQ      |L10.330|
                  |L10.166|
0000a6  3830              SUBS     r0,r0,#0x30
;;;174    		{
;;;175    		case '(':
;;;176    			self->current_token = finsh_token_type_left_paren;
;;;177    			break;
;;;178    
;;;179    		case ')':
;;;180    			self->current_token = finsh_token_type_right_paren;
;;;181    			break;
;;;182    
;;;183    		case ',':
;;;184    			self->current_token = finsh_token_type_comma;
;;;185    			break;
;;;186    
;;;187    		case ';':
;;;188    			self->current_token = finsh_token_type_semicolon;
;;;189    			break;
;;;190    
;;;191    		case '&':
;;;192    			self->current_token = finsh_token_type_and;
;;;193    			break;
;;;194    
;;;195    		case '*':
;;;196    			self->current_token = finsh_token_type_mul;
;;;197    			break;
;;;198    
;;;199    		case '+':
;;;200    			ch = token_next_char(self);
;;;201    
;;;202    			if ( ch == '+' )
;;;203    			{
;;;204    				self->current_token = finsh_token_type_inc;
;;;205    			}
;;;206    			else
;;;207    			{
;;;208    				token_prev_char(self);
;;;209    				self->current_token = finsh_token_type_add;
;;;210    			}
;;;211    			break;
;;;212    
;;;213    		case '-':
;;;214    			ch = token_next_char(self);
;;;215    
;;;216    			if ( ch == '-' )
;;;217    			{
;;;218    				self->current_token = finsh_token_type_dec;
;;;219    			}
;;;220    			else
;;;221    			{
;;;222    				token_prev_char(self);
;;;223    				self->current_token = finsh_token_type_sub;
;;;224    			}
;;;225    			break;
;;;226    
;;;227    		case '/':
;;;228    			ch = token_next_char(self);
;;;229    			if (ch == '/')
;;;230    			{
;;;231    				/* line comments, set to end of file */
;;;232    				self->current_token = finsh_token_type_eof;
;;;233    			}
;;;234    			else
;;;235    			{
;;;236    				token_prev_char(self);
;;;237    				self->current_token = finsh_token_type_div;
;;;238    			}
;;;239    			break;
;;;240    
;;;241    		case '<':
;;;242    			ch = token_next_char(self);
;;;243    
;;;244    			if ( ch == '<' )
;;;245    			{
;;;246    				self->current_token = finsh_token_type_shl;
;;;247    			}
;;;248    			else
;;;249    			{
;;;250    				token_prev_char(self);
;;;251    				self->current_token = finsh_token_type_bad;
;;;252    			}
;;;253    			break;
;;;254    
;;;255    		case '>':
;;;256    			ch = token_next_char(self);
;;;257    
;;;258    			if ( ch == '>' )
;;;259    			{
;;;260    				self->current_token = finsh_token_type_shr;
;;;261    			}
;;;262    			else
;;;263    			{
;;;264    				token_prev_char(self);
;;;265    				self->current_token = finsh_token_type_bad;
;;;266    			}
;;;267    			break;
;;;268    
;;;269    		case '|':
;;;270    			self->current_token = finsh_token_type_or;
;;;271    			break;
;;;272    
;;;273    		case '%':
;;;274    			self->current_token = finsh_token_type_mod;
;;;275    			break;
;;;276    
;;;277    		case '~':
;;;278    			self->current_token = finsh_token_type_bitwise;
;;;279    			break;
;;;280    
;;;281    		case '^':
;;;282    			self->current_token = finsh_token_type_xor;
;;;283    			break;
;;;284    
;;;285    		case '=':
;;;286    			self->current_token = finsh_token_type_assign;
;;;287    			break;
;;;288    
;;;289    		case '\'':
;;;290    			self->value.char_value = token_proc_char(self);
;;;291    			self->current_token = finsh_token_type_value_char;
;;;292    			break;
;;;293    
;;;294    		case '"':
;;;295    			token_proc_string(self);
;;;296    			self->current_token = finsh_token_type_value_string;
;;;297    			break;
;;;298    
;;;299    		default:
;;;300    			if ( is_digit(ch) )
0000a8  2809              CMP      r0,#9
0000aa  d879              BHI      |L10.416|
;;;301    			{
;;;302    				token_prev_char(self);
0000ac  4620              MOV      r0,r4
0000ae  f7fffffe          BL       token_prev_char
;;;303    				token_proc_number(self);
0000b2  4620              MOV      r0,r4
0000b4  f7fffffe          BL       token_proc_number
;;;304    				break;
;;;305    			}
;;;306    
;;;307    			finsh_error_set(FINSH_ERROR_UNKNOWN_TOKEN);
;;;308    			self->current_token = finsh_token_type_bad;
;;;309    
;;;310    			break;
;;;311    		}
;;;312    	}
;;;313    }
0000b8  bdf8              POP      {r3-r7,pc}
0000ba  2001              MOVS     r0,#1                 ;176
0000bc  e03f              B        |L10.318|
0000be  2002              MOVS     r0,#2                 ;180
0000c0  e03d              B        |L10.318|
0000c2  2003              MOVS     r0,#3                 ;184
0000c4  e03b              B        |L10.318|
                  |L10.198|
0000c6  2004              MOVS     r0,#4                 ;188
0000c8  e039              B        |L10.318|
0000ca  200d              MOVS     r0,#0xd               ;192
0000cc  e037              B        |L10.318|
0000ce  2005              MOVS     r0,#5                 ;196
0000d0  e035              B        |L10.318|
0000d2  4620              MOV      r0,r4                 ;200
0000d4  f7fffffe          BL       token_next_char
0000d8  282b              CMP      r0,#0x2b              ;202
0000da  d004              BEQ      |L10.230|
0000dc  4620              MOV      r0,r4                 ;208
0000de  f7fffffe          BL       token_prev_char
0000e2  2006              MOVS     r0,#6                 ;209
0000e4  e02b              B        |L10.318|
                  |L10.230|
0000e6  2007              MOVS     r0,#7                 ;204
0000e8  e029              B        |L10.318|
                  |L10.234|
0000ea  4620              MOV      r0,r4                 ;214
0000ec  f7fffffe          BL       token_next_char
0000f0  282d              CMP      r0,#0x2d              ;216
0000f2  d004              BEQ      |L10.254|
0000f4  4620              MOV      r0,r4                 ;222
0000f6  f7fffffe          BL       token_prev_char
0000fa  2008              MOVS     r0,#8                 ;223
0000fc  e01f              B        |L10.318|
                  |L10.254|
0000fe  2009              MOVS     r0,#9                 ;218
000100  e01d              B        |L10.318|
                  |L10.258|
000102  4620              MOV      r0,r4                 ;228
000104  f7fffffe          BL       token_next_char
000108  282f              CMP      r0,#0x2f              ;229
00010a  d005              BEQ      |L10.280|
00010c  4620              MOV      r0,r4                 ;236
00010e  f7fffffe          BL       token_prev_char
000112  200a              MOVS     r0,#0xa               ;237
000114  e013              B        |L10.318|
000116  e7ff              B        |L10.280|
                  |L10.280|
000118  7227              STRB     r7,[r4,#8]            ;232
00011a  bdf8              POP      {r3-r7,pc}
                  |L10.284|
00011c  4620              MOV      r0,r4                 ;242
00011e  f7fffffe          BL       token_next_char
000122  283c              CMP      r0,#0x3c              ;244
000124  d106              BNE      |L10.308|
000126  2011              MOVS     r0,#0x11              ;246
000128  e009              B        |L10.318|
                  |L10.298|
00012a  4620              MOV      r0,r4                 ;256
00012c  f7fffffe          BL       token_next_char
000130  283e              CMP      r0,#0x3e              ;258
000132  d003              BEQ      |L10.316|
                  |L10.308|
000134  4620              MOV      r0,r4                 ;264
000136  f7fffffe          BL       token_prev_char
00013a  e034              B        |L10.422|
                  |L10.316|
00013c  2012              MOVS     r0,#0x12              ;260
                  |L10.318|
00013e  7220              STRB     r0,[r4,#8]            ;166
000140  bdf8              POP      {r3-r7,pc}
                  |L10.322|
000142  200e              MOVS     r0,#0xe               ;270
000144  e7fb              B        |L10.318|
000146  200b              MOVS     r0,#0xb               ;274
000148  e7f9              B        |L10.318|
                  |L10.330|
00014a  2010              MOVS     r0,#0x10              ;278
00014c  e7f7              B        |L10.318|
                  |L10.334|
00014e  200f              MOVS     r0,#0xf               ;282
000150  e7f5              B        |L10.318|
                  |L10.338|
000152  200c              MOVS     r0,#0xc               ;286
000154  e7f3              B        |L10.318|
000156  4620              MOV      r0,r4                 ;290
000158  f7fffffe          BL       token_proc_char
00015c  7320              STRB     r0,[r4,#0xc]          ;290
00015e  201a              MOVS     r0,#0x1a              ;291
000160  e7ed              B        |L10.318|
                  |L10.354|
000162  4620              MOV      r0,r4                 ;292
000164  f7fffffe          BL       token_next_char
000168  7821              LDRB     r1,[r4,#0]            ;292
00016a  2900              CMP      r1,#0                 ;292
00016c  d003              BEQ      |L10.374|
00016e  200a              MOVS     r0,#0xa               ;292
000170  f7fffffe          BL       finsh_error_set
000174  e00e              B        |L10.404|
                  |L10.374|
000176  285c              CMP      r0,#0x5c              ;292
000178  d002              BEQ      |L10.384|
00017a  2822              CMP      r0,#0x22              ;292
00017c  d00d              BEQ      |L10.410|
00017e  e003              B        |L10.392|
                  |L10.384|
000180  4620              MOV      r0,r4                 ;292
000182  f7fffffe          BL       token_proc_escape
000186  b2c0              UXTB     r0,r0                 ;292
                  |L10.392|
000188  7030              STRB     r0,[r6,#0]            ;292
00018a  1c76              ADDS     r6,r6,#1              ;292
00018c  1b30              SUBS     r0,r6,r4              ;292
00018e  3810              SUBS     r0,r0,#0x10           ;292
000190  2880              CMP      r0,#0x80              ;292
000192  dbe6              BLT      |L10.354|
                  |L10.404|
000194  201d              MOVS     r0,#0x1d              ;296
000196  e7d2              B        |L10.318|
000198  e002              B        |L10.416|
                  |L10.410|
00019a  2000              MOVS     r0,#0                 ;297
00019c  7030              STRB     r0,[r6,#0]            ;297
00019e  e7f9              B        |L10.404|
                  |L10.416|
0001a0  200b              MOVS     r0,#0xb               ;307
0001a2  f7fffffe          BL       finsh_error_set
                  |L10.422|
0001a6  7225              STRB     r5,[r4,#8]            ;265
0001a8  bdf8              POP      {r3-r7,pc}
;;;314    
                          ENDP

0001aa  0000              DCW      0x0000
                  |L10.428|
                          DCD      ||.constdata||

                          AREA ||i.token_spec_number||, CODE, READONLY, ALIGN=1

                  token_spec_number PROC
;;;567    
;;;568    static long token_spec_number(char* string, int length, int b)
000000  b5fc              PUSH     {r2-r7,lr}
;;;569    {
;;;570    	char* p;
;;;571    	int t;
;;;572    	int i, j, shift=1;
000002  2501              MOVS     r5,#1
;;;573    	unsigned int bn[BN_SIZE], v;
;;;574    	long d;
;;;575    
;;;576    	p = string;
;;;577    	i = 0;
000004  2600              MOVS     r6,#0
000006  468e              MOV      lr,r1                 ;569
;;;578    
;;;579    	switch ( b )
000008  2a02              CMP      r2,#2
00000a  d006              BEQ      |L11.26|
00000c  2a08              CMP      r2,#8
00000e  d003              BEQ      |L11.24|
000010  2a10              CMP      r2,#0x10
000012  d102              BNE      |L11.26|
;;;580    	{
;;;581    	case 16: shift = 4;
000014  2504              MOVS     r5,#4
;;;582    		break;
000016  e000              B        |L11.26|
                  |L11.24|
;;;583    	case 8:  shift = 3;
000018  2503              MOVS     r5,#3
                  |L11.26|
;;;584    		break;
;;;585    	case 2:  shift = 1;
;;;586    		break;
;;;587    	default: break;
;;;588    	}
;;;589    
;;;590    	for ( j=0; j<BN_SIZE ; j++) bn[j] = 0;
00001a  2100              MOVS     r1,#0
00001c  460a              MOV      r2,r1
                  |L11.30|
00001e  008c              LSLS     r4,r1,#2
000020  466b              MOV      r3,sp
000022  1c49              ADDS     r1,r1,#1
000024  511a              STR      r2,[r3,r4]
000026  2902              CMP      r1,#2
000028  dbf9              BLT      |L11.30|
00002a  e021              B        |L11.112|
                  |L11.44|
;;;591    
;;;592    	while ( i<length )
;;;593    	{
;;;594    		t = *p++;
00002c  7803              LDRB     r3,[r0,#0]
;;;595    		if ( t>='a' && t <='f' )
00002e  1c40              ADDS     r0,r0,#1
000030  4619              MOV      r1,r3
000032  3961              SUBS     r1,r1,#0x61
000034  2905              CMP      r1,#5
000036  d801              BHI      |L11.60|
000038  3b57              SUBS     r3,r3,#0x57
;;;596    		{
;;;597    			t = t - 'a' +10;
00003a  e006              B        |L11.74|
                  |L11.60|
;;;598    		}
;;;599    		else if ( t >='A' && t <='F' )
00003c  4619              MOV      r1,r3
00003e  3941              SUBS     r1,r1,#0x41
000040  2905              CMP      r1,#5
000042  d801              BHI      |L11.72|
000044  3b37              SUBS     r3,r3,#0x37
;;;600    		{
;;;601    			t = t - 'A' +10;
000046  e000              B        |L11.74|
                  |L11.72|
000048  3b30              SUBS     r3,r3,#0x30
                  |L11.74|
;;;602    		}
;;;603    		else t = t - '0';
;;;604    
;;;605    		for ( j=0; j<BN_SIZE ; j++)
00004a  2200              MOVS     r2,#0
;;;606    		{
;;;607    			v = bn[j];
;;;608    			bn[j] = (v<<shift) | t;
;;;609    			t = v >> (32 - shift);
00004c  2120              MOVS     r1,#0x20
00004e  1b49              SUBS     r1,r1,r5
000050  468c              MOV      r12,r1
                  |L11.82|
000052  0097              LSLS     r7,r2,#2              ;607
000054  466c              MOV      r4,sp                 ;607
000056  59e4              LDR      r4,[r4,r7]            ;607
000058  4621              MOV      r1,r4                 ;607
00005a  40a9              LSLS     r1,r1,r5              ;608
00005c  430b              ORRS     r3,r3,r1              ;608
00005e  4669              MOV      r1,sp                 ;608
000060  51cb              STR      r3,[r1,r7]            ;608
000062  4661              MOV      r1,r12                ;608
000064  4623              MOV      r3,r4                 ;608
000066  40cb              LSRS     r3,r3,r1
000068  1c52              ADDS     r2,r2,#1
00006a  2a02              CMP      r2,#2                 ;605
00006c  dbf1              BLT      |L11.82|
00006e  1c76              ADDS     r6,r6,#1              ;605
                  |L11.112|
000070  4576              CMP      r6,lr                 ;592
000072  dbdb              BLT      |L11.44|
;;;610    		}
;;;611    		i++;
;;;612    	}
;;;613    
;;;614    	d = (long)bn[0];
000074  9800              LDR      r0,[sp,#0]
;;;615    
;;;616    	return d;
;;;617    }
000076  bdfc              POP      {r2-r7,pc}
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  finsh_name_table
                          DCD      ||.conststring||
000004  14000000          DCB      0x14,0x00,0x00,0x00
                          DCD      ||.conststring||+0x8
00000c  15000000          DCB      0x15,0x00,0x00,0x00
                          DCD      ||.conststring||+0x10
000014  16000000          DCB      0x16,0x00,0x00,0x00
                          DCD      ||.conststring||+0x18
00001c  17000000          DCB      0x17,0x00,0x00,0x00
                          DCD      ||.conststring||+0x1c
000024  18000000          DCB      0x18,0x00,0x00,0x00
                          DCD      ||.conststring||+0x24
00002c  19000000          DCB      0x19,0x00,0x00,0x00
                          DCD      ||.conststring||+0x30
000034  1e000000          DCB      0x1e,0x00,0x00,0x00
                          DCD      ||.conststring||+0x38
00003c  1e000000          DCB      0x1e,0x00,0x00,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  766f6964          DCB      "void",0
000004  00      
000005  00                DCB      0
000006  00                DCB      0
000007  00                DCB      0
000008  63686172          DCB      "char",0
00000c  00      
00000d  00                DCB      0
00000e  00                DCB      0
00000f  00                DCB      0
000010  73686f72          DCB      "short",0
000014  7400    
000016  00                DCB      0
000017  00                DCB      0
000018  696e7400          DCB      "int",0
00001c  6c6f6e67          DCB      "long",0
000020  00      
000021  00                DCB      0
000022  00                DCB      0
000023  00                DCB      0
000024  756e7369          DCB      "unsigned",0
000028  676e6564
00002c  00      
00002d  00                DCB      0
00002e  00                DCB      0
00002f  00                DCB      0
000030  4e554c4c          DCB      "NULL",0
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0
000038  6e756c6c          DCB      "null",0
00003c  00      

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L69.16|
00000e  461d              MOV      r5,r3
                  |L69.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

