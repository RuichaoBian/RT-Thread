; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\serial.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\serial.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 -DRT_DEBUG --omf_browse=.\objects\serial.crf ..\..\components\drivers\serial\serial.c]
                          THUMB

                          AREA ||i._serial_dma_rx||, CODE, READONLY, ALIGN=2

                  _serial_dma_rx PROC
;;;257     */
;;;258    rt_inline int _serial_dma_rx(struct rt_serial_device *serial, rt_uint8_t *data, int length)
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;259    {
000002  b082              SUB      sp,sp,#8
000004  4616              MOV      r6,r2
000006  0004              MOVS     r4,r0
000008  d002              BEQ      |L1.16|
;;;260        rt_base_t level;
;;;261    
;;;262        RT_ASSERT((serial != RT_NULL) && (data != RT_NULL));
00000a  9803              LDR      r0,[sp,#0xc]
00000c  2800              CMP      r0,#0
00000e  d105              BNE      |L1.28|
                  |L1.16|
000010  22ff              MOVS     r2,#0xff
000012  3207              ADDS     r2,#7
000014  4938              LDR      r1,|L1.248|
000016  a039              ADR      r0,|L1.252|
000018  f7fffffe          BL       rt_assert_handler
                  |L1.28|
;;;263    
;;;264        level = rt_hw_interrupt_disable();
00001c  f7fffffe          BL       rt_hw_interrupt_disable
;;;265    
;;;266        if (serial->config.bufsz == 0)
000020  9000              STR      r0,[sp,#0]
000022  6ca0              LDR      r0,[r4,#0x48]
000024  0180              LSLS     r0,r0,#6
000026  0c00              LSRS     r0,r0,#16
000028  d007              BEQ      |L1.58|
;;;267        {
;;;268            int result = RT_EOK;
;;;269            struct rt_serial_rx_dma *rx_dma;
;;;270    
;;;271            rx_dma = (struct rt_serial_rx_dma*)serial->serial_rx;
;;;272            RT_ASSERT(rx_dma != RT_NULL);
;;;273    
;;;274            if (rx_dma->activated != RT_TRUE)
;;;275            {
;;;276                rx_dma->activated = RT_TRUE;
;;;277                RT_ASSERT(serial->ops->dma_transmit != RT_NULL);
;;;278                serial->ops->dma_transmit(serial, data, length, RT_SERIAL_DMA_RX);
;;;279            }
;;;280            else result = -RT_EBUSY;
;;;281            rt_hw_interrupt_enable(level);
;;;282    
;;;283            if (result == RT_EOK) return length;
;;;284    
;;;285            rt_set_errno(result);
;;;286            return 0;
;;;287        }
;;;288        else
;;;289        {
;;;290            struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
;;;291            rt_size_t recv_len = 0, fifo_recved_len = rt_dma_calc_recved_len(serial);
00002a  4620              MOV      r0,r4
00002c  6ce5              LDR      r5,[r4,#0x4c]
00002e  f7fffffe          BL       rt_dma_calc_recved_len
000032  4607              MOV      r7,r0
;;;292    
;;;293            RT_ASSERT(rx_fifo != RT_NULL);
000034  2d00              CMP      r5,#0
000036  d030              BEQ      |L1.154|
000038  e035              B        |L1.166|
                  |L1.58|
00003a  6ce5              LDR      r5,[r4,#0x4c]         ;272
00003c  2700              MOVS     r7,#0                 ;268
00003e  2d00              CMP      r5,#0                 ;272
000040  d105              BNE      |L1.78|
000042  22ff              MOVS     r2,#0xff              ;272
000044  3211              ADDS     r2,r2,#0x11           ;272
000046  492c              LDR      r1,|L1.248|
000048  a037              ADR      r0,|L1.296|
00004a  f7fffffe          BL       rt_assert_handler
                  |L1.78|
00004e  6828              LDR      r0,[r5,#0]            ;274
000050  2801              CMP      r0,#1                 ;274
000052  d013              BEQ      |L1.124|
000054  2001              MOVS     r0,#1                 ;276
000056  6028              STR      r0,[r5,#0]            ;277
000058  6c20              LDR      r0,[r4,#0x40]         ;277
00005a  6900              LDR      r0,[r0,#0x10]         ;277
00005c  2800              CMP      r0,#0                 ;277
00005e  d105              BNE      |L1.108|
000060  22ff              MOVS     r2,#0xff              ;277
000062  3216              ADDS     r2,r2,#0x16           ;277
000064  4924              LDR      r1,|L1.248|
000066  a035              ADR      r0,|L1.316|
000068  f7fffffe          BL       rt_assert_handler
                  |L1.108|
00006c  6c20              LDR      r0,[r4,#0x40]         ;278
00006e  2301              MOVS     r3,#1                 ;278
000070  6905              LDR      r5,[r0,#0x10]         ;278
000072  4632              MOV      r2,r6                 ;278
000074  4620              MOV      r0,r4                 ;278
000076  9903              LDR      r1,[sp,#0xc]          ;278
000078  47a8              BLX      r5                    ;278
00007a  e001              B        |L1.128|
                  |L1.124|
00007c  2706              MOVS     r7,#6                 ;280
00007e  43ff              MVNS     r7,r7                 ;280
                  |L1.128|
000080  9800              LDR      r0,[sp,#0]            ;281
000082  f7fffffe          BL       rt_hw_interrupt_enable
000086  2f00              CMP      r7,#0                 ;283
000088  d005              BEQ      |L1.150|
00008a  4638              MOV      r0,r7                 ;285
00008c  f7fffffe          BL       rt_set_errno
000090  2000              MOVS     r0,#0                 ;286
                  |L1.146|
;;;294    
;;;295            if (length < fifo_recved_len)
;;;296                recv_len = length;
;;;297            else
;;;298                recv_len = fifo_recved_len;
;;;299    
;;;300            if (rx_fifo->get_index + recv_len < serial->config.bufsz)
;;;301                rt_memcpy(data, rx_fifo->buffer + rx_fifo->get_index, recv_len);
;;;302            else
;;;303            {
;;;304                rt_memcpy(data, rx_fifo->buffer + rx_fifo->get_index,
;;;305                        serial->config.bufsz - rx_fifo->get_index);
;;;306                rt_memcpy(data + serial->config.bufsz - rx_fifo->get_index, rx_fifo->buffer,
;;;307                        recv_len + rx_fifo->get_index - serial->config.bufsz);
;;;308            }
;;;309            rt_dma_recv_update_get_index(serial, recv_len);
;;;310            rt_hw_interrupt_enable(level);
;;;311            return recv_len;
;;;312        }
;;;313    }
000092  b005              ADD      sp,sp,#0x14
000094  bdf0              POP      {r4-r7,pc}
                  |L1.150|
000096  4630              MOV      r0,r6                 ;283
000098  e7fb              B        |L1.146|
                  |L1.154|
00009a  22ff              MOVS     r2,#0xff              ;293
00009c  3226              ADDS     r2,r2,#0x26           ;293
00009e  4916              LDR      r1,|L1.248|
0000a0  a030              ADR      r0,|L1.356|
0000a2  f7fffffe          BL       rt_assert_handler
                  |L1.166|
0000a6  42be              CMP      r6,r7                 ;295
0000a8  d300              BCC      |L1.172|
0000aa  463e              MOV      r6,r7                 ;298
                  |L1.172|
0000ac  6ca1              LDR      r1,[r4,#0x48]         ;300
0000ae  88e8              LDRH     r0,[r5,#6]            ;300
0000b0  0189              LSLS     r1,r1,#6              ;300
0000b2  1982              ADDS     r2,r0,r6              ;300
0000b4  0c09              LSRS     r1,r1,#16             ;300
0000b6  428a              CMP      r2,r1                 ;300
0000b8  d204              BCS      |L1.196|
0000ba  6829              LDR      r1,[r5,#0]            ;301
0000bc  4632              MOV      r2,r6                 ;301
0000be  1809              ADDS     r1,r1,r0              ;301
0000c0  9803              LDR      r0,[sp,#0xc]          ;301
0000c2  e00f              B        |L1.228|
                  |L1.196|
0000c4  1a0a              SUBS     r2,r1,r0              ;304
0000c6  6829              LDR      r1,[r5,#0]            ;304
0000c8  1809              ADDS     r1,r1,r0              ;304
0000ca  9803              LDR      r0,[sp,#0xc]          ;304
0000cc  f7fffffe          BL       rt_memcpy
0000d0  6ca0              LDR      r0,[r4,#0x48]         ;306
0000d2  88e9              LDRH     r1,[r5,#6]            ;306
0000d4  0180              LSLS     r0,r0,#6              ;306
0000d6  198a              ADDS     r2,r1,r6              ;306
0000d8  0c00              LSRS     r0,r0,#16             ;306
0000da  9b03              LDR      r3,[sp,#0xc]          ;306
0000dc  1a12              SUBS     r2,r2,r0              ;306
0000de  18c0              ADDS     r0,r0,r3              ;306
0000e0  1a40              SUBS     r0,r0,r1              ;306
0000e2  6829              LDR      r1,[r5,#0]            ;306
                  |L1.228|
0000e4  f7fffffe          BL       rt_memcpy
0000e8  4631              MOV      r1,r6                 ;309
0000ea  4620              MOV      r0,r4                 ;309
0000ec  f7fffffe          BL       rt_dma_recv_update_get_index
0000f0  9800              LDR      r0,[sp,#0]            ;310
0000f2  f7fffffe          BL       rt_hw_interrupt_enable
0000f6  e7ce              B        |L1.150|
;;;314    
                          ENDP

                  |L1.248|
                          DCD      ||.constdata||+0x8f
                  |L1.252|
0000fc  28736572          DCB      "(serial != RT_NULL) && (data != RT_NULL)",0
000100  69616c20
000104  213d2052
000108  545f4e55
00010c  4c4c2920
000110  26262028
000114  64617461
000118  20213d20
00011c  52545f4e
000120  554c4c29
000124  00      
000125  00                DCB      0
000126  00                DCB      0
000127  00                DCB      0
                  |L1.296|
000128  72785f64          DCB      "rx_dma != RT_NULL",0
00012c  6d612021
000130  3d205254
000134  5f4e554c
000138  4c00    
00013a  00                DCB      0
00013b  00                DCB      0
                  |L1.316|
00013c  73657269          DCB      "serial->ops->dma_transmit != RT_NULL",0
000140  616c2d3e
000144  6f70732d
000148  3e646d61
00014c  5f747261
000150  6e736d69
000154  7420213d
000158  2052545f
00015c  4e554c4c
000160  00      
000161  00                DCB      0
000162  00                DCB      0
000163  00                DCB      0
                  |L1.356|
000164  72785f66          DCB      "rx_fifo != RT_NULL",0
000168  69666f20
00016c  213d2052
000170  545f4e55
000174  4c4c00  
000177  00                DCB      0

                          AREA ||i._serial_int_rx||, CODE, READONLY, ALIGN=2

                  _serial_int_rx PROC
;;;94      */
;;;95     rt_inline int _serial_int_rx(struct rt_serial_device *serial, rt_uint8_t *data, int length)
000000  b5fe              PUSH     {r1-r7,lr}
;;;96     {
000002  4615              MOV      r5,r2
000004  460e              MOV      r6,r1
000006  0007              MOVS     r7,r0
000008  d104              BNE      |L2.20|
;;;97         int size;
;;;98         struct rt_serial_rx_fifo* rx_fifo;
;;;99     
;;;100        RT_ASSERT(serial != RT_NULL);
00000a  2264              MOVS     r2,#0x64
00000c  4918              LDR      r1,|L2.112|
00000e  4819              LDR      r0,|L2.116|
000010  f7fffffe          BL       rt_assert_handler
                  |L2.20|
;;;101        size = length;
;;;102    
;;;103        rx_fifo = (struct rt_serial_rx_fifo*) serial->serial_rx;
000014  9501              STR      r5,[sp,#4]
;;;104        RT_ASSERT(rx_fifo != RT_NULL);
000016  6cfc              LDR      r4,[r7,#0x4c]
000018  2c00              CMP      r4,#0
00001a  d120              BNE      |L2.94|
00001c  2268              MOVS     r2,#0x68
00001e  4914              LDR      r1,|L2.112|
000020  a015              ADR      r0,|L2.120|
000022  f7fffffe          BL       rt_assert_handler
000026  e01a              B        |L2.94|
                  |L2.40|
;;;105    
;;;106        /* read from software FIFO */
;;;107        while (length)
;;;108        {
;;;109            int ch;
;;;110            rt_base_t level;
;;;111    
;;;112            /* disable interrupt */
;;;113            level = rt_hw_interrupt_disable();
000028  f7fffffe          BL       rt_hw_interrupt_disable
00002c  4601              MOV      r1,r0
;;;114            if (rx_fifo->get_index != rx_fifo->put_index)
00002e  88e0              LDRH     r0,[r4,#6]
000030  88a2              LDRH     r2,[r4,#4]
000032  4290              CMP      r0,r2
000034  d018              BEQ      |L2.104|
;;;115            {
;;;116                ch = rx_fifo->buffer[rx_fifo->get_index];
000036  6822              LDR      r2,[r4,#0]
000038  5c12              LDRB     r2,[r2,r0]
00003a  1c40              ADDS     r0,r0,#1
;;;117                rx_fifo->get_index += 1;
00003c  b280              UXTH     r0,r0
00003e  9200              STR      r2,[sp,#0]
000040  80e0              STRH     r0,[r4,#6]
;;;118                if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
000042  6cba              LDR      r2,[r7,#0x48]
000044  0192              LSLS     r2,r2,#6
000046  0c12              LSRS     r2,r2,#16
000048  4290              CMP      r0,r2
00004a  d301              BCC      |L2.80|
00004c  2000              MOVS     r0,#0
00004e  80e0              STRH     r0,[r4,#6]
                  |L2.80|
;;;119            }
;;;120            else
;;;121            {
;;;122                /* no data, enable interrupt and break out */
;;;123                rt_hw_interrupt_enable(level);
;;;124                break;
;;;125            }
;;;126    
;;;127            /* enable interrupt */
;;;128            rt_hw_interrupt_enable(level);
000050  4608              MOV      r0,r1
000052  f7fffffe          BL       rt_hw_interrupt_enable
;;;129    
;;;130            *data = ch & 0xff;
000056  9800              LDR      r0,[sp,#0]
000058  7030              STRB     r0,[r6,#0]
00005a  1e6d              SUBS     r5,r5,#1
00005c  1c76              ADDS     r6,r6,#1
                  |L2.94|
00005e  2d00              CMP      r5,#0                 ;107
000060  d1e2              BNE      |L2.40|
                  |L2.98|
;;;131            data ++; length --;
;;;132        }
;;;133    
;;;134        return size - length;
000062  9801              LDR      r0,[sp,#4]
000064  1b40              SUBS     r0,r0,r5
;;;135    }
000066  bdfe              POP      {r1-r7,pc}
                  |L2.104|
000068  4608              MOV      r0,r1                 ;123
00006a  f7fffffe          BL       rt_hw_interrupt_enable
00006e  e7f8              B        |L2.98|
;;;136    
                          ENDP

                  |L2.112|
                          DCD      ||.constdata||+0x20
                  |L2.116|
                          DCD      ||i.rt_serial_read||+0x84
                  |L2.120|
000078  72785f66          DCB      "rx_fifo != RT_NULL",0
00007c  69666f20
000080  213d2052
000084  545f4e55
000088  4c4c00  
00008b  00                DCB      0

                          AREA ||i.rt_dma_calc_recved_len||, CODE, READONLY, ALIGN=2

                  rt_dma_calc_recved_len PROC
;;;168     */
;;;169    static rt_size_t rt_dma_calc_recved_len(struct rt_serial_device *serial)
000000  b570              PUSH     {r4-r6,lr}
;;;170    {
;;;171        struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
;;;172    
;;;173        RT_ASSERT(rx_fifo != RT_NULL);
000002  6cc4              LDR      r4,[r0,#0x4c]
000004  4605              MOV      r5,r0                 ;170
000006  2c00              CMP      r4,#0
000008  d104              BNE      |L3.20|
00000a  22ad              MOVS     r2,#0xad
00000c  490c              LDR      r1,|L3.64|
00000e  a00d              ADR      r0,|L3.68|
000010  f7fffffe          BL       rt_assert_handler
                  |L3.20|
;;;174    
;;;175        if (rx_fifo->put_index > rx_fifo->get_index)
000014  88a2              LDRH     r2,[r4,#4]
000016  88e1              LDRH     r1,[r4,#6]
000018  428a              CMP      r2,r1
00001a  d901              BLS      |L3.32|
;;;176            return rx_fifo->put_index - rx_fifo->get_index;
00001c  1a50              SUBS     r0,r2,r1
;;;177        else if (rx_fifo->put_index < rx_fifo->get_index)
;;;178            return serial->config.bufsz - (rx_fifo->get_index - rx_fifo->put_index);
;;;179        else
;;;180        {
;;;181            if (rx_fifo->is_full)
;;;182                return serial->config.bufsz;
;;;183            else
;;;184                return 0;
;;;185        }
;;;186    }
00001e  bd70              POP      {r4-r6,pc}
                  |L3.32|
000020  428a              CMP      r2,r1                 ;177
000022  d205              BCS      |L3.48|
000024  1a88              SUBS     r0,r1,r2              ;178
000026  6ca9              LDR      r1,[r5,#0x48]         ;178
000028  0189              LSLS     r1,r1,#6              ;178
00002a  0c09              LSRS     r1,r1,#16             ;178
00002c  1a08              SUBS     r0,r1,r0              ;178
                  |L3.46|
00002e  bd70              POP      {r4-r6,pc}
                  |L3.48|
000030  68a0              LDR      r0,[r4,#8]            ;181
000032  2800              CMP      r0,#0                 ;181
000034  d0fb              BEQ      |L3.46|
000036  6ca8              LDR      r0,[r5,#0x48]         ;182
000038  0180              LSLS     r0,r0,#6              ;182
00003a  0c00              LSRS     r0,r0,#16             ;182
00003c  bd70              POP      {r4-r6,pc}
;;;187    
                          ENDP

00003e  0000              DCW      0x0000
                  |L3.64|
                          DCD      ||.constdata||+0x3e
                  |L3.68|
000044  72785f66          DCB      "rx_fifo != RT_NULL",0
000048  69666f20
00004c  213d2052
000050  545f4e55
000054  4c4c00  
000057  00                DCB      0

                          AREA ||i.rt_dma_recv_update_get_index||, CODE, READONLY, ALIGN=2

                  rt_dma_recv_update_get_index PROC
;;;193     */
;;;194    static void rt_dma_recv_update_get_index(struct rt_serial_device *serial, rt_size_t len)
000000  b570              PUSH     {r4-r6,lr}
;;;195    {
;;;196        struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *) serial->serial_rx;
;;;197    
;;;198        RT_ASSERT(rx_fifo != RT_NULL);
000002  6cc4              LDR      r4,[r0,#0x4c]
000004  460d              MOV      r5,r1                 ;195
000006  4606              MOV      r6,r0                 ;195
000008  2c00              CMP      r4,#0
00000a  d104              BNE      |L4.22|
00000c  22c6              MOVS     r2,#0xc6
00000e  4911              LDR      r1,|L4.84|
000010  4811              LDR      r0,|L4.88|
000012  f7fffffe          BL       rt_assert_handler
                  |L4.22|
;;;199        RT_ASSERT(len <= rt_dma_calc_recved_len(serial));
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       rt_dma_calc_recved_len
00001c  42a8              CMP      r0,r5
00001e  d204              BCS      |L4.42|
000020  22c7              MOVS     r2,#0xc7
000022  490c              LDR      r1,|L4.84|
000024  a00d              ADR      r0,|L4.92|
000026  f7fffffe          BL       rt_assert_handler
                  |L4.42|
;;;200    
;;;201        if (rx_fifo->is_full && len != 0) rx_fifo->is_full = RT_FALSE;
00002a  68a0              LDR      r0,[r4,#8]
00002c  2800              CMP      r0,#0
00002e  d003              BEQ      |L4.56|
000030  2d00              CMP      r5,#0
000032  d001              BEQ      |L4.56|
000034  2000              MOVS     r0,#0
000036  60a0              STR      r0,[r4,#8]
                  |L4.56|
;;;202    
;;;203        rx_fifo->get_index += len;
000038  88e0              LDRH     r0,[r4,#6]
00003a  1940              ADDS     r0,r0,r5
00003c  b280              UXTH     r0,r0
00003e  80e0              STRH     r0,[r4,#6]
;;;204        if (rx_fifo->get_index > serial->config.bufsz)
000040  6cb1              LDR      r1,[r6,#0x48]
000042  0189              LSLS     r1,r1,#6
000044  0c09              LSRS     r1,r1,#16
000046  4288              CMP      r0,r1
000048  d902              BLS      |L4.80|
;;;205        {
;;;206            rx_fifo->get_index %= serial->config.bufsz;
00004a  f7fffffe          BL       __aeabi_uidivmod
00004e  80e1              STRH     r1,[r4,#6]
                  |L4.80|
;;;207        }
;;;208    }
000050  bd70              POP      {r4-r6,pc}
;;;209    
                          ENDP

000052  0000              DCW      0x0000
                  |L4.84|
                          DCD      ||.constdata||+0x55
                  |L4.88|
                          DCD      ||i._serial_int_rx||+0x78
                  |L4.92|
00005c  6c656e20          DCB      "len <= rt_dma_calc_recved_len(serial)",0
000060  3c3d2072
000064  745f646d
000068  615f6361
00006c  6c635f72
000070  65637665
000074  645f6c65
000078  6e287365
00007c  7269616c
000080  2900    
000082  00                DCB      0
000083  00                DCB      0

                          AREA ||i.rt_dma_recv_update_put_index||, CODE, READONLY, ALIGN=2

                  rt_dma_recv_update_put_index PROC
;;;215     */
;;;216    static void rt_dma_recv_update_put_index(struct rt_serial_device *serial, rt_size_t len)
000000  b5f8              PUSH     {r3-r7,lr}
;;;217    {
;;;218        struct rt_serial_rx_fifo *rx_fifo = (struct rt_serial_rx_fifo *)serial->serial_rx;
;;;219    
;;;220        RT_ASSERT(rx_fifo != RT_NULL);
000002  6cc4              LDR      r4,[r0,#0x4c]
000004  460f              MOV      r7,r1                 ;217
000006  4605              MOV      r5,r0                 ;217
000008  2c00              CMP      r4,#0
00000a  d104              BNE      |L5.22|
00000c  22dc              MOVS     r2,#0xdc
00000e  4918              LDR      r1,|L5.112|
000010  4818              LDR      r0,|L5.116|
000012  f7fffffe          BL       rt_assert_handler
                  |L5.22|
;;;221    
;;;222        if (rx_fifo->get_index <= rx_fifo->put_index)
000016  88e6              LDRH     r6,[r4,#6]
000018  88a0              LDRH     r0,[r4,#4]
00001a  4286              CMP      r6,r0
00001c  d80e              BHI      |L5.60|
;;;223        {
;;;224            rx_fifo->put_index += len;
00001e  19c0              ADDS     r0,r0,r7
000020  b280              UXTH     r0,r0
000022  80a0              STRH     r0,[r4,#4]
;;;225            /* beyond the fifo end */
;;;226            if (rx_fifo->put_index >= serial->config.bufsz)
000024  6ca9              LDR      r1,[r5,#0x48]
000026  0189              LSLS     r1,r1,#6
000028  0c09              LSRS     r1,r1,#16
00002a  4288              CMP      r0,r1
00002c  d317              BCC      |L5.94|
;;;227            {
;;;228                rx_fifo->put_index %= serial->config.bufsz;
00002e  f7fffffe          BL       __aeabi_uidivmod
000032  80a1              STRH     r1,[r4,#4]
;;;229                /* force overwrite get index */
;;;230                if (rx_fifo->put_index >= rx_fifo->get_index)
000034  42b1              CMP      r1,r6
000036  d312              BCC      |L5.94|
;;;231                {
;;;232                    rx_fifo->get_index = rx_fifo->put_index;
000038  80e1              STRH     r1,[r4,#6]
;;;233                    rx_fifo->is_full = RT_TRUE;
00003a  e00e              B        |L5.90|
                  |L5.60|
;;;234                }
;;;235            }
;;;236        }
;;;237        else
;;;238        {
;;;239            rx_fifo->put_index += len;
00003c  19c0              ADDS     r0,r0,r7
00003e  b280              UXTH     r0,r0
000040  80a0              STRH     r0,[r4,#4]
;;;240            if (rx_fifo->put_index >= rx_fifo->get_index)
000042  42b0              CMP      r0,r6
000044  d30b              BCC      |L5.94|
;;;241            {
;;;242                /* beyond the fifo end */
;;;243                if (rx_fifo->put_index >= serial->config.bufsz)
000046  6ca9              LDR      r1,[r5,#0x48]
000048  0189              LSLS     r1,r1,#6
00004a  0c09              LSRS     r1,r1,#16
00004c  4288              CMP      r0,r1
00004e  d302              BCC      |L5.86|
;;;244                {
;;;245                    rx_fifo->put_index %= serial->config.bufsz;
000050  f7fffffe          BL       __aeabi_uidivmod
000054  80a1              STRH     r1,[r4,#4]
                  |L5.86|
;;;246                }
;;;247                /* force overwrite get index */
;;;248                rx_fifo->get_index = rx_fifo->put_index;
000056  88a0              LDRH     r0,[r4,#4]
000058  80e0              STRH     r0,[r4,#6]
                  |L5.90|
;;;249                rx_fifo->is_full = RT_TRUE;
00005a  2001              MOVS     r0,#1
00005c  60a0              STR      r0,[r4,#8]
                  |L5.94|
;;;250            }
;;;251        }
;;;252        if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
00005e  6ca9              LDR      r1,[r5,#0x48]
000060  88e0              LDRH     r0,[r4,#6]
000062  0189              LSLS     r1,r1,#6
000064  0c09              LSRS     r1,r1,#16
000066  4288              CMP      r0,r1
000068  d301              BCC      |L5.110|
00006a  2000              MOVS     r0,#0
00006c  80e0              STRH     r0,[r4,#6]
                  |L5.110|
;;;253    }
00006e  bdf8              POP      {r3-r7,pc}
;;;254    
                          ENDP

                  |L5.112|
                          DCD      ||.constdata||+0x72
                  |L5.116|
                          DCD      ||i._serial_int_rx||+0x78

                          AREA ||i.rt_hw_serial_isr||, CODE, READONLY, ALIGN=2

                  rt_hw_serial_isr PROC
;;;686    /* ISR for serial interrupt */
;;;687    void rt_hw_serial_isr(struct rt_serial_device *serial, int event)
000000  b5fe              PUSH     {r1-r7,lr}
;;;688    {
000002  4605              MOV      r5,r0
;;;689        switch (event & 0xff)
000004  b2c8              UXTB     r0,r1
000006  2700              MOVS     r7,#0
000008  2801              CMP      r0,#1
00000a  d01b              BEQ      |L6.68|
00000c  2802              CMP      r0,#2
00000e  d05f              BEQ      |L6.208|
000010  2803              CMP      r0,#3
000012  d06b              BEQ      |L6.236|
000014  2804              CMP      r0,#4
000016  d114              BNE      |L6.66|
;;;690        {
;;;691            case RT_SERIAL_EVENT_RX_IND:
;;;692            {
;;;693                int ch = -1;
;;;694                rt_base_t level;
;;;695                struct rt_serial_rx_fifo* rx_fifo;
;;;696    
;;;697                /* interrupt mode receive */
;;;698                rx_fifo = (struct rt_serial_rx_fifo*)serial->serial_rx;
;;;699                RT_ASSERT(rx_fifo != RT_NULL);
;;;700    
;;;701                while (1)
;;;702                {
;;;703                    ch = serial->ops->getc(serial);
;;;704                    if (ch == -1) break;
;;;705    								//serial->ops->putc(serial,ch);	
;;;706    
;;;707                    /* disable interrupt */
;;;708                    level = rt_hw_interrupt_disable();
;;;709    
;;;710                    rx_fifo->buffer[rx_fifo->put_index] = ch;
;;;711                    rx_fifo->put_index += 1;
;;;712                    if (rx_fifo->put_index >= serial->config.bufsz) rx_fifo->put_index = 0;
;;;713    
;;;714                    /* if the next position is read index, discard this 'read char' */
;;;715                    if (rx_fifo->put_index == rx_fifo->get_index)
;;;716                    {
;;;717                        rx_fifo->get_index += 1;
;;;718                        if (rx_fifo->get_index >= serial->config.bufsz) rx_fifo->get_index = 0;
;;;719                    }
;;;720    
;;;721                    /* enable interrupt */
;;;722                    rt_hw_interrupt_enable(level);
;;;723                }
;;;724    
;;;725                /* invoke callback */
;;;726                if (serial->parent.rx_indicate != RT_NULL)
;;;727                {
;;;728                    rt_size_t rx_length;
;;;729    
;;;730                    /* get rx length */
;;;731                    level = rt_hw_interrupt_disable();
;;;732                    rx_length = (rx_fifo->put_index >= rx_fifo->get_index)? (rx_fifo->put_index - rx_fifo->get_index):
;;;733                        (serial->config.bufsz - (rx_fifo->get_index - rx_fifo->put_index));
;;;734                    rt_hw_interrupt_enable(level);
;;;735    
;;;736                    serial->parent.rx_indicate(&serial->parent, rx_length);
;;;737                }
;;;738                break;
;;;739            }
;;;740            case RT_SERIAL_EVENT_TX_DONE:
;;;741            {
;;;742                struct rt_serial_tx_fifo* tx_fifo;
;;;743    
;;;744                tx_fifo = (struct rt_serial_tx_fifo*)serial->serial_tx;
;;;745                rt_completion_done(&(tx_fifo->completion));
;;;746                break;
;;;747            }
;;;748            case RT_SERIAL_EVENT_TX_DMADONE:
;;;749            {
;;;750                const void *data_ptr;
;;;751                rt_size_t data_size;
;;;752                const void *last_data_ptr;
;;;753                struct rt_serial_tx_dma* tx_dma;
;;;754    
;;;755                tx_dma = (struct rt_serial_tx_dma*) serial->serial_tx;
;;;756    
;;;757                rt_data_queue_pop(&(tx_dma->data_queue), &last_data_ptr, &data_size, 0);
000018  6d2c              LDR      r4,[r5,#0x50]
00001a  2300              MOVS     r3,#0
00001c  466a              MOV      r2,sp
00001e  a902              ADD      r1,sp,#8
000020  1d20              ADDS     r0,r4,#4
000022  f7fffffe          BL       rt_data_queue_pop
;;;758                if (rt_data_queue_peak(&(tx_dma->data_queue), &data_ptr, &data_size) == RT_EOK)
000026  466a              MOV      r2,sp
000028  a901              ADD      r1,sp,#4
00002a  1d20              ADDS     r0,r4,#4
00002c  f7fffffe          BL       rt_data_queue_peak
000030  2800              CMP      r0,#0
000032  d051              BEQ      |L6.216|
;;;759                {
;;;760                    /* transmit next data node */
;;;761                    tx_dma->activated = RT_TRUE;
;;;762                    serial->ops->dma_transmit(serial, (rt_uint8_t *)data_ptr, data_size, RT_SERIAL_DMA_TX);
;;;763                }
;;;764                else
;;;765                {
;;;766                    tx_dma->activated = RT_FALSE;
000034  6027              STR      r7,[r4,#0]
                  |L6.54|
;;;767                }
;;;768    
;;;769                /* invoke callback */
;;;770                if (serial->parent.tx_complete != RT_NULL)
000036  6a2a              LDR      r2,[r5,#0x20]
000038  2a00              CMP      r2,#0
00003a  d002              BEQ      |L6.66|
;;;771                {
;;;772                    serial->parent.tx_complete(&serial->parent, (void*)last_data_ptr);
00003c  4628              MOV      r0,r5
00003e  9902              LDR      r1,[sp,#8]
000040  4790              BLX      r2
                  |L6.66|
;;;773                }
;;;774                break;
;;;775            }
;;;776            case RT_SERIAL_EVENT_RX_DMADONE:
;;;777            {
;;;778                int length;
;;;779                rt_base_t level;
;;;780    
;;;781                /* get DMA rx length */
;;;782                length = (event & (~0xff)) >> 8;
;;;783    
;;;784                if (serial->config.bufsz == 0)
;;;785                {
;;;786                    struct rt_serial_rx_dma* rx_dma;
;;;787    
;;;788                    rx_dma = (struct rt_serial_rx_dma*) serial->serial_rx;
;;;789                    RT_ASSERT(rx_dma != RT_NULL);
;;;790    
;;;791                    RT_ASSERT(serial->parent.rx_indicate != RT_NULL);
;;;792                    serial->parent.rx_indicate(&(serial->parent), length);
;;;793                    rx_dma->activated = RT_FALSE;
;;;794                }
;;;795                else
;;;796                {
;;;797                    /* disable interrupt */
;;;798                    level = rt_hw_interrupt_disable();
;;;799                    /* update fifo put index */
;;;800                    rt_dma_recv_update_put_index(serial, length);
;;;801                    /* calculate received total length */
;;;802                    length = rt_dma_calc_recved_len(serial);
;;;803                    /* enable interrupt */
;;;804                    rt_hw_interrupt_enable(level);
;;;805                    /* invoke callback */
;;;806                    if (serial->parent.rx_indicate != RT_NULL)
;;;807                    {
;;;808                        serial->parent.rx_indicate(&(serial->parent), length);
;;;809                    }
;;;810                }
;;;811                break;
;;;812            }
;;;813        }
;;;814    }
000042  bdfe              POP      {r1-r7,pc}
                  |L6.68|
000044  6cec              LDR      r4,[r5,#0x4c]         ;699
000046  2c00              CMP      r4,#0                 ;699
000048  d104              BNE      |L6.84|
00004a  4a41              LDR      r2,|L6.336|
00004c  4941              LDR      r1,|L6.340|
00004e  a042              ADR      r0,|L6.344|
000050  f7fffffe          BL       rt_assert_handler
                  |L6.84|
000054  6c28              LDR      r0,[r5,#0x40]         ;703
000056  68c1              LDR      r1,[r0,#0xc]          ;703
000058  4628              MOV      r0,r5                 ;703
00005a  4788              BLX      r1                    ;703
00005c  4606              MOV      r6,r0                 ;703
00005e  1c40              ADDS     r0,r0,#1              ;704
000060  d020              BEQ      |L6.164|
000062  f7fffffe          BL       rt_hw_interrupt_disable
000066  4601              MOV      r1,r0                 ;708
000068  88a2              LDRH     r2,[r4,#4]            ;710
00006a  6820              LDR      r0,[r4,#0]            ;710
00006c  5486              STRB     r6,[r0,r2]            ;710
00006e  88a0              LDRH     r0,[r4,#4]            ;711
000070  1c40              ADDS     r0,r0,#1              ;711
000072  b280              UXTH     r0,r0                 ;711
000074  80a0              STRH     r0,[r4,#4]            ;711
000076  6caa              LDR      r2,[r5,#0x48]         ;712
000078  0192              LSLS     r2,r2,#6              ;712
00007a  0c12              LSRS     r2,r2,#16             ;712
00007c  4290              CMP      r0,r2                 ;712
00007e  d300              BCC      |L6.130|
000080  80a7              STRH     r7,[r4,#4]            ;712
                  |L6.130|
000082  88a2              LDRH     r2,[r4,#4]            ;715
000084  88e0              LDRH     r0,[r4,#6]            ;715
000086  4282              CMP      r2,r0                 ;715
000088  d108              BNE      |L6.156|
00008a  1c40              ADDS     r0,r0,#1              ;715
00008c  b280              UXTH     r0,r0                 ;717
00008e  80e0              STRH     r0,[r4,#6]            ;717
000090  6caa              LDR      r2,[r5,#0x48]         ;718
000092  0192              LSLS     r2,r2,#6              ;718
000094  0c12              LSRS     r2,r2,#16             ;718
000096  4290              CMP      r0,r2                 ;718
000098  d300              BCC      |L6.156|
00009a  80e7              STRH     r7,[r4,#6]            ;718
                  |L6.156|
00009c  4608              MOV      r0,r1                 ;722
00009e  f7fffffe          BL       rt_hw_interrupt_enable
0000a2  e7d7              B        |L6.84|
                  |L6.164|
0000a4  69e8              LDR      r0,[r5,#0x1c]         ;726
0000a6  2800              CMP      r0,#0                 ;726
0000a8  d0cb              BEQ      |L6.66|
0000aa  f7fffffe          BL       rt_hw_interrupt_disable
0000ae  4602              MOV      r2,r0                 ;731
0000b0  88a0              LDRH     r0,[r4,#4]            ;732
0000b2  88e1              LDRH     r1,[r4,#6]            ;732
0000b4  4288              CMP      r0,r1                 ;732
0000b6  d301              BCC      |L6.188|
0000b8  1a44              SUBS     r4,r0,r1              ;732
0000ba  e004              B        |L6.198|
                  |L6.188|
0000bc  1a08              SUBS     r0,r1,r0              ;733
0000be  6ca9              LDR      r1,[r5,#0x48]         ;733
0000c0  0189              LSLS     r1,r1,#6              ;733
0000c2  0c09              LSRS     r1,r1,#16             ;733
0000c4  1a0c              SUBS     r4,r1,r0              ;733
                  |L6.198|
0000c6  4610              MOV      r0,r2                 ;734
0000c8  f7fffffe          BL       rt_hw_interrupt_enable
0000cc  69ea              LDR      r2,[r5,#0x1c]         ;737
0000ce  e023              B        |L6.280|
                  |L6.208|
0000d0  6d28              LDR      r0,[r5,#0x50]         ;745
0000d2  f7fffffe          BL       rt_completion_done
                  |L6.214|
0000d6  bdfe              POP      {r1-r7,pc}
                  |L6.216|
0000d8  2001              MOVS     r0,#1                 ;761
0000da  6020              STR      r0,[r4,#0]            ;762
0000dc  6c28              LDR      r0,[r5,#0x40]         ;762
0000de  2302              MOVS     r3,#2                 ;762
0000e0  6904              LDR      r4,[r0,#0x10]         ;762
0000e2  4628              MOV      r0,r5                 ;762
0000e4  9a00              LDR      r2,[sp,#0]            ;762
0000e6  9901              LDR      r1,[sp,#4]            ;762
0000e8  47a0              BLX      r4                    ;762
0000ea  e7a4              B        |L6.54|
                  |L6.236|
0000ec  6ca8              LDR      r0,[r5,#0x48]         ;784
0000ee  120e              ASRS     r6,r1,#8              ;782
0000f0  0180              LSLS     r0,r0,#6              ;784
0000f2  0c00              LSRS     r0,r0,#16             ;784
0000f4  d014              BEQ      |L6.288|
0000f6  f7fffffe          BL       rt_hw_interrupt_disable
0000fa  4607              MOV      r7,r0                 ;798
0000fc  4631              MOV      r1,r6                 ;800
0000fe  4628              MOV      r0,r5                 ;800
000100  f7fffffe          BL       rt_dma_recv_update_put_index
000104  4628              MOV      r0,r5                 ;802
000106  f7fffffe          BL       rt_dma_calc_recved_len
00010a  4604              MOV      r4,r0                 ;802
00010c  4638              MOV      r0,r7                 ;804
00010e  f7fffffe          BL       rt_hw_interrupt_enable
000112  69ea              LDR      r2,[r5,#0x1c]         ;806
000114  2a00              CMP      r2,#0                 ;806
000116  d0de              BEQ      |L6.214|
                  |L6.280|
000118  4621              MOV      r1,r4                 ;808
00011a  4628              MOV      r0,r5                 ;808
00011c  4790              BLX      r2                    ;808
00011e  bdfe              POP      {r1-r7,pc}
                  |L6.288|
000120  6cec              LDR      r4,[r5,#0x4c]         ;789
000122  2c00              CMP      r4,#0                 ;789
000124  d105              BNE      |L6.306|
000126  4a0a              LDR      r2,|L6.336|
000128  490a              LDR      r1,|L6.340|
00012a  325a              ADDS     r2,r2,#0x5a           ;789
00012c  a00f              ADR      r0,|L6.364|
00012e  f7fffffe          BL       rt_assert_handler
                  |L6.306|
000132  69e8              LDR      r0,[r5,#0x1c]         ;791
000134  2800              CMP      r0,#0                 ;791
000136  d105              BNE      |L6.324|
000138  4a05              LDR      r2,|L6.336|
00013a  4906              LDR      r1,|L6.340|
00013c  325c              ADDS     r2,r2,#0x5c           ;791
00013e  a010              ADR      r0,|L6.384|
000140  f7fffffe          BL       rt_assert_handler
                  |L6.324|
000144  69ea              LDR      r2,[r5,#0x1c]         ;792
000146  4631              MOV      r1,r6                 ;792
000148  4628              MOV      r0,r5                 ;792
00014a  4790              BLX      r2                    ;792
00014c  6027              STR      r7,[r4,#0]            ;793
00014e  bdfe              POP      {r1-r7,pc}
                          ENDP

                  |L6.336|
                          DCD      0x000002bb
                  |L6.340|
                          DCD      ||.constdata||+0x113
                  |L6.344|
000158  72785f66          DCB      "rx_fifo != RT_NULL",0
00015c  69666f20
000160  213d2052
000164  545f4e55
000168  4c4c00  
00016b  00                DCB      0
                  |L6.364|
00016c  72785f64          DCB      "rx_dma != RT_NULL",0
000170  6d612021
000174  3d205254
000178  5f4e554c
00017c  4c00    
00017e  00                DCB      0
00017f  00                DCB      0
                  |L6.384|
000180  73657269          DCB      "serial->parent.rx_indicate != RT_NULL",0
000184  616c2d3e
000188  70617265
00018c  6e742e72
000190  785f696e
000194  64696361
000198  74652021
00019c  3d205254
0001a0  5f4e554c
0001a4  4c00    
0001a6  00                DCB      0
0001a7  00                DCB      0

                          AREA ||i.rt_hw_serial_register||, CODE, READONLY, ALIGN=2

                  rt_hw_serial_register PROC
;;;659     */
;;;660    rt_err_t rt_hw_serial_register(struct rt_serial_device *serial,
000000  b5f8              PUSH     {r3-r7,lr}
;;;661                                   const char              *name,
;;;662                                   rt_uint32_t              flag,
;;;663                                   void                    *data)
;;;664    {
000002  461c              MOV      r4,r3
000004  4615              MOV      r5,r2
000006  460e              MOV      r6,r1
000008  0007              MOVS     r7,r0
00000a  d104              BNE      |L7.22|
;;;665        struct rt_device *device;
;;;666        RT_ASSERT(serial != RT_NULL);
00000c  4a0d              LDR      r2,|L7.68|
00000e  490e              LDR      r1,|L7.72|
000010  a00e              ADR      r0,|L7.76|
000012  f7fffffe          BL       rt_assert_handler
                  |L7.22|
;;;667    
;;;668        device = &(serial->parent);
;;;669    
;;;670        device->type        = RT_Device_Class_Char;
000016  2100              MOVS     r1,#0
000018  7539              STRB     r1,[r7,#0x14]
;;;671        device->rx_indicate = RT_NULL;
;;;672        device->tx_complete = RT_NULL;
00001a  61f9              STR      r1,[r7,#0x1c]
;;;673    
;;;674        device->init        = rt_serial_init;
00001c  6239              STR      r1,[r7,#0x20]
00001e  4910              LDR      r1,|L7.96|
;;;675        device->open        = rt_serial_open;
000020  6279              STR      r1,[r7,#0x24]
000022  4910              LDR      r1,|L7.100|
;;;676        device->close       = rt_serial_close;
000024  62b9              STR      r1,[r7,#0x28]
000026  4910              LDR      r1,|L7.104|
;;;677        device->read        = rt_serial_read;
000028  62f9              STR      r1,[r7,#0x2c]
00002a  4910              LDR      r1,|L7.108|
;;;678        device->write       = rt_serial_write;
00002c  6339              STR      r1,[r7,#0x30]
00002e  4910              LDR      r1,|L7.112|
;;;679        device->control     = rt_serial_control;
000030  6379              STR      r1,[r7,#0x34]
000032  4910              LDR      r1,|L7.116|
;;;680        device->user_data   = data;
000034  63b9              STR      r1,[r7,#0x38]
000036  4638              MOV      r0,r7                 ;668
;;;681    
;;;682        /* register a character device */
;;;683        return rt_device_register(device, name, flag);
000038  b2aa              UXTH     r2,r5
00003a  4631              MOV      r1,r6
00003c  63c4              STR      r4,[r0,#0x3c]
00003e  f7fffffe          BL       rt_device_register
;;;684    }
000042  bdf8              POP      {r3-r7,pc}
;;;685    
                          ENDP

                  |L7.68|
                          DCD      0x0000029a
                  |L7.72|
                          DCD      ||.constdata||+0xfd
                  |L7.76|
00004c  73657269          DCB      "serial != RT_NULL",0
000050  616c2021
000054  3d205254
000058  5f4e554c
00005c  4c00    
00005e  00                DCB      0
00005f  00                DCB      0
                  |L7.96|
                          DCD      rt_serial_init
                  |L7.100|
                          DCD      rt_serial_open
                  |L7.104|
                          DCD      rt_serial_close
                  |L7.108|
                          DCD      rt_serial_read
                  |L7.112|
                          DCD      rt_serial_write
                  |L7.116|
                          DCD      rt_serial_control

                          AREA ||i.rt_serial_close||, CODE, READONLY, ALIGN=2

                  rt_serial_close PROC
;;;482    
;;;483    static rt_err_t rt_serial_close(struct rt_device *dev)
000000  b5f8              PUSH     {r3-r7,lr}
;;;484    {
000002  0004              MOVS     r4,r0
000004  d105              BNE      |L8.18|
;;;485        struct rt_serial_device *serial;
;;;486    
;;;487        RT_ASSERT(dev != RT_NULL);
000006  22ff              MOVS     r2,#0xff
000008  32e8              ADDS     r2,r2,#0xe8
00000a  493d              LDR      r1,|L8.256|
00000c  a03d              ADR      r0,|L8.260|
00000e  f7fffffe          BL       rt_assert_handler
                  |L8.18|
;;;488        serial = (struct rt_serial_device *)dev;
;;;489    
;;;490        /* this device has more reference count */
;;;491        if (dev->ref_count > 1) return RT_EOK;
000012  7ea0              LDRB     r0,[r4,#0x1a]
000014  2801              CMP      r0,#1
000016  d870              BHI      |L8.250|
;;;492    
;;;493        if (dev->open_flag & RT_DEVICE_FLAG_INT_RX)
000018  8b20              LDRH     r0,[r4,#0x18]
00001a  2500              MOVS     r5,#0
00001c  05c1              LSLS     r1,r0,#23
00001e  2900              CMP      r1,#0
000020  da17              BGE      |L8.82|
;;;494        {
;;;495            struct rt_serial_rx_fifo* rx_fifo;
;;;496    
;;;497            rx_fifo = (struct rt_serial_rx_fifo*)serial->serial_rx;
;;;498            RT_ASSERT(rx_fifo != RT_NULL);
000022  6ce6              LDR      r6,[r4,#0x4c]
000024  2e00              CMP      r6,#0
000026  d105              BNE      |L8.52|
000028  22ff              MOVS     r2,#0xff
00002a  32f3              ADDS     r2,r2,#0xf3
00002c  4934              LDR      r1,|L8.256|
00002e  a039              ADR      r0,|L8.276|
000030  f7fffffe          BL       rt_assert_handler
                  |L8.52|
;;;499    
;;;500            rt_free(rx_fifo);
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       rt_free
;;;501            serial->serial_rx = RT_NULL;
;;;502            dev->open_flag &= ~RT_DEVICE_FLAG_INT_RX;
00003a  64e5              STR      r5,[r4,#0x4c]
00003c  8b20              LDRH     r0,[r4,#0x18]
00003e  22ff              MOVS     r2,#0xff
000040  3201              ADDS     r2,#1
000042  4390              BICS     r0,r0,r2
000044  8320              STRH     r0,[r4,#0x18]
;;;503            /* configure low level device */
;;;504            serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void*)RT_DEVICE_FLAG_INT_RX);
000046  6c20              LDR      r0,[r4,#0x40]
000048  2111              MOVS     r1,#0x11
00004a  6843              LDR      r3,[r0,#4]
00004c  4620              MOV      r0,r4
00004e  4798              BLX      r3
;;;505        }
000050  e024              B        |L8.156|
                  |L8.82|
;;;506        else if (dev->open_flag & RT_DEVICE_FLAG_DMA_RX)
000052  0580              LSLS     r0,r0,#22
000054  d522              BPL      |L8.156|
;;;507        {
;;;508            if (serial->config.bufsz == 0) {
000056  6ca0              LDR      r0,[r4,#0x48]
;;;509                struct rt_serial_rx_dma* rx_dma;
;;;510    
;;;511                rx_dma = (struct rt_serial_rx_dma*)serial->serial_rx;
;;;512                RT_ASSERT(rx_dma != RT_NULL);
000058  4f33              LDR      r7,|L8.296|
00005a  0180              LSLS     r0,r0,#6              ;508
00005c  6ce6              LDR      r6,[r4,#0x4c]         ;508
00005e  0c00              LSRS     r0,r0,#16             ;508
000060  d002              BEQ      |L8.104|
;;;513    
;;;514                rt_free(rx_dma);
;;;515            } else {
;;;516                struct rt_serial_rx_fifo* rx_fifo;
;;;517    
;;;518                rx_fifo = (struct rt_serial_rx_fifo*)serial->serial_rx;
;;;519                RT_ASSERT(rx_fifo != RT_NULL);
000062  2e00              CMP      r6,#0
000064  d006              BEQ      |L8.116|
000066  e00b              B        |L8.128|
                  |L8.104|
000068  2e00              CMP      r6,#0                 ;512
00006a  d109              BNE      |L8.128|
00006c  463a              MOV      r2,r7                 ;512
00006e  4924              LDR      r1,|L8.256|
000070  a02e              ADR      r0,|L8.300|
000072  e003              B        |L8.124|
                  |L8.116|
000074  4a2c              LDR      r2,|L8.296|
000076  4922              LDR      r1,|L8.256|
000078  1dd2              ADDS     r2,r2,#7
00007a  a026              ADR      r0,|L8.276|
                  |L8.124|
00007c  f7fffffe          BL       rt_assert_handler
                  |L8.128|
;;;520    
;;;521                rt_free(rx_fifo);
000080  4630              MOV      r0,r6
000082  f7fffffe          BL       rt_free
;;;522            }
;;;523            /* configure low level device */
;;;524            serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void *) RT_DEVICE_FLAG_DMA_RX);
000086  6c20              LDR      r0,[r4,#0x40]
000088  463e              MOV      r6,r7
00008a  6843              LDR      r3,[r0,#4]
00008c  463a              MOV      r2,r7
00008e  2111              MOVS     r1,#0x11
000090  4620              MOV      r0,r4
000092  4798              BLX      r3
;;;525            serial->serial_rx = RT_NULL;
;;;526            dev->open_flag &= ~RT_DEVICE_FLAG_DMA_RX;
000094  64e5              STR      r5,[r4,#0x4c]
000096  8b20              LDRH     r0,[r4,#0x18]
000098  43b0              BICS     r0,r0,r6
00009a  8320              STRH     r0,[r4,#0x18]
                  |L8.156|
;;;527        }
;;;528    
;;;529        if (dev->open_flag & RT_DEVICE_FLAG_INT_TX)
00009c  8b20              LDRH     r0,[r4,#0x18]
00009e  0541              LSLS     r1,r0,#21
0000a0  d517              BPL      |L8.210|
;;;530        {
;;;531            struct rt_serial_tx_fifo* tx_fifo;
;;;532    
;;;533            tx_fifo = (struct rt_serial_tx_fifo*)serial->serial_tx;
;;;534            RT_ASSERT(tx_fifo != RT_NULL);
0000a2  6d26              LDR      r6,[r4,#0x50]
0000a4  2e00              CMP      r6,#0
0000a6  d105              BNE      |L8.180|
0000a8  4a1f              LDR      r2,|L8.296|
0000aa  4915              LDR      r1,|L8.256|
0000ac  3216              ADDS     r2,r2,#0x16
0000ae  a024              ADR      r0,|L8.320|
0000b0  f7fffffe          BL       rt_assert_handler
                  |L8.180|
;;;535    
;;;536            rt_free(tx_fifo);
0000b4  4630              MOV      r0,r6
0000b6  f7fffffe          BL       rt_free
;;;537            serial->serial_tx = RT_NULL;
;;;538            dev->open_flag &= ~RT_DEVICE_FLAG_INT_TX;
0000ba  6525              STR      r5,[r4,#0x50]
0000bc  8b20              LDRH     r0,[r4,#0x18]
0000be  2201              MOVS     r2,#1
0000c0  0292              LSLS     r2,r2,#10
0000c2  4390              BICS     r0,r0,r2
0000c4  8320              STRH     r0,[r4,#0x18]
;;;539            /* configure low level device */
;;;540            serial->ops->control(serial, RT_DEVICE_CTRL_CLR_INT, (void*)RT_DEVICE_FLAG_INT_TX);
0000c6  6c20              LDR      r0,[r4,#0x40]
0000c8  2111              MOVS     r1,#0x11
0000ca  6843              LDR      r3,[r0,#4]
0000cc  4620              MOV      r0,r4
0000ce  4798              BLX      r3
;;;541        }
0000d0  e013              B        |L8.250|
                  |L8.210|
;;;542        else if (dev->open_flag & RT_DEVICE_FLAG_DMA_TX)
0000d2  0500              LSLS     r0,r0,#20
0000d4  d511              BPL      |L8.250|
;;;543        {
;;;544            struct rt_serial_tx_dma* tx_dma;
;;;545    
;;;546            tx_dma = (struct rt_serial_tx_dma*)serial->serial_tx;
;;;547            RT_ASSERT(tx_dma != RT_NULL);
0000d6  6d26              LDR      r6,[r4,#0x50]
0000d8  2e00              CMP      r6,#0
0000da  d105              BNE      |L8.232|
0000dc  4a12              LDR      r2,|L8.296|
0000de  4908              LDR      r1,|L8.256|
0000e0  3223              ADDS     r2,r2,#0x23
0000e2  a01c              ADR      r0,|L8.340|
0000e4  f7fffffe          BL       rt_assert_handler
                  |L8.232|
;;;548    
;;;549            rt_free(tx_dma);
0000e8  4630              MOV      r0,r6
0000ea  f7fffffe          BL       rt_free
;;;550            serial->serial_tx = RT_NULL;
;;;551            dev->open_flag &= ~RT_DEVICE_FLAG_DMA_TX;
0000ee  6525              STR      r5,[r4,#0x50]
0000f0  8b20              LDRH     r0,[r4,#0x18]
0000f2  2101              MOVS     r1,#1
0000f4  02c9              LSLS     r1,r1,#11
0000f6  4388              BICS     r0,r0,r1
0000f8  8320              STRH     r0,[r4,#0x18]
                  |L8.250|
;;;552        }
;;;553    
;;;554        return RT_EOK;
0000fa  2000              MOVS     r0,#0
;;;555    }
0000fc  bdf8              POP      {r3-r7,pc}
;;;556    
                          ENDP

0000fe  0000              DCW      0x0000
                  |L8.256|
                          DCD      ||.constdata||+0xbc
                  |L8.260|
000104  64657620          DCB      "dev != RT_NULL",0
000108  213d2052
00010c  545f4e55
000110  4c4c00  
000113  00                DCB      0
                  |L8.276|
000114  72785f66          DCB      "rx_fifo != RT_NULL",0
000118  69666f20
00011c  213d2052
000120  545f4e55
000124  4c4c00  
000127  00                DCB      0
                  |L8.296|
                          DCD      0x00000200
                  |L8.300|
00012c  72785f64          DCB      "rx_dma != RT_NULL",0
000130  6d612021
000134  3d205254
000138  5f4e554c
00013c  4c00    
00013e  00                DCB      0
00013f  00                DCB      0
                  |L8.320|
000140  74785f66          DCB      "tx_fifo != RT_NULL",0
000144  69666f20
000148  213d2052
00014c  545f4e55
000150  4c4c00  
000153  00                DCB      0
                  |L8.340|
000154  74785f64          DCB      "tx_dma != RT_NULL",0
000158  6d612021
00015c  3d205254
000160  5f4e554c
000164  4c00    
000166  00                DCB      0
000167  00                DCB      0

                          AREA ||i.rt_serial_control||, CODE, READONLY, ALIGN=2

                  rt_serial_control PROC
;;;606    
;;;607    static rt_err_t rt_serial_control(struct rt_device *dev,
000000  b570              PUSH     {r4-r6,lr}
;;;608                                      rt_uint8_t        cmd,
;;;609                                      void             *args)
;;;610    {
000002  4616              MOV      r6,r2
000004  460d              MOV      r5,r1
000006  0004              MOVS     r4,r0
000008  d104              BNE      |L9.20|
;;;611        struct rt_serial_device *serial;
;;;612    
;;;613        RT_ASSERT(dev != RT_NULL);
00000a  4a1a              LDR      r2,|L9.116|
00000c  491a              LDR      r1,|L9.120|
00000e  a01b              ADR      r0,|L9.124|
000010  f7fffffe          BL       rt_assert_handler
                  |L9.20|
;;;614        serial = (struct rt_serial_device *)dev;
;;;615    
;;;616        switch (cmd)
;;;617        {
;;;618            case RT_DEVICE_CTRL_SUSPEND:
;;;619                /* suspend device */
;;;620                dev->flag |= RT_DEVICE_FLAG_SUSPENDED;
000014  2120              MOVS     r1,#0x20
000016  4620              MOV      r0,r4                 ;614
000018  2d01              CMP      r5,#1                 ;616
00001a  d00d              BEQ      |L9.56|
00001c  2d02              CMP      r5,#2                 ;616
00001e  d008              BEQ      |L9.50|
000020  2d03              CMP      r5,#3                 ;616
000022  d00d              BEQ      |L9.64|
;;;621                break;
;;;622    
;;;623            case RT_DEVICE_CTRL_RESUME:
;;;624                /* resume device */
;;;625                dev->flag &= ~RT_DEVICE_FLAG_SUSPENDED;
;;;626                break;
;;;627    
;;;628            case RT_DEVICE_CTRL_CONFIG:
;;;629                if (args)
;;;630                {
;;;631                    struct serial_configure *pconfig = (struct serial_configure *) args;
;;;632                    if (pconfig->bufsz != serial->config.bufsz && serial->parent.ref_count)
;;;633                    {
;;;634                        /*can not change buffer size*/
;;;635                        return RT_EBUSY;
;;;636                    }
;;;637                    /* set serial configure */
;;;638                    serial->config = *pconfig;
;;;639                    if (serial->parent.ref_count)
;;;640                    {
;;;641                        /* serial device has been opened, to configure it */
;;;642                        serial->ops->configure(serial, (struct serial_configure *) args);
;;;643                    }
;;;644                }
;;;645    			
;;;646                break;
;;;647    
;;;648            default :
;;;649                /* control device */
;;;650                serial->ops->control(serial, cmd, args);
000024  6c01              LDR      r1,[r0,#0x40]
000026  4632              MOV      r2,r6
000028  684b              LDR      r3,[r1,#4]
00002a  4629              MOV      r1,r5
00002c  4798              BLX      r3
                  |L9.46|
;;;651                break;
;;;652        }
;;;653    
;;;654        return RT_EOK;
00002e  2000              MOVS     r0,#0
;;;655    }
000030  bd70              POP      {r4-r6,pc}
                  |L9.50|
000032  8ae0              LDRH     r0,[r4,#0x16]         ;620
000034  4308              ORRS     r0,r0,r1              ;620
000036  e001              B        |L9.60|
                  |L9.56|
000038  8ae0              LDRH     r0,[r4,#0x16]         ;625
00003a  4388              BICS     r0,r0,r1              ;625
                  |L9.60|
00003c  82e0              STRH     r0,[r4,#0x16]         ;620
00003e  e7f6              B        |L9.46|
                  |L9.64|
000040  2e00              CMP      r6,#0                 ;629
000042  d0f4              BEQ      |L9.46|
000044  6871              LDR      r1,[r6,#4]            ;632
000046  6c83              LDR      r3,[r0,#0x48]         ;632
000048  018a              LSLS     r2,r1,#6              ;632
00004a  019b              LSLS     r3,r3,#6              ;632
00004c  0c12              LSRS     r2,r2,#16             ;632
00004e  0c1b              LSRS     r3,r3,#16             ;632
000050  429a              CMP      r2,r3                 ;632
000052  d004              BEQ      |L9.94|
000054  7e82              LDRB     r2,[r0,#0x1a]         ;632
000056  2a00              CMP      r2,#0                 ;632
000058  d001              BEQ      |L9.94|
00005a  2007              MOVS     r0,#7                 ;635
00005c  bd70              POP      {r4-r6,pc}
                  |L9.94|
00005e  6832              LDR      r2,[r6,#0]            ;638
000060  6442              STR      r2,[r0,#0x44]         ;639
000062  6481              STR      r1,[r0,#0x48]         ;639
000064  7e81              LDRB     r1,[r0,#0x1a]         ;639
000066  2900              CMP      r1,#0                 ;639
000068  d0e1              BEQ      |L9.46|
00006a  6c01              LDR      r1,[r0,#0x40]         ;642
00006c  680a              LDR      r2,[r1,#0]            ;642
00006e  4631              MOV      r1,r6                 ;642
000070  4790              BLX      r2                    ;642
000072  e7dc              B        |L9.46|
;;;656    
                          ENDP

                  |L9.116|
                          DCD      0x00000265
                  |L9.120|
                          DCD      ||.constdata||+0xeb
                  |L9.124|
00007c  64657620          DCB      "dev != RT_NULL",0
000080  213d2052
000084  545f4e55
000088  4c4c00  
00008b  00                DCB      0

                          AREA ||i.rt_serial_init||, CODE, READONLY, ALIGN=2

                  rt_serial_init PROC
;;;352     */
;;;353    static rt_err_t rt_serial_init(struct rt_device *dev)
000000  b570              PUSH     {r4-r6,lr}
;;;354    {
;;;355        rt_err_t result = RT_EOK;
000002  2500              MOVS     r5,#0
000004  4604              MOV      r4,r0                 ;354
;;;356        struct rt_serial_device *serial;
;;;357    
;;;358        RT_ASSERT(dev != RT_NULL);
000006  2800              CMP      r0,#0
000008  d105              BNE      |L10.22|
00000a  22ff              MOVS     r2,#0xff
00000c  3267              ADDS     r2,r2,#0x67
00000e  4909              LDR      r1,|L10.52|
000010  a009              ADR      r0,|L10.56|
000012  f7fffffe          BL       rt_assert_handler
                  |L10.22|
;;;359        serial = (struct rt_serial_device *)dev;
;;;360    
;;;361        /* initialize rx/tx */
;;;362        serial->serial_rx = RT_NULL;
000016  2100              MOVS     r1,#0
;;;363        serial->serial_tx = RT_NULL;
000018  64e1              STR      r1,[r4,#0x4c]
;;;364    
;;;365        /* apply configuration */
;;;366        if (serial->ops->configure)
00001a  6521              STR      r1,[r4,#0x50]
00001c  6c21              LDR      r1,[r4,#0x40]
00001e  4620              MOV      r0,r4                 ;359
000020  680a              LDR      r2,[r1,#0]
000022  2a00              CMP      r2,#0
000024  d003              BEQ      |L10.46|
;;;367            result = serial->ops->configure(serial, &serial->config);
000026  4601              MOV      r1,r0
000028  3144              ADDS     r1,r1,#0x44
00002a  4790              BLX      r2
00002c  4605              MOV      r5,r0
                  |L10.46|
;;;368    
;;;369        return result;
00002e  4628              MOV      r0,r5
;;;370    }
000030  bd70              POP      {r4-r6,pc}
;;;371    
                          ENDP

000032  0000              DCW      0x0000
                  |L10.52|
                          DCD      ||.constdata||+0x9e
                  |L10.56|
000038  64657620          DCB      "dev != RT_NULL",0
00003c  213d2052
000040  545f4e55
000044  4c4c00  
000047  00                DCB      0

                          AREA ||i.rt_serial_open||, CODE, READONLY, ALIGN=2

                  rt_serial_open PROC
;;;371    
;;;372    static rt_err_t rt_serial_open(struct rt_device *dev, rt_uint16_t oflag)
000000  b5f8              PUSH     {r3-r7,lr}
;;;373    {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
000006  d105              BNE      |L11.20|
;;;374        struct rt_serial_device *serial;
;;;375    
;;;376        RT_ASSERT(dev != RT_NULL);
000008  22ff              MOVS     r2,#0xff
00000a  3279              ADDS     r2,r2,#0x79
00000c  495e              LDR      r1,|L11.392|
00000e  a05f              ADR      r0,|L11.396|
000010  f7fffffe          BL       rt_assert_handler
                  |L11.20|
;;;377        serial = (struct rt_serial_device *)dev;
;;;378    
;;;379        /* check device flag with the open flag */
;;;380        if ((oflag & RT_DEVICE_FLAG_DMA_RX) && !(dev->flag & RT_DEVICE_FLAG_DMA_RX))
;;;381            return -RT_EIO;
000014  4861              LDR      r0,|L11.412|
000016  05a9              LSLS     r1,r5,#22             ;380
000018  d502              BPL      |L11.32|
00001a  8ae1              LDRH     r1,[r4,#0x16]         ;380
00001c  0589              LSLS     r1,r1,#22             ;380
00001e  d57c              BPL      |L11.282|
                  |L11.32|
;;;382        if ((oflag & RT_DEVICE_FLAG_DMA_TX) && !(dev->flag & RT_DEVICE_FLAG_DMA_TX))
000020  0529              LSLS     r1,r5,#20
000022  d502              BPL      |L11.42|
000024  8ae1              LDRH     r1,[r4,#0x16]
000026  0509              LSLS     r1,r1,#20
000028  d577              BPL      |L11.282|
                  |L11.42|
;;;383            return -RT_EIO;
;;;384        if ((oflag & RT_DEVICE_FLAG_INT_RX) && !(dev->flag & RT_DEVICE_FLAG_INT_RX))
00002a  05e9              LSLS     r1,r5,#23
00002c  d502              BPL      |L11.52|
00002e  8ae1              LDRH     r1,[r4,#0x16]
000030  05c9              LSLS     r1,r1,#23
000032  d572              BPL      |L11.282|
                  |L11.52|
;;;385            return -RT_EIO;
;;;386        if ((oflag & RT_DEVICE_FLAG_INT_TX) && !(dev->flag & RT_DEVICE_FLAG_INT_TX))
000034  0569              LSLS     r1,r5,#21
000036  d502              BPL      |L11.62|
000038  8ae1              LDRH     r1,[r4,#0x16]
00003a  0549              LSLS     r1,r1,#21
00003c  d56d              BPL      |L11.282|
                  |L11.62|
;;;387            return -RT_EIO;
;;;388    
;;;389        /* get open flags */
;;;390        dev->open_flag = oflag & 0xff;
00003e  b2e9              UXTB     r1,r5
000040  8321              STRH     r1,[r4,#0x18]
;;;391    
;;;392        /* initialize the Rx/Tx structure according to open flag */
;;;393        if (serial->serial_rx == RT_NULL)
000042  6ce0              LDR      r0,[r4,#0x4c]
000044  2700              MOVS     r7,#0
000046  2800              CMP      r0,#0
000048  d160              BNE      |L11.268|
;;;394        {
;;;395            if (oflag & RT_DEVICE_FLAG_DMA_RX)
00004a  05a8              LSLS     r0,r5,#22
00004c  d538              BPL      |L11.192|
;;;396            {
;;;397                if (serial->config.bufsz == 0) {
00004e  6ca0              LDR      r0,[r4,#0x48]
000050  0180              LSLS     r0,r0,#6
000052  0c01              LSRS     r1,r0,#16
000054  d006              BEQ      |L11.100|
;;;398                    struct rt_serial_rx_dma* rx_dma;
;;;399    
;;;400                    rx_dma = (struct rt_serial_rx_dma*) rt_malloc (sizeof(struct rt_serial_rx_dma));
;;;401                    RT_ASSERT(rx_dma != RT_NULL);
;;;402                    rx_dma->activated = RT_FALSE;
;;;403    
;;;404                    serial->serial_rx = rx_dma;
;;;405                } else {
;;;406                    struct rt_serial_rx_fifo* rx_fifo;
;;;407    
;;;408                    rx_fifo = (struct rt_serial_rx_fifo*) rt_malloc (sizeof(struct rt_serial_rx_fifo) +
000056  0c00              LSRS     r0,r0,#16
000058  300c              ADDS     r0,r0,#0xc
00005a  f7fffffe          BL       rt_malloc
00005e  0006              MOVS     r6,r0
;;;409                        serial->config.bufsz);
;;;410                    RT_ASSERT(rx_fifo != RT_NULL);
000060  d00e              BEQ      |L11.128|
000062  e013              B        |L11.140|
                  |L11.100|
000064  2004              MOVS     r0,#4                 ;400
000066  f7fffffe          BL       rt_malloc
00006a  0006              MOVS     r6,r0                 ;400
00006c  d105              BNE      |L11.122|
00006e  22ff              MOVS     r2,#0xff              ;401
000070  3292              ADDS     r2,r2,#0x92           ;401
000072  4945              LDR      r1,|L11.392|
000074  a04a              ADR      r0,|L11.416|
000076  f7fffffe          BL       rt_assert_handler
                  |L11.122|
00007a  6037              STR      r7,[r6,#0]            ;404
00007c  64e6              STR      r6,[r4,#0x4c]         ;405
00007e  e019              B        |L11.180|
                  |L11.128|
000080  22ff              MOVS     r2,#0xff
000082  329b              ADDS     r2,r2,#0x9b
000084  4940              LDR      r1,|L11.392|
000086  a04b              ADR      r0,|L11.436|
000088  f7fffffe          BL       rt_assert_handler
                  |L11.140|
;;;411                    rx_fifo->buffer = (rt_uint8_t*) (rx_fifo + 1);
00008c  4630              MOV      r0,r6
00008e  300c              ADDS     r0,r0,#0xc
;;;412                    rt_memset(rx_fifo->buffer, 0, serial->config.bufsz);
000090  6030              STR      r0,[r6,#0]
000092  6ca1              LDR      r1,[r4,#0x48]
000094  0189              LSLS     r1,r1,#6
000096  0c0a              LSRS     r2,r1,#16
000098  2100              MOVS     r1,#0
00009a  f7fffffe          BL       rt_memset
;;;413                    rx_fifo->put_index = 0;
00009e  80b7              STRH     r7,[r6,#4]
;;;414                    rx_fifo->get_index = 0;
0000a0  80f7              STRH     r7,[r6,#6]
;;;415                    rx_fifo->is_full = RT_FALSE;
;;;416                    serial->serial_rx = rx_fifo;
0000a2  60b7              STR      r7,[r6,#8]
;;;417                    /* configure fifo address and length to low level device */
;;;418                    serial->ops->control(serial, RT_DEVICE_CTRL_CONFIG, (void *) RT_DEVICE_FLAG_DMA_RX);
0000a4  64e6              STR      r6,[r4,#0x4c]
0000a6  6c20              LDR      r0,[r4,#0x40]
0000a8  2201              MOVS     r2,#1
0000aa  0252              LSLS     r2,r2,#9
0000ac  6843              LDR      r3,[r0,#4]
0000ae  2103              MOVS     r1,#3
0000b0  4620              MOV      r0,r4
0000b2  4798              BLX      r3
                  |L11.180|
;;;419                }
;;;420                dev->open_flag |= RT_DEVICE_FLAG_DMA_RX;
0000b4  8b20              LDRH     r0,[r4,#0x18]
0000b6  2101              MOVS     r1,#1
0000b8  0249              LSLS     r1,r1,#9
0000ba  4308              ORRS     r0,r0,r1
0000bc  8320              STRH     r0,[r4,#0x18]
0000be  e025              B        |L11.268|
                  |L11.192|
;;;421            }
;;;422            else if (oflag & RT_DEVICE_FLAG_INT_RX)
0000c0  05e8              LSLS     r0,r5,#23
0000c2  d523              BPL      |L11.268|
;;;423            {
;;;424                struct rt_serial_rx_fifo* rx_fifo;
;;;425    
;;;426                rx_fifo = (struct rt_serial_rx_fifo*) rt_malloc (sizeof(struct rt_serial_rx_fifo) +
0000c4  6ca0              LDR      r0,[r4,#0x48]
0000c6  0180              LSLS     r0,r0,#6
0000c8  0c00              LSRS     r0,r0,#16
0000ca  300c              ADDS     r0,r0,#0xc
0000cc  f7fffffe          BL       rt_malloc
0000d0  0006              MOVS     r6,r0
;;;427                    serial->config.bufsz);
;;;428                RT_ASSERT(rx_fifo != RT_NULL);
0000d2  d105              BNE      |L11.224|
0000d4  22ff              MOVS     r2,#0xff
0000d6  32ad              ADDS     r2,r2,#0xad
0000d8  492b              LDR      r1,|L11.392|
0000da  a036              ADR      r0,|L11.436|
0000dc  f7fffffe          BL       rt_assert_handler
                  |L11.224|
;;;429                rx_fifo->buffer = (rt_uint8_t*) (rx_fifo + 1);
0000e0  4630              MOV      r0,r6
0000e2  300c              ADDS     r0,r0,#0xc
;;;430                rt_memset(rx_fifo->buffer, 0, serial->config.bufsz);
0000e4  6030              STR      r0,[r6,#0]
0000e6  6ca1              LDR      r1,[r4,#0x48]
0000e8  0189              LSLS     r1,r1,#6
0000ea  0c0a              LSRS     r2,r1,#16
0000ec  2100              MOVS     r1,#0
0000ee  f7fffffe          BL       rt_memset
;;;431                rx_fifo->put_index = 0;
0000f2  80b7              STRH     r7,[r6,#4]
;;;432                rx_fifo->get_index = 0;
0000f4  80f7              STRH     r7,[r6,#6]
;;;433    
;;;434                serial->serial_rx = rx_fifo;
;;;435                dev->open_flag |= RT_DEVICE_FLAG_INT_RX;
0000f6  64e6              STR      r6,[r4,#0x4c]
0000f8  8b20              LDRH     r0,[r4,#0x18]
0000fa  22ff              MOVS     r2,#0xff
0000fc  3201              ADDS     r2,#1
0000fe  4310              ORRS     r0,r0,r2
000100  8320              STRH     r0,[r4,#0x18]
;;;436                /* configure low level device */
;;;437                serial->ops->control(serial, RT_DEVICE_CTRL_SET_INT, (void *)RT_DEVICE_FLAG_INT_RX);
000102  6c20              LDR      r0,[r4,#0x40]
000104  2110              MOVS     r1,#0x10
000106  6843              LDR      r3,[r0,#4]
000108  4620              MOV      r0,r4
00010a  4798              BLX      r3
                  |L11.268|
;;;438            }
;;;439            else
;;;440            {
;;;441                serial->serial_rx = RT_NULL;
;;;442            }
;;;443        }
;;;444    
;;;445        if (serial->serial_tx == RT_NULL)
00010c  6d20              LDR      r0,[r4,#0x50]
00010e  2800              CMP      r0,#0
000110  d137              BNE      |L11.386|
;;;446        {
;;;447            if (oflag & RT_DEVICE_FLAG_DMA_TX)
000112  0528              LSLS     r0,r5,#20
000114  d51a              BPL      |L11.332|
;;;448            {
;;;449                struct rt_serial_tx_dma* tx_dma;
;;;450    
;;;451                tx_dma = (struct rt_serial_tx_dma*) rt_malloc (sizeof(struct rt_serial_tx_dma));
000116  2024              MOVS     r0,#0x24
000118  e000              B        |L11.284|
                  |L11.282|
00011a  e033              B        |L11.388|
                  |L11.284|
00011c  f7fffffe          BL       rt_malloc
000120  0005              MOVS     r5,r0
;;;452                RT_ASSERT(tx_dma != RT_NULL);
000122  d105              BNE      |L11.304|
000124  22ff              MOVS     r2,#0xff
000126  32c5              ADDS     r2,r2,#0xc5
000128  4917              LDR      r1,|L11.392|
00012a  a027              ADR      r0,|L11.456|
00012c  f7fffffe          BL       rt_assert_handler
                  |L11.304|
;;;453                tx_dma->activated = RT_FALSE;
;;;454    
;;;455                rt_data_queue_init(&(tx_dma->data_queue), 8, 4, RT_NULL);
000130  2300              MOVS     r3,#0
000132  2204              MOVS     r2,#4
000134  2108              MOVS     r1,#8
000136  1d28              ADDS     r0,r5,#4
000138  602f              STR      r7,[r5,#0]
00013a  f7fffffe          BL       rt_data_queue_init
;;;456                serial->serial_tx = tx_dma;
;;;457    
;;;458                dev->open_flag |= RT_DEVICE_FLAG_DMA_TX;
00013e  6525              STR      r5,[r4,#0x50]
000140  8b20              LDRH     r0,[r4,#0x18]
000142  2101              MOVS     r1,#1
000144  02c9              LSLS     r1,r1,#11
000146  4308              ORRS     r0,r0,r1
000148  8320              STRH     r0,[r4,#0x18]
;;;459            }
00014a  e01a              B        |L11.386|
                  |L11.332|
;;;460            else if (oflag & RT_DEVICE_FLAG_INT_TX)
00014c  0568              LSLS     r0,r5,#21
00014e  d518              BPL      |L11.386|
;;;461            {
;;;462                struct rt_serial_tx_fifo *tx_fifo;
;;;463    
;;;464                tx_fifo = (struct rt_serial_tx_fifo*) rt_malloc(sizeof(struct rt_serial_tx_fifo));
000150  200c              MOVS     r0,#0xc
000152  f7fffffe          BL       rt_malloc
000156  0005              MOVS     r5,r0
;;;465                RT_ASSERT(tx_fifo != RT_NULL);
000158  d105              BNE      |L11.358|
00015a  22ff              MOVS     r2,#0xff
00015c  32d2              ADDS     r2,r2,#0xd2
00015e  490a              LDR      r1,|L11.392|
000160  a01e              ADR      r0,|L11.476|
000162  f7fffffe          BL       rt_assert_handler
                  |L11.358|
;;;466    
;;;467                rt_completion_init(&(tx_fifo->completion));
000166  4628              MOV      r0,r5
000168  f7fffffe          BL       rt_completion_init
;;;468                serial->serial_tx = tx_fifo;
;;;469    
;;;470                dev->open_flag |= RT_DEVICE_FLAG_INT_TX;
00016c  6525              STR      r5,[r4,#0x50]
00016e  8b20              LDRH     r0,[r4,#0x18]
000170  2201              MOVS     r2,#1
000172  0292              LSLS     r2,r2,#10
000174  4310              ORRS     r0,r0,r2
000176  8320              STRH     r0,[r4,#0x18]
;;;471                /* configure low level device */
;;;472                serial->ops->control(serial, RT_DEVICE_CTRL_SET_INT, (void *)RT_DEVICE_FLAG_INT_TX);
000178  6c20              LDR      r0,[r4,#0x40]
00017a  2110              MOVS     r1,#0x10
00017c  6843              LDR      r3,[r0,#4]
00017e  4620              MOV      r0,r4
000180  4798              BLX      r3
                  |L11.386|
;;;473            }
;;;474            else
;;;475            {
;;;476                serial->serial_tx = RT_NULL;
;;;477            }
;;;478        }
;;;479    
;;;480        return RT_EOK;
000182  2000              MOVS     r0,#0
                  |L11.388|
;;;481    }
000184  bdf8              POP      {r3-r7,pc}
;;;482    
                          ENDP

000186  0000              DCW      0x0000
                  |L11.392|
                          DCD      ||.constdata||+0xad
                  |L11.396|
00018c  64657620          DCB      "dev != RT_NULL",0
000190  213d2052
000194  545f4e55
000198  4c4c00  
00019b  00                DCB      0
                  |L11.412|
                          DCD      0xfffffff8
                  |L11.416|
0001a0  72785f64          DCB      "rx_dma != RT_NULL",0
0001a4  6d612021
0001a8  3d205254
0001ac  5f4e554c
0001b0  4c00    
0001b2  00                DCB      0
0001b3  00                DCB      0
                  |L11.436|
0001b4  72785f66          DCB      "rx_fifo != RT_NULL",0
0001b8  69666f20
0001bc  213d2052
0001c0  545f4e55
0001c4  4c4c00  
0001c7  00                DCB      0
                  |L11.456|
0001c8  74785f64          DCB      "tx_dma != RT_NULL",0
0001cc  6d612021
0001d0  3d205254
0001d4  5f4e554c
0001d8  4c00    
0001da  00                DCB      0
0001db  00                DCB      0
                  |L11.476|
0001dc  74785f66          DCB      "tx_fifo != RT_NULL",0
0001e0  69666f20
0001e4  213d2052
0001e8  545f4e55
0001ec  4c4c00  
0001ef  00                DCB      0

                          AREA ||i.rt_serial_read||, CODE, READONLY, ALIGN=2

                  rt_serial_read PROC
;;;556    
;;;557    static rt_size_t rt_serial_read(struct rt_device *dev,
000000  b5f8              PUSH     {r3-r7,lr}
;;;558                                    rt_off_t          pos,
;;;559                                    void             *buffer,
;;;560                                    rt_size_t         size)
;;;561    {
000002  461c              MOV      r4,r3
000004  4615              MOV      r5,r2
000006  0006              MOVS     r6,r0
000008  d105              BNE      |L12.22|
;;;562        struct rt_serial_device *serial;
;;;563    
;;;564        RT_ASSERT(dev != RT_NULL);
00000a  228d              MOVS     r2,#0x8d
00000c  0092              LSLS     r2,r2,#2
00000e  4918              LDR      r1,|L12.112|
000010  a018              ADR      r0,|L12.116|
000012  f7fffffe          BL       rt_assert_handler
                  |L12.22|
;;;565        if (size == 0) return 0;
000016  2c00              CMP      r4,#0
000018  d008              BEQ      |L12.44|
;;;566    
;;;567        serial = (struct rt_serial_device *)dev;
;;;568    
;;;569        if (dev->open_flag & RT_DEVICE_FLAG_INT_RX)
00001a  8b31              LDRH     r1,[r6,#0x18]
00001c  4630              MOV      r0,r6                 ;567
00001e  05ca              LSLS     r2,r1,#23
000020  d506              BPL      |L12.48|
;;;570        {
;;;571            return _serial_int_rx(serial, buffer, size);
000022  4622              MOV      r2,r4
000024  4629              MOV      r1,r5
000026  f7fffffe          BL       _serial_int_rx
;;;572        }
;;;573        else if (dev->open_flag & RT_DEVICE_FLAG_DMA_RX)
;;;574        {
;;;575            return _serial_dma_rx(serial, buffer, size);
;;;576        }
;;;577    
;;;578        return _serial_poll_rx(serial, buffer, size);
;;;579    }
00002a  bdf8              POP      {r3-r7,pc}
                  |L12.44|
00002c  2000              MOVS     r0,#0                 ;565
00002e  bdf8              POP      {r3-r7,pc}
                  |L12.48|
000030  0589              LSLS     r1,r1,#22             ;573
000032  d504              BPL      |L12.62|
000034  4622              MOV      r2,r4                 ;575
000036  4629              MOV      r1,r5                 ;575
000038  f7fffffe          BL       _serial_dma_rx
00003c  bdf8              POP      {r3-r7,pc}
                  |L12.62|
00003e  2e00              CMP      r6,#0
000040  d105              BNE      |L12.78|
000042  490b              LDR      r1,|L12.112|
000044  2231              MOVS     r2,#0x31
000046  39cc              SUBS     r1,r1,#0xcc
000048  a00e              ADR      r0,|L12.132|
00004a  f7fffffe          BL       rt_assert_handler
                  |L12.78|
00004e  4627              MOV      r7,r4
                  |L12.80|
000050  6c30              LDR      r0,[r6,#0x40]
000052  68c1              LDR      r1,[r0,#0xc]
000054  4630              MOV      r0,r6
000056  4788              BLX      r1
000058  1c41              ADDS     r1,r0,#1
00005a  d006              BEQ      |L12.106|
00005c  7028              STRB     r0,[r5,#0]
00005e  1e64              SUBS     r4,r4,#1
000060  1c6d              ADDS     r5,r5,#1
000062  280a              CMP      r0,#0xa
000064  d001              BEQ      |L12.106|
000066  2c00              CMP      r4,#0
000068  d1f2              BNE      |L12.80|
                  |L12.106|
00006a  1b38              SUBS     r0,r7,r4
00006c  bdf8              POP      {r3-r7,pc}
;;;580    
                          ENDP

00006e  0000              DCW      0x0000
                  |L12.112|
                          DCD      ||.constdata||+0xcc
                  |L12.116|
000074  64657620          DCB      "dev != RT_NULL",0
000078  213d2052
00007c  545f4e55
000080  4c4c00  
000083  00                DCB      0
                  |L12.132|
000084  73657269          DCB      "serial != RT_NULL",0
000088  616c2021
00008c  3d205254
000090  5f4e554c
000094  4c00    
000096  00                DCB      0
000097  00                DCB      0

                          AREA ||i.rt_serial_write||, CODE, READONLY, ALIGN=2

                  rt_serial_write PROC
;;;580    
;;;581    static rt_size_t rt_serial_write(struct rt_device *dev,
000000  b5f8              PUSH     {r3-r7,lr}
;;;582                                     rt_off_t          pos,
;;;583                                     const void       *buffer,
;;;584                                     rt_size_t         size)
;;;585    {
000002  461e              MOV      r6,r3
000004  4614              MOV      r4,r2
000006  0005              MOVS     r5,r0
000008  d105              BNE      |L13.22|
;;;586        struct rt_serial_device *serial;
;;;587    
;;;588        RT_ASSERT(dev != RT_NULL);
00000a  2293              MOVS     r2,#0x93
00000c  0092              LSLS     r2,r2,#2
00000e  4939              LDR      r1,|L13.244|
000010  a039              ADR      r0,|L13.248|
000012  f7fffffe          BL       rt_assert_handler
                  |L13.22|
;;;589        if (size == 0) return 0;
000016  2e00              CMP      r6,#0
000018  d005              BEQ      |L13.38|
;;;590    
;;;591        serial = (struct rt_serial_device *)dev;
;;;592    
;;;593        if (dev->open_flag & RT_DEVICE_FLAG_INT_TX)
00001a  8b28              LDRH     r0,[r5,#0x18]
00001c  0541              LSLS     r1,r0,#21
00001e  d527              BPL      |L13.112|
000020  2d00              CMP      r5,#0
000022  d002              BEQ      |L13.42|
000024  e007              B        |L13.54|
                  |L13.38|
000026  2000              MOVS     r0,#0                 ;589
;;;594        {
;;;595            return _serial_int_tx(serial, buffer, size);
;;;596        }
;;;597        else if (dev->open_flag & RT_DEVICE_FLAG_DMA_TX)
;;;598        {
;;;599            return _serial_dma_tx(serial, buffer, size);
;;;600        }
;;;601        else
;;;602        {
;;;603            return _serial_poll_tx(serial, buffer, size);
;;;604        }
;;;605    }
000028  bdf8              POP      {r3-r7,pc}
                  |L13.42|
00002a  4932              LDR      r1,|L13.244|
00002c  228e              MOVS     r2,#0x8e
00002e  39ac              SUBS     r1,r1,#0xac
000030  4835              LDR      r0,|L13.264|
000032  f7fffffe          BL       rt_assert_handler
                  |L13.54|
000036  6d28              LDR      r0,[r5,#0x50]
000038  4637              MOV      r7,r6
00003a  9000              STR      r0,[sp,#0]
00003c  2800              CMP      r0,#0
00003e  d105              BNE      |L13.76|
000040  492c              LDR      r1,|L13.244|
000042  2292              MOVS     r2,#0x92
000044  39ac              SUBS     r1,r1,#0xac
000046  a031              ADR      r0,|L13.268|
000048  f7fffffe          BL       rt_assert_handler
                  |L13.76|
00004c  6c28              LDR      r0,[r5,#0x40]
00004e  7821              LDRB     r1,[r4,#0]
000050  6882              LDR      r2,[r0,#8]
000052  4628              MOV      r0,r5
000054  4790              BLX      r2
000056  1c40              ADDS     r0,r0,#1
000058  d004              BEQ      |L13.100|
00005a  1c64              ADDS     r4,r4,#1
00005c  1e76              SUBS     r6,r6,#1
                  |L13.94|
00005e  2e00              CMP      r6,#0
000060  d1f4              BNE      |L13.76|
000062  e045              B        |L13.240|
                  |L13.100|
000064  2100              MOVS     r1,#0
000066  43c9              MVNS     r1,r1
000068  9800              LDR      r0,[sp,#0]
00006a  f7fffffe          BL       rt_completion_wait
00006e  e7f6              B        |L13.94|
                  |L13.112|
000070  0500              LSLS     r0,r0,#20             ;597
000072  d521              BPL      |L13.184|
000074  6d2f              LDR      r7,[r5,#0x50]         ;597
000076  2300              MOVS     r3,#0                 ;597
000078  43db              MVNS     r3,r3                 ;597
00007a  4632              MOV      r2,r6                 ;597
00007c  4621              MOV      r1,r4                 ;597
00007e  1d38              ADDS     r0,r7,#4              ;597
000080  f7fffffe          BL       rt_data_queue_push
000084  2800              CMP      r0,#0                 ;597
000086  d002              BEQ      |L13.142|
000088  f7fffffe          BL       rt_set_errno
00008c  e7cb              B        |L13.38|
                  |L13.142|
00008e  f7fffffe          BL       rt_hw_interrupt_disable
000092  6839              LDR      r1,[r7,#0]            ;597
000094  2901              CMP      r1,#1                 ;597
000096  d00b              BEQ      |L13.176|
000098  2101              MOVS     r1,#1                 ;597
00009a  6039              STR      r1,[r7,#0]            ;597
00009c  f7fffffe          BL       rt_hw_interrupt_enable
0000a0  6c28              LDR      r0,[r5,#0x40]         ;597
0000a2  2302              MOVS     r3,#2                 ;597
0000a4  6907              LDR      r7,[r0,#0x10]         ;597
0000a6  4632              MOV      r2,r6                 ;597
0000a8  4621              MOV      r1,r4                 ;597
0000aa  4628              MOV      r0,r5                 ;597
0000ac  47b8              BLX      r7                    ;597
0000ae  e001              B        |L13.180|
                  |L13.176|
0000b0  f7fffffe          BL       rt_hw_interrupt_enable
                  |L13.180|
0000b4  4630              MOV      r0,r6                 ;597
0000b6  bdf8              POP      {r3-r7,pc}
                  |L13.184|
0000b8  2d00              CMP      r5,#0
0000ba  d105              BNE      |L13.200|
0000bc  490d              LDR      r1,|L13.244|
0000be  2245              MOVS     r2,#0x45
0000c0  39cb              SUBS     r1,r1,#0xcb
0000c2  4811              LDR      r0,|L13.264|
0000c4  f7fffffe          BL       rt_assert_handler
                  |L13.200|
0000c8  4637              MOV      r7,r6
                  |L13.202|
0000ca  7820              LDRB     r0,[r4,#0]
0000cc  280a              CMP      r0,#0xa
0000ce  d107              BNE      |L13.224|
0000d0  7e28              LDRB     r0,[r5,#0x18]
0000d2  0640              LSLS     r0,r0,#25
0000d4  d504              BPL      |L13.224|
0000d6  6c28              LDR      r0,[r5,#0x40]
0000d8  210d              MOVS     r1,#0xd
0000da  6882              LDR      r2,[r0,#8]
0000dc  4628              MOV      r0,r5
0000de  4790              BLX      r2
                  |L13.224|
0000e0  6c28              LDR      r0,[r5,#0x40]
0000e2  7821              LDRB     r1,[r4,#0]
0000e4  6882              LDR      r2,[r0,#8]
0000e6  4628              MOV      r0,r5
0000e8  4790              BLX      r2
0000ea  1c64              ADDS     r4,r4,#1
0000ec  1e76              SUBS     r6,r6,#1
0000ee  d1ec              BNE      |L13.202|
                  |L13.240|
0000f0  4638              MOV      r0,r7
0000f2  bdf8              POP      {r3-r7,pc}
;;;606    
                          ENDP

                  |L13.244|
                          DCD      ||.constdata||+0xdb
                  |L13.248|
0000f8  64657620          DCB      "dev != RT_NULL",0
0000fc  213d2052
000100  545f4e55
000104  4c4c00  
000107  00                DCB      0
                  |L13.264|
                          DCD      ||i.rt_serial_read||+0x84
                  |L13.268|
00010c  74782021          DCB      "tx != RT_NULL",0
000110  3d205254
000114  5f4e554c
000118  4c00    
00011a  00                DCB      0
00011b  00                DCB      0

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  5f736572          DCB      0x5f,0x73,0x65,0x72
000004  69616c5f          DCB      0x69,0x61,0x6c,0x5f
000008  706f6c6c          DCB      0x70,0x6f,0x6c,0x6c
00000c  5f727800          DCB      0x5f,0x72,0x78,0x00
                  |symbol_number.44|
000010  5f736572          DCB      0x5f,0x73,0x65,0x72
000014  69616c5f          DCB      0x69,0x61,0x6c,0x5f
000018  706f6c6c          DCB      0x70,0x6f,0x6c,0x6c
00001c  5f747800          DCB      0x5f,0x74,0x78,0x00
                  |symbol_number.45|
000020  5f736572          DCB      0x5f,0x73,0x65,0x72
000024  69616c5f          DCB      0x69,0x61,0x6c,0x5f
000028  696e745f          DCB      0x69,0x6e,0x74,0x5f
00002c  727800            DCB      0x72,0x78,0x00
                  |symbol_number.46|
00002f  5f                DCB      0x5f
000030  73657269          DCB      0x73,0x65,0x72,0x69
000034  616c5f69          DCB      0x61,0x6c,0x5f,0x69
000038  6e745f74          DCB      0x6e,0x74,0x5f,0x74
00003c  7800              DCB      0x78,0x00
                  |symbol_number.47|
00003e  7274              DCB      0x72,0x74
000040  5f646d61          DCB      0x5f,0x64,0x6d,0x61
000044  5f63616c          DCB      0x5f,0x63,0x61,0x6c
000048  635f7265          DCB      0x63,0x5f,0x72,0x65
00004c  63766564          DCB      0x63,0x76,0x65,0x64
000050  5f6c656e          DCB      0x5f,0x6c,0x65,0x6e
000054  00                DCB      0x00
                  |symbol_number.48|
000055  72745f            DCB      0x72,0x74,0x5f
000058  646d615f          DCB      0x64,0x6d,0x61,0x5f
00005c  72656376          DCB      0x72,0x65,0x63,0x76
000060  5f757064          DCB      0x5f,0x75,0x70,0x64
000064  6174655f          DCB      0x61,0x74,0x65,0x5f
000068  6765745f          DCB      0x67,0x65,0x74,0x5f
00006c  696e6465          DCB      0x69,0x6e,0x64,0x65
000070  7800              DCB      0x78,0x00
                  |symbol_number.49|
000072  7274              DCB      0x72,0x74
000074  5f646d61          DCB      0x5f,0x64,0x6d,0x61
000078  5f726563          DCB      0x5f,0x72,0x65,0x63
00007c  765f7570          DCB      0x76,0x5f,0x75,0x70
000080  64617465          DCB      0x64,0x61,0x74,0x65
000084  5f707574          DCB      0x5f,0x70,0x75,0x74
000088  5f696e64          DCB      0x5f,0x69,0x6e,0x64
00008c  657800            DCB      0x65,0x78,0x00
                  |symbol_number.50|
00008f  5f                DCB      0x5f
000090  73657269          DCB      0x73,0x65,0x72,0x69
000094  616c5f64          DCB      0x61,0x6c,0x5f,0x64
000098  6d615f72          DCB      0x6d,0x61,0x5f,0x72
00009c  7800              DCB      0x78,0x00
                  |symbol_number.51|
00009e  7274              DCB      0x72,0x74
0000a0  5f736572          DCB      0x5f,0x73,0x65,0x72
0000a4  69616c5f          DCB      0x69,0x61,0x6c,0x5f
0000a8  696e6974          DCB      0x69,0x6e,0x69,0x74
0000ac  00                DCB      0x00
                  |symbol_number.52|
0000ad  72745f            DCB      0x72,0x74,0x5f
0000b0  73657269          DCB      0x73,0x65,0x72,0x69
0000b4  616c5f6f          DCB      0x61,0x6c,0x5f,0x6f
0000b8  70656e00          DCB      0x70,0x65,0x6e,0x00
                  |symbol_number.53|
0000bc  72745f73          DCB      0x72,0x74,0x5f,0x73
0000c0  65726961          DCB      0x65,0x72,0x69,0x61
0000c4  6c5f636c          DCB      0x6c,0x5f,0x63,0x6c
0000c8  6f736500          DCB      0x6f,0x73,0x65,0x00
                  |symbol_number.54|
0000cc  72745f73          DCB      0x72,0x74,0x5f,0x73
0000d0  65726961          DCB      0x65,0x72,0x69,0x61
0000d4  6c5f7265          DCB      0x6c,0x5f,0x72,0x65
0000d8  616400            DCB      0x61,0x64,0x00
                  |symbol_number.55|
0000db  72                DCB      0x72
0000dc  745f7365          DCB      0x74,0x5f,0x73,0x65
0000e0  7269616c          DCB      0x72,0x69,0x61,0x6c
0000e4  5f777269          DCB      0x5f,0x77,0x72,0x69
0000e8  746500            DCB      0x74,0x65,0x00
                  |symbol_number.56|
0000eb  72                DCB      0x72
0000ec  745f7365          DCB      0x74,0x5f,0x73,0x65
0000f0  7269616c          DCB      0x72,0x69,0x61,0x6c
0000f4  5f636f6e          DCB      0x5f,0x63,0x6f,0x6e
0000f8  74726f6c          DCB      0x74,0x72,0x6f,0x6c
0000fc  00                DCB      0x00
                  |symbol_number.57|
0000fd  72745f            DCB      0x72,0x74,0x5f
000100  68775f73          DCB      0x68,0x77,0x5f,0x73
000104  65726961          DCB      0x65,0x72,0x69,0x61
000108  6c5f7265          DCB      0x6c,0x5f,0x72,0x65
00010c  67697374          DCB      0x67,0x69,0x73,0x74
000110  657200            DCB      0x65,0x72,0x00
                  |symbol_number.58|
000113  72                DCB      0x72
000114  745f6877          DCB      0x74,0x5f,0x68,0x77
000118  5f736572          DCB      0x5f,0x73,0x65,0x72
00011c  69616c5f          DCB      0x69,0x61,0x6c,0x5f
000120  69737200          DCB      0x69,0x73,0x72,0x00
