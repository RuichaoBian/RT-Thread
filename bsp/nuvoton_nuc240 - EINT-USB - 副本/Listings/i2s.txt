; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\i2s.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\i2s.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 -DRT_DEBUG --omf_browse=.\objects\i2s.crf Libraries\StdDriver\src\i2s.c]
                          THUMB

                          AREA ||i.I2S_Close||, CODE, READONLY, ALIGN=1

                  I2S_Close PROC
;;;123      */
;;;124    void I2S_Close(I2S_T *i2s)
000000  6801              LDR      r1,[r0,#0]
;;;125    {
;;;126        i2s->CON &= ~I2S_CON_I2SEN_Msk;
000002  0849              LSRS     r1,r1,#1
000004  0049              LSLS     r1,r1,#1
000006  6001              STR      r1,[r0,#0]
;;;127    }
000008  4770              BX       lr
;;;128    
                          ENDP


                          AREA ||i.I2S_DisableInt||, CODE, READONLY, ALIGN=1

                  I2S_DisableInt PROC
;;;149      */
;;;150    void I2S_DisableInt(I2S_T *i2s, uint32_t u32Mask)
000000  6882              LDR      r2,[r0,#8]
;;;151    {
;;;152        i2s->IE &= ~u32Mask;
000002  438a              BICS     r2,r2,r1
000004  6082              STR      r2,[r0,#8]
;;;153    }
000006  4770              BX       lr
;;;154    
                          ENDP


                          AREA ||i.I2S_DisableMCLK||, CODE, READONLY, ALIGN=1

                  I2S_DisableMCLK PROC
;;;191      */
;;;192    void I2S_DisableMCLK(I2S_T *i2s)
000000  6801              LDR      r1,[r0,#0]
;;;193    {
;;;194        i2s->CON &= ~I2S_CON_MCLKEN_Msk;
000002  2201              MOVS     r2,#1
000004  03d2              LSLS     r2,r2,#15
000006  4391              BICS     r1,r1,r2
000008  6001              STR      r1,[r0,#0]
;;;195    }
00000a  4770              BX       lr
;;;196    
                          ENDP


                          AREA ||i.I2S_EnableInt||, CODE, READONLY, ALIGN=1

                  I2S_EnableInt PROC
;;;136      */
;;;137    void I2S_EnableInt(I2S_T *i2s, uint32_t u32Mask)
000000  6882              LDR      r2,[r0,#8]
;;;138    {
;;;139        i2s->IE |= u32Mask;
000002  430a              ORRS     r2,r2,r1
000004  6082              STR      r2,[r0,#8]
;;;140    }
000006  4770              BX       lr
;;;141    
                          ENDP


                          AREA ||i.I2S_EnableMCLK||, CODE, READONLY, ALIGN=1

                  I2S_EnableMCLK PROC
;;;162      */
;;;163    uint32_t I2S_EnableMCLK(I2S_T *i2s, uint32_t u32BusClock)
000000  b570              PUSH     {r4-r6,lr}
;;;164    {
000002  460e              MOV      r6,r1
000004  4604              MOV      r4,r0
;;;165        uint8_t u8Divider;
;;;166        uint32_t u32SrcClk, u32Reg;
;;;167    
;;;168        u32SrcClk = I2S_GetSourceClockFreq(i2s);
000006  f7fffffe          BL       I2S_GetSourceClockFreq
00000a  4605              MOV      r5,r0
;;;169        if(u32BusClock == u32SrcClk)
00000c  42ae              CMP      r6,r5
00000e  d101              BNE      |L5.20|
;;;170            u8Divider = 0;
000010  2000              MOVS     r0,#0
000012  e004              B        |L5.30|
                  |L5.20|
;;;171        else
;;;172            u8Divider = (u32SrcClk / u32BusClock) >> 1;
000014  4631              MOV      r1,r6
000016  f7fffffe          BL       __aeabi_uidivmod
00001a  05c0              LSLS     r0,r0,#23
00001c  0e00              LSRS     r0,r0,#24
                  |L5.30|
;;;173    
;;;174        i2s->CLKDIV = (i2s->CLKDIV & ~I2S_CLKDIV_MCLK_DIV_Msk) | u8Divider;
00001e  6861              LDR      r1,[r4,#4]
000020  08c9              LSRS     r1,r1,#3
000022  00c9              LSLS     r1,r1,#3
000024  4301              ORRS     r1,r1,r0
000026  6061              STR      r1,[r4,#4]
;;;175    
;;;176        i2s->CON |= I2S_CON_MCLKEN_Msk;
000028  6820              LDR      r0,[r4,#0]
00002a  2101              MOVS     r1,#1
00002c  03c9              LSLS     r1,r1,#15
00002e  4308              ORRS     r0,r0,r1
000030  6020              STR      r0,[r4,#0]
;;;177    
;;;178        u32Reg = i2s->CLKDIV & I2S_CLKDIV_MCLK_DIV_Msk;
000032  6860              LDR      r0,[r4,#4]
000034  0741              LSLS     r1,r0,#29
000036  0f49              LSRS     r1,r1,#29
;;;179    
;;;180        if(u32Reg == 0)
000038  d003              BEQ      |L5.66|
;;;181            return u32SrcClk;
;;;182        else
;;;183            return ((u32SrcClk >> 1) / u32Reg);
00003a  0868              LSRS     r0,r5,#1
00003c  f7fffffe          BL       __aeabi_uidivmod
;;;184    }
000040  bd70              POP      {r4-r6,pc}
                  |L5.66|
000042  4628              MOV      r0,r5                 ;181
000044  bd70              POP      {r4-r6,pc}
;;;185    
                          ENDP


                          AREA ||i.I2S_GetSourceClockFreq||, CODE, READONLY, ALIGN=2

                  I2S_GetSourceClockFreq PROC
;;;32       */
;;;33     static uint32_t I2S_GetSourceClockFreq(I2S_T *i2s)
000000  b508              PUSH     {r3,lr}
;;;34     {
;;;35         uint32_t u32Freq, u32ClkSrcSel;
;;;36     
;;;37         u32ClkSrcSel = CLK->CLKSEL2 & CLK_CLKSEL2_I2S_S_Msk;
000002  4b18              LDR      r3,|L6.100|
000004  69d8              LDR      r0,[r3,#0x1c]
000006  0781              LSLS     r1,r0,#30
;;;38     
;;;39         switch(u32ClkSrcSel)
;;;40         {
;;;41             case CLK_CLKSEL2_I2S_S_HXT:
;;;42                 u32Freq = __HXT;
000008  4817              LDR      r0,|L6.104|
00000a  0f89              LSRS     r1,r1,#30             ;37
00000c  d005              BEQ      |L6.26|
00000e  4a17              LDR      r2,|L6.108|
000010  2901              CMP      r1,#1                 ;39
000012  d003              BEQ      |L6.28|
000014  2902              CMP      r1,#2                 ;39
000016  d021              BEQ      |L6.92|
;;;43                 break;
;;;44     
;;;45             case CLK_CLKSEL2_I2S_S_PLL:
;;;46                 u32Freq = CLK_GetPLLClockFreq();
;;;47                 break;
;;;48     
;;;49             case CLK_CLKSEL2_I2S_S_HIRC:
;;;50                 u32Freq = __HIRC;
;;;51                 break;
;;;52     
;;;53             case CLK_CLKSEL2_I2S_S_HCLK:
;;;54                 u32Freq = SystemCoreClock;
;;;55                 break;
;;;56     
;;;57             default:
;;;58                 u32Freq = __HIRC;
000018  4610              MOV      r0,r2
                  |L6.26|
;;;59                 break;
;;;60         }
;;;61     
;;;62         return u32Freq;
;;;63     }
00001a  bd08              POP      {r3,pc}
                  |L6.28|
00001c  a114              ADR      r1,|L6.112|
00001e  6809              LDR      r1,[r1,#0]
000020  9100              STR      r1,[sp,#0]
000022  6a19              LDR      r1,[r3,#0x20]
000024  2305              MOVS     r3,#5
000026  041b              LSLS     r3,r3,#16
000028  4219              TST      r1,r3
00002a  d001              BEQ      |L6.48|
00002c  2000              MOVS     r0,#0
                  |L6.46|
00002e  bd08              POP      {r3,pc}
                  |L6.48|
000030  030b              LSLS     r3,r1,#12
000032  d500              BPL      |L6.54|
000034  4610              MOV      r0,r2
                  |L6.54|
000036  038a              LSLS     r2,r1,#14
000038  d4f9              BMI      |L6.46|
00003a  040a              LSLS     r2,r1,#16
00003c  0f92              LSRS     r2,r2,#30
00003e  466b              MOV      r3,sp
000040  5c9b              LDRB     r3,[r3,r2]
000042  05ca              LSLS     r2,r1,#23
000044  0489              LSLS     r1,r1,#18
000046  0dd2              LSRS     r2,r2,#23
000048  0ec9              LSRS     r1,r1,#27
00004a  1c89              ADDS     r1,r1,#2
00004c  0880              LSRS     r0,r0,#2
00004e  1c92              ADDS     r2,r2,#2
000050  4359              MULS     r1,r3,r1
000052  4350              MULS     r0,r2,r0
000054  f7fffffe          BL       __aeabi_uidivmod
000058  0080              LSLS     r0,r0,#2
00005a  bd08              POP      {r3,pc}
                  |L6.92|
00005c  4805              LDR      r0,|L6.116|
00005e  6800              LDR      r0,[r0,#0]            ;54  ; SystemCoreClock
000060  bd08              POP      {r3,pc}
;;;64     
                          ENDP

000062  0000              DCW      0x0000
                  |L6.100|
                          DCD      0x50000200
                  |L6.104|
                          DCD      0x00b71b00
                  |L6.108|
                          DCD      0x01518000
                  |L6.112|
000070  01020204          DCB      1,2,2,4
                  |L6.116|
                          DCD      SystemCoreClock

                          AREA ||i.I2S_Open||, CODE, READONLY, ALIGN=1

                  I2S_Open PROC
;;;87       */
;;;88     uint32_t I2S_Open(I2S_T *i2s, uint32_t u32MasterSlave, uint32_t u32SampleRate, uint32_t u32WordWidth, uint32_t u32Channels, uint32_t u32DataFormat)
000000  b5f8              PUSH     {r3-r7,lr}
;;;89     {
000002  4604              MOV      r4,r0
;;;90         uint8_t u8Divider;
;;;91         uint32_t u32BitRate, u32SrcClk;
;;;92     
;;;93         /* Reset I2S */
;;;94         SYS->IPRSTC2 |= SYS_IPRSTC2_I2S_RST_Msk;
000004  2005              MOVS     r0,#5
000006  4617              MOV      r7,r2                 ;89
000008  0700              LSLS     r0,r0,#28
00000a  9a06              LDR      r2,[sp,#0x18]
00000c  68c6              LDR      r6,[r0,#0xc]
00000e  461d              MOV      r5,r3                 ;89
000010  2301              MOVS     r3,#1
000012  075b              LSLS     r3,r3,#29
000014  431e              ORRS     r6,r6,r3
000016  60c6              STR      r6,[r0,#0xc]
;;;95         SYS->IPRSTC2 &= ~SYS_IPRSTC2_I2S_RST_Msk;
000018  68c6              LDR      r6,[r0,#0xc]
00001a  439e              BICS     r6,r6,r3
00001c  60c6              STR      r6,[r0,#0xc]
;;;96     
;;;97         /* Configure I2S controller according to input parameters. */
;;;98         i2s->CON = u32MasterSlave | u32WordWidth | u32Channels | u32DataFormat | I2S_FIFO_TX_LEVEL_WORD_4 | I2S_FIFO_RX_LEVEL_WORD_4;
00001e  4329              ORRS     r1,r1,r5
000020  9807              LDR      r0,[sp,#0x1c]
000022  4311              ORRS     r1,r1,r2
000024  4301              ORRS     r1,r1,r0
000026  2007              MOVS     r0,#7
000028  02c0              LSLS     r0,r0,#11
00002a  4301              ORRS     r1,r1,r0
00002c  6021              STR      r1,[r4,#0]
;;;99     
;;;100        /* Get I2S source clock frequency */
;;;101        u32SrcClk = I2S_GetSourceClockFreq(i2s);
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       I2S_GetSourceClockFreq
000034  4606              MOV      r6,r0
;;;102    
;;;103        /* Calculate bit clock rate */
;;;104        u32BitRate = u32SampleRate * (((u32WordWidth >> 4) & 0x3) + 1) * 16;
000036  06a8              LSLS     r0,r5,#26
000038  0f85              LSRS     r5,r0,#30
00003a  1c68              ADDS     r0,r5,#1
00003c  4378              MULS     r0,r7,r0
00003e  0101              LSLS     r1,r0,#4
;;;105        u8Divider = ((u32SrcClk / u32BitRate) >> 1) - 1;
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       __aeabi_uidivmod
000046  0840              LSRS     r0,r0,#1
000048  1e40              SUBS     r0,r0,#1
;;;106        i2s->CLKDIV = (i2s->CLKDIV & ~I2S_CLKDIV_BCLK_DIV_Msk) | (u8Divider << 8);
00004a  6861              LDR      r1,[r4,#4]
00004c  b2c0              UXTB     r0,r0                 ;105
00004e  22ff              MOVS     r2,#0xff
000050  0212              LSLS     r2,r2,#8
000052  4391              BICS     r1,r1,r2
000054  0202              LSLS     r2,r0,#8
000056  4311              ORRS     r1,r1,r2
000058  6061              STR      r1,[r4,#4]
;;;107    
;;;108        /* Calculate real sample rate */
;;;109        u32BitRate = u32SrcClk / ((u8Divider + 1) * 2);
00005a  0041              LSLS     r1,r0,#1
00005c  4630              MOV      r0,r6
00005e  1c89              ADDS     r1,r1,#2
000060  f7fffffe          BL       __aeabi_uidivmod
;;;110        u32SampleRate = u32BitRate / ((((u32WordWidth >> 4) & 0x3) + 1) * 16);
000064  0129              LSLS     r1,r5,#4
000066  3110              ADDS     r1,r1,#0x10
000068  f7fffffe          BL       __aeabi_uidivmod
;;;111    
;;;112        /* Enable TX, RX and I2S controller */
;;;113        i2s->CON |= (I2S_CON_RXEN_Msk | I2S_CON_TXEN_Msk | I2S_CON_I2SEN_Msk);
00006c  6821              LDR      r1,[r4,#0]
00006e  2207              MOVS     r2,#7
000070  4311              ORRS     r1,r1,r2
000072  6021              STR      r1,[r4,#0]
;;;114    
;;;115        return u32SampleRate;
;;;116    }
000074  bdf8              POP      {r3-r7,pc}
;;;117    
                          ENDP


                          AREA ||i.I2S_SetFIFO||, CODE, READONLY, ALIGN=1

                  I2S_SetFIFO PROC
;;;204      */
;;;205    void I2S_SetFIFO(I2S_T *i2s, uint32_t u32TxThreshold, uint32_t u32RxThreshold)
000000  b510              PUSH     {r4,lr}
;;;206    {
;;;207        i2s->CON = (i2s->CON & ~(I2S_CON_TXTH_Msk | I2S_CON_RXTH_Msk)) |
000002  6803              LDR      r3,[r0,#0]
000004  243f              MOVS     r4,#0x3f
000006  0264              LSLS     r4,r4,#9
000008  43a3              BICS     r3,r3,r4
00000a  0249              LSLS     r1,r1,#9
00000c  430b              ORRS     r3,r3,r1
00000e  0311              LSLS     r1,r2,#12
000010  430b              ORRS     r3,r3,r1
000012  6003              STR      r3,[r0,#0]
;;;208                   (u32TxThreshold << I2S_CON_TXTH_Pos) |
;;;209                   (u32RxThreshold << I2S_CON_RXTH_Pos);
;;;210    }
000014  bd10              POP      {r4,pc}
;;;211    
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\StdDriver\\src\\i2s.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_i2s_c_I2S_Open____REV16|
#line 118 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_i2s_c_I2S_Open____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_i2s_c_I2S_Open____REVSH|
#line 132
|__asm___5_i2s_c_I2S_Open____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
