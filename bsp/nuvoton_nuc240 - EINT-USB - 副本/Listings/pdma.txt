; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\pdma.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\pdma.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 -DRT_DEBUG --omf_browse=.\objects\pdma.crf Libraries\StdDriver\src\pdma.c]
                          THUMB

                          AREA ||i.PDMA_Close||, CODE, READONLY, ALIGN=2

                  PDMA_Close PROC
;;;50      */
;;;51     void PDMA_Close(void)
000000  4901              LDR      r1,|L1.8|
;;;52     {
;;;53         PDMA_GCR->GCRCSR = 0;
000002  2000              MOVS     r0,#0
000004  6008              STR      r0,[r1,#0]
;;;54     }
000006  4770              BX       lr
;;;55     
                          ENDP

                  |L1.8|
                          DCD      0x50008f00

                          AREA ||i.PDMA_DisableInt||, CODE, READONLY, ALIGN=2

                  PDMA_DisableInt PROC
;;;267     */
;;;268    void PDMA_DisableInt(uint32_t u32Ch, uint32_t u32Mask)
000000  4a03              LDR      r2,|L2.16|
;;;269    {
;;;270        PDMA_T *pdma;
;;;271        pdma = (PDMA_T *)((uint32_t) PDMA0_BASE + (0x100 * u32Ch));
000002  0200              LSLS     r0,r0,#8
000004  1880              ADDS     r0,r0,r2
;;;272    
;;;273        pdma->IER &= ~u32Mask;
000006  6a02              LDR      r2,[r0,#0x20]
000008  438a              BICS     r2,r2,r1
00000a  6202              STR      r2,[r0,#0x20]
;;;274    }
00000c  4770              BX       lr
;;;275    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      0x50008000

                          AREA ||i.PDMA_EnableInt||, CODE, READONLY, ALIGN=2

                  PDMA_EnableInt PROC
;;;249     */
;;;250    void PDMA_EnableInt(uint32_t u32Ch, uint32_t u32Mask)
000000  4a03              LDR      r2,|L3.16|
;;;251    {
;;;252        PDMA_T *pdma;
;;;253        pdma = (PDMA_T *)((uint32_t) PDMA0_BASE + (0x100 * u32Ch));
000002  0200              LSLS     r0,r0,#8
000004  1880              ADDS     r0,r0,r2
;;;254    
;;;255        pdma->IER |= u32Mask;
000006  6a02              LDR      r2,[r0,#0x20]
000008  430a              ORRS     r2,r2,r1
00000a  6202              STR      r2,[r0,#0x20]
;;;256    }
00000c  4770              BX       lr
;;;257    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x50008000

                          AREA ||i.PDMA_Open||, CODE, READONLY, ALIGN=2

                  PDMA_Open PROC
;;;36      */
;;;37     void PDMA_Open(uint32_t u32Mask)
000000  4902              LDR      r1,|L4.12|
;;;38     {
;;;39         PDMA_GCR->GCRCSR |= (u32Mask << 8);
000002  680a              LDR      r2,[r1,#0]
000004  0200              LSLS     r0,r0,#8
000006  4302              ORRS     r2,r2,r0
000008  600a              STR      r2,[r1,#0]
;;;40     }
00000a  4770              BX       lr
;;;41     
                          ENDP

                  |L4.12|
                          DCD      0x50008f00

                          AREA ||i.PDMA_SetTransferAddr||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferAddr PROC
;;;110     */
;;;111    void PDMA_SetTransferAddr(uint32_t u32Ch, uint32_t u32SrcAddr, uint32_t u32SrcCtrl, uint32_t u32DstAddr, uint32_t u32DstCtrl)
000000  b530              PUSH     {r4,r5,lr}
;;;112    {
;;;113        PDMA_T *pdma;
;;;114        pdma = (PDMA_T *)((uint32_t) PDMA0_BASE + (0x100 * u32Ch));
000002  4d06              LDR      r5,|L5.28|
000004  0200              LSLS     r0,r0,#8
000006  1940              ADDS     r0,r0,r5
;;;115    
;;;116        pdma->SAR = u32SrcAddr;
000008  9c03              LDR      r4,[sp,#0xc]
00000a  6041              STR      r1,[r0,#4]
;;;117        pdma->DAR = u32DstAddr;
00000c  6083              STR      r3,[r0,#8]
;;;118        pdma->CSR = (pdma->CSR & ~(PDMA_CSR_SAD_SEL_Msk | PDMA_CSR_DAD_SEL_Msk)) | (u32SrcCtrl | u32DstCtrl);
00000e  6801              LDR      r1,[r0,#0]
000010  23f0              MOVS     r3,#0xf0
000012  4399              BICS     r1,r1,r3
000014  4322              ORRS     r2,r2,r4
000016  4311              ORRS     r1,r1,r2
000018  6001              STR      r1,[r0,#0]
;;;119    }
00001a  bd30              POP      {r4,r5,pc}
;;;120    
                          ENDP

                  |L5.28|
                          DCD      0x50008000

                          AREA ||i.PDMA_SetTransferCnt||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferCnt PROC
;;;69      */
;;;70     void PDMA_SetTransferCnt(uint32_t u32Ch, uint32_t u32Width, uint32_t u32TransCount)
000000  4b0c              LDR      r3,|L6.52|
;;;71     {
000002  b510              PUSH     {r4,lr}
;;;72         PDMA_T *pdma;
;;;73         pdma = (PDMA_T *)((uint32_t) PDMA0_BASE + (0x100 * u32Ch));
000004  0200              LSLS     r0,r0,#8
000006  18c0              ADDS     r0,r0,r3
;;;74         pdma->CSR = (pdma->CSR & ~PDMA_CSR_APB_TWS_Msk) | u32Width;
000008  6803              LDR      r3,[r0,#0]
00000a  2403              MOVS     r4,#3
00000c  04e4              LSLS     r4,r4,#19
00000e  43a3              BICS     r3,r3,r4
000010  430b              ORRS     r3,r3,r1
000012  6003              STR      r3,[r0,#0]
;;;75         switch(u32Width)
000014  2900              CMP      r1,#0
000016  d008              BEQ      |L6.42|
000018  2301              MOVS     r3,#1
00001a  04db              LSLS     r3,r3,#19
00001c  1ac9              SUBS     r1,r1,r3
00001e  d006              BEQ      |L6.46|
000020  4299              CMP      r1,r3
000022  d101              BNE      |L6.40|
;;;76         {
;;;77             case PDMA_WIDTH_32:
;;;78                 pdma->BCR = (u32TransCount << 2);
;;;79                 break;
;;;80     
;;;81             case PDMA_WIDTH_8:
;;;82                 pdma->BCR = u32TransCount;
;;;83                 break;
;;;84     
;;;85             case PDMA_WIDTH_16:
;;;86                 pdma->BCR = (u32TransCount << 1);
000024  0051              LSLS     r1,r2,#1
                  |L6.38|
000026  60c1              STR      r1,[r0,#0xc]
                  |L6.40|
;;;87                 break;
;;;88     
;;;89             default:
;;;90                 ;
;;;91         }
;;;92     }
000028  bd10              POP      {r4,pc}
                  |L6.42|
00002a  0091              LSLS     r1,r2,#2              ;78
00002c  e7fb              B        |L6.38|
                  |L6.46|
00002e  60c2              STR      r2,[r0,#0xc]          ;82
000030  bd10              POP      {r4,pc}
;;;93     
                          ENDP

000032  0000              DCW      0x0000
                  |L6.52|
                          DCD      0x50008000

                          AREA ||i.PDMA_SetTransferMode||, CODE, READONLY, ALIGN=2

                  PDMA_SetTransferMode PROC
;;;148     */
;;;149    void PDMA_SetTransferMode(uint32_t u32Ch, uint32_t u32Peripheral, uint32_t u32ScatterEn, uint32_t u32DescAddr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;150    {
;;;151        uint32_t u32Index = 0;
;;;152        PDMA_T *pdma;
;;;153        pdma = (PDMA_T *)((uint32_t) PDMA0_BASE + (0x100 * u32Ch));
000002  0203              LSLS     r3,r0,#8
000004  4c4d              LDR      r4,|L7.316|
000006  9300              STR      r3,[sp,#0]
000008  191b              ADDS     r3,r3,r4
00000a  2200              MOVS     r2,#0                 ;151
;;;154    
;;;155        if(u32Peripheral > PDMA_ADC) /* Memory-to-Memory */
;;;156            pdma->CSR = (pdma->CSR & ~(PDMA_CSR_MODE_SEL_Msk));
00000c  240c              MOVS     r4,#0xc
00000e  290e              CMP      r1,#0xe               ;155
000010  d902              BLS      |L7.24|
000012  681d              LDR      r5,[r3,#0]
000014  43a5              BICS     r5,r5,r4
000016  e007              B        |L7.40|
                  |L7.24|
;;;157        else if(u32Peripheral > PDMA_I2S_TX) /* Peripheral-to-Memory */
;;;158            pdma->CSR = (pdma->CSR & ~(PDMA_CSR_MODE_SEL_Msk) | (0x1 << PDMA_CSR_MODE_SEL_Pos));
;;;159        else /* Memory-to-Peripheral */
;;;160            pdma->CSR = (pdma->CSR & ~(PDMA_CSR_MODE_SEL_Msk) | (0x2 << PDMA_CSR_MODE_SEL_Pos));
000018  681d              LDR      r5,[r3,#0]
00001a  2906              CMP      r1,#6                 ;157
00001c  d902              BLS      |L7.36|
00001e  43a5              BICS     r5,r5,r4              ;158
000020  1d2d              ADDS     r5,r5,#4              ;158
000022  e001              B        |L7.40|
                  |L7.36|
000024  43a5              BICS     r5,r5,r4
000026  3508              ADDS     r5,r5,#8
                  |L7.40|
000028  601d              STR      r5,[r3,#0]            ;158
;;;161    
;;;162        switch(u32Peripheral)
;;;163        {
;;;164            case 0:
;;;165                PDMA_GCR->PDSSR0 = (PDMA_GCR->PDSSR0 & ~PDMA_PDSSR0_SPI0_TXSEL_Msk) | (u32Ch << PDMA_PDSSR0_SPI0_TXSEL_Pos);
00002a  0105              LSLS     r5,r0,#4
;;;166                break;
;;;167            case 1:
;;;168                PDMA_GCR->PDSSR0 = (PDMA_GCR->PDSSR0 & ~PDMA_PDSSR0_SPI1_TXSEL_Msk) | (u32Ch << PDMA_PDSSR0_SPI1_TXSEL_Pos);
00002c  0307              LSLS     r7,r0,#12
;;;169                break;
;;;170            case 2:
;;;171                PDMA_GCR->PDSSR0 = (PDMA_GCR->PDSSR0 & ~PDMA_PDSSR0_SPI2_TXSEL_Msk) | (u32Ch << PDMA_PDSSR0_SPI2_TXSEL_Pos);
;;;172                break;
;;;173            case 3:
;;;174                PDMA_GCR->PDSSR0 = (PDMA_GCR->PDSSR0 & ~PDMA_PDSSR0_SPI3_TXSEL_Msk) | (u32Ch << PDMA_PDSSR0_SPI3_TXSEL_Pos);
;;;175                break;
;;;176            case 4:
;;;177                PDMA_GCR->PDSSR1 = (PDMA_GCR->PDSSR1 & ~PDMA_PDSSR1_UART0_TXSEL_Msk) | (u32Ch << PDMA_PDSSR1_UART0_TXSEL_Pos);
;;;178                break;
;;;179            case 5:
;;;180                PDMA_GCR->PDSSR1 = (PDMA_GCR->PDSSR1 & ~PDMA_PDSSR1_UART1_TXSEL_Msk) | (u32Ch << PDMA_PDSSR1_UART1_TXSEL_Pos);
;;;181                break;
;;;182            case 6:
;;;183                PDMA_GCR->PDSSR2 = (PDMA_GCR->PDSSR2 & ~PDMA_PDSSR2_I2S_TXSEL_Msk) | (u32Ch << PDMA_PDSSR2_I2S_TXSEL_Pos);
;;;184                break;
;;;185            case 7:
;;;186                PDMA_GCR->PDSSR0 = (PDMA_GCR->PDSSR0 & ~PDMA_PDSSR0_SPI0_RXSEL_Msk) | (u32Ch << PDMA_PDSSR0_SPI0_RXSEL_Pos);
;;;187                break;
;;;188            case 8:
;;;189                PDMA_GCR->PDSSR0 = (PDMA_GCR->PDSSR0 & ~PDMA_PDSSR0_SPI1_RXSEL_Msk) | (u32Ch << PDMA_PDSSR0_SPI1_RXSEL_Pos);
;;;190                break;
;;;191            case 9:
;;;192                PDMA_GCR->PDSSR0 = (PDMA_GCR->PDSSR0 & ~PDMA_PDSSR0_SPI2_RXSEL_Msk) | (u32Ch << PDMA_PDSSR0_SPI2_RXSEL_Pos);
;;;193                break;
;;;194            case 10:
;;;195                PDMA_GCR->PDSSR0 = (PDMA_GCR->PDSSR0 & ~PDMA_PDSSR0_SPI3_RXSEL_Msk) | (u32Ch << PDMA_PDSSR0_SPI3_RXSEL_Pos);
00002e  0606              LSLS     r6,r0,#24
000030  4c43              LDR      r4,|L7.320|
000032  000b              MOVS     r3,r1                 ;162
000034  f7fffffe          BL       __ARM_common_switch8
000038  0f090e14          DCB      0x0f,0x09,0x0e,0x14
00003c  1a1f242a          DCB      0x1a,0x1f,0x24,0x2a
000040  2f333a42          DCB      0x2f,0x33,0x3a,0x42
000044  494f565c          DCB      0x49,0x4f,0x56,0x5c
000048  6300              DCB      0x63,0x00
00004a  6860              LDR      r0,[r4,#4]            ;165
00004c  21f0              MOVS     r1,#0xf0              ;165
00004e  4388              BICS     r0,r0,r1              ;165
000050  4328              ORRS     r0,r0,r5              ;165
000052  e038              B        |L7.198|
000054  6861              LDR      r1,[r4,#4]            ;168
000056  200f              MOVS     r0,#0xf               ;168
000058  0300              LSLS     r0,r0,#12             ;168
00005a  4381              BICS     r1,r1,r0              ;168
00005c  4339              ORRS     r1,r1,r7              ;168
00005e  e02b              B        |L7.184|
000060  6861              LDR      r1,[r4,#4]            ;171
000062  220f              MOVS     r2,#0xf               ;171
000064  0512              LSLS     r2,r2,#20             ;171
000066  4391              BICS     r1,r1,r2              ;171
000068  0500              LSLS     r0,r0,#20             ;171
00006a  e024              B        |L7.182|
00006c  6861              LDR      r1,[r4,#4]            ;174
00006e  0109              LSLS     r1,r1,#4              ;174
000070  0909              LSRS     r1,r1,#4              ;174
000072  0700              LSLS     r0,r0,#28             ;174
000074  e01f              B        |L7.182|
000076  68a0              LDR      r0,[r4,#8]            ;177
000078  21f0              MOVS     r1,#0xf0              ;177
00007a  4388              BICS     r0,r0,r1              ;177
00007c  4328              ORRS     r0,r0,r5              ;177
00007e  e03c              B        |L7.250|
000080  68a0              LDR      r0,[r4,#8]            ;180
000082  210f              MOVS     r1,#0xf               ;180
000084  0309              LSLS     r1,r1,#12             ;180
000086  4388              BICS     r0,r0,r1              ;180
000088  4338              ORRS     r0,r0,r7              ;180
00008a  e036              B        |L7.250|
00008c  6921              LDR      r1,[r4,#0x10]         ;183
00008e  20f0              MOVS     r0,#0xf0              ;183
000090  4381              BICS     r1,r1,r0              ;183
000092  4329              ORRS     r1,r1,r5              ;183
000094  e02a              B        |L7.236|
000096  6861              LDR      r1,[r4,#4]            ;186
000098  0909              LSRS     r1,r1,#4              ;186
00009a  0109              LSLS     r1,r1,#4              ;186
00009c  e00b              B        |L7.182|
00009e  6860              LDR      r0,[r4,#4]            ;189
0000a0  210f              MOVS     r1,#0xf               ;189
0000a2  0209              LSLS     r1,r1,#8              ;189
0000a4  4388              BICS     r0,r0,r1              ;189
0000a6  9900              LDR      r1,[sp,#0]            ;189
0000a8  4308              ORRS     r0,r0,r1              ;189
0000aa  e00c              B        |L7.198|
0000ac  6861              LDR      r1,[r4,#4]            ;192
0000ae  220f              MOVS     r2,#0xf               ;192
0000b0  0412              LSLS     r2,r2,#16             ;192
0000b2  4391              BICS     r1,r1,r2              ;192
0000b4  0400              LSLS     r0,r0,#16             ;192
                  |L7.182|
0000b6  4301              ORRS     r1,r1,r0              ;192
                  |L7.184|
0000b8  6061              STR      r1,[r4,#4]            ;192
;;;196                break;
;;;197            case 11:
;;;198                PDMA_GCR->PDSSR1 = (PDMA_GCR->PDSSR1 & ~PDMA_PDSSR1_UART0_RXSEL_Msk) | (u32Ch << PDMA_PDSSR1_UART0_RXSEL_Pos);
;;;199                break;
;;;200            case 12:
;;;201                PDMA_GCR->PDSSR1 = (PDMA_GCR->PDSSR1 & ~PDMA_PDSSR1_UART1_RXSEL_Msk) | (u32Ch << PDMA_PDSSR1_UART1_RXSEL_Pos);
;;;202                break;
;;;203            case 13:
;;;204                PDMA_GCR->PDSSR2 = (PDMA_GCR->PDSSR2 & ~PDMA_PDSSR2_I2S_RXSEL_Msk) | (u32Ch << PDMA_PDSSR2_I2S_RXSEL_Pos);
;;;205                break;
;;;206            case 14:
;;;207                PDMA_GCR->PDSSR1 = (PDMA_GCR->PDSSR1 & ~PDMA_PDSSR1_ADC_RXSEL_Msk) | (u32Ch << PDMA_PDSSR1_ADC_RXSEL_Pos);
;;;208                break;
;;;209    
;;;210            default:/* select PDMA channel as memory to memory */
;;;211                for(u32Index = 0; u32Index < 8; u32Index++)
;;;212                {
;;;213                    if((PDMA_GCR->PDSSR0 & (0xF << (u32Index * 4))) == (u32Ch << (u32Index * 4)))
;;;214                        PDMA_GCR->PDSSR0 |= 0xF << (u32Index * 4);
;;;215                    if((PDMA_GCR->PDSSR1 & (0xF << (u32Index * 4))) == (u32Ch << (u32Index * 4)))
;;;216                        PDMA_GCR->PDSSR1 |= 0xF << (u32Index * 4);
;;;217                    if((PDMA_GCR->PDSSR2 & (0xF << (u32Index * 4))) == (u32Ch << (u32Index * 4)))
;;;218                        PDMA_GCR->PDSSR2 |= 0xF << (u32Index * 4);
;;;219                }
;;;220        }
;;;221    }
0000ba  bdf8              POP      {r3-r7,pc}
0000bc  6860              LDR      r0,[r4,#4]            ;195
0000be  210f              MOVS     r1,#0xf               ;195
0000c0  0609              LSLS     r1,r1,#24             ;195
0000c2  4388              BICS     r0,r0,r1              ;195
0000c4  4330              ORRS     r0,r0,r6              ;195
                  |L7.198|
0000c6  6060              STR      r0,[r4,#4]            ;195
0000c8  bdf8              POP      {r3-r7,pc}
0000ca  68a1              LDR      r1,[r4,#8]            ;198
0000cc  0909              LSRS     r1,r1,#4              ;198
0000ce  0109              LSLS     r1,r1,#4              ;198
0000d0  4301              ORRS     r1,r1,r0              ;198
0000d2  60a1              STR      r1,[r4,#8]            ;198
0000d4  bdf8              POP      {r3-r7,pc}
0000d6  68a0              LDR      r0,[r4,#8]            ;201
0000d8  210f              MOVS     r1,#0xf               ;201
0000da  0209              LSLS     r1,r1,#8              ;201
0000dc  4388              BICS     r0,r0,r1              ;201
0000de  9900              LDR      r1,[sp,#0]            ;201
0000e0  4308              ORRS     r0,r0,r1              ;201
0000e2  e00a              B        |L7.250|
0000e4  6921              LDR      r1,[r4,#0x10]         ;204
0000e6  0909              LSRS     r1,r1,#4              ;204
0000e8  0109              LSLS     r1,r1,#4              ;204
0000ea  4301              ORRS     r1,r1,r0              ;204
                  |L7.236|
0000ec  6121              STR      r1,[r4,#0x10]         ;204
0000ee  bdf8              POP      {r3-r7,pc}
0000f0  68a0              LDR      r0,[r4,#8]            ;207
0000f2  210f              MOVS     r1,#0xf               ;207
0000f4  0609              LSLS     r1,r1,#24             ;207
0000f6  4388              BICS     r0,r0,r1              ;207
0000f8  4330              ORRS     r0,r0,r6              ;207
                  |L7.250|
0000fa  60a0              STR      r0,[r4,#8]            ;207
0000fc  bdf8              POP      {r3-r7,pc}
0000fe  270f              MOVS     r7,#0xf               ;213
                  |L7.256|
000100  6865              LDR      r5,[r4,#4]            ;213
000102  0096              LSLS     r6,r2,#2              ;213
000104  4639              MOV      r1,r7                 ;213
000106  40b1              LSLS     r1,r1,r6              ;213
000108  4603              MOV      r3,r0                 ;213
00010a  400d              ANDS     r5,r5,r1              ;213
00010c  40b3              LSLS     r3,r3,r6              ;213
00010e  429d              CMP      r5,r3                 ;213
000110  d102              BNE      |L7.280|
000112  6865              LDR      r5,[r4,#4]            ;214
000114  430d              ORRS     r5,r5,r1              ;214
000116  6065              STR      r5,[r4,#4]            ;214
                  |L7.280|
000118  68a5              LDR      r5,[r4,#8]            ;215
00011a  400d              ANDS     r5,r5,r1              ;215
00011c  429d              CMP      r5,r3                 ;215
00011e  d102              BNE      |L7.294|
000120  68a5              LDR      r5,[r4,#8]            ;216
000122  430d              ORRS     r5,r5,r1              ;216
000124  60a5              STR      r5,[r4,#8]            ;216
                  |L7.294|
000126  6925              LDR      r5,[r4,#0x10]         ;217
000128  400d              ANDS     r5,r5,r1              ;217
00012a  429d              CMP      r5,r3                 ;217
00012c  d102              BNE      |L7.308|
00012e  6923              LDR      r3,[r4,#0x10]         ;218
000130  430b              ORRS     r3,r3,r1              ;218
000132  6123              STR      r3,[r4,#0x10]         ;218
                  |L7.308|
000134  1c52              ADDS     r2,r2,#1              ;218
000136  2a08              CMP      r2,#8                 ;211
000138  d3e2              BCC      |L7.256|
00013a  bdf8              POP      {r3-r7,pc}
;;;222    
                          ENDP

                  |L7.316|
                          DCD      0x50008000
                  |L7.320|
                          DCD      0x50008f00

                          AREA ||i.PDMA_Trigger||, CODE, READONLY, ALIGN=2

                  PDMA_Trigger PROC
;;;231     */
;;;232    void PDMA_Trigger(uint32_t u32Ch)
000000  4903              LDR      r1,|L8.16|
;;;233    {
;;;234        PDMA_T *pdma;
;;;235        pdma = (PDMA_T *)((uint32_t) PDMA0_BASE + (0x100 * u32Ch));
000002  0200              LSLS     r0,r0,#8
000004  1840              ADDS     r0,r0,r1
;;;236    
;;;237        pdma->CSR |= (PDMA_CSR_TRIG_EN_Msk | PDMA_CSR_PDMACEN_Msk);
000006  6801              LDR      r1,[r0,#0]
000008  4a02              LDR      r2,|L8.20|
00000a  4311              ORRS     r1,r1,r2
00000c  6001              STR      r1,[r0,#0]
;;;238    }
00000e  4770              BX       lr
;;;239    
                          ENDP

                  |L8.16|
                          DCD      0x50008000
                  |L8.20|
                          DCD      0x00800001

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L55.16|
00000e  461d              MOV      r5,r3
                  |L55.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "Libraries\\StdDriver\\src\\pdma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_4711ff23____REV16|
#line 118 ".\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_pdma_c_4711ff23____REV16| PROC
#line 119

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_pdma_c_4711ff23____REVSH|
#line 132
|__asm___6_pdma_c_4711ff23____REVSH| PROC
#line 133

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
