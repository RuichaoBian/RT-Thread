; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\portal.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\portal.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 -DRT_DEBUG --omf_browse=.\objects\portal.crf ..\..\components\drivers\src\portal.c]
                          THUMB

                          AREA ||i._portal_close||, CODE, READONLY, ALIGN=2

                  _portal_close PROC
;;;77     
;;;78     static rt_err_t _portal_close(rt_device_t dev)
000000  b510              PUSH     {r4,lr}
;;;79     {
000002  0004              MOVS     r4,r0
000004  d104              BNE      |L1.16|
;;;80         struct rt_portal_device *portal;
;;;81     
;;;82         RT_ASSERT(dev);
000006  2252              MOVS     r2,#0x52
000008  4905              LDR      r1,|L1.32|
00000a  a006              ADR      r0,|L1.36|
00000c  f7fffffe          BL       rt_assert_handler
                  |L1.16|
;;;83     
;;;84         portal = (struct rt_portal_device*)dev;
;;;85     
;;;86         rt_device_close(portal->write_dev);
000010  6c20              LDR      r0,[r4,#0x40]
000012  f7fffffe          BL       rt_device_close
;;;87         rt_device_close(portal->read_dev);
000016  6c60              LDR      r0,[r4,#0x44]
000018  f7fffffe          BL       rt_device_close
;;;88     
;;;89         return RT_EOK;
00001c  2000              MOVS     r0,#0
;;;90     }
00001e  bd10              POP      {r4,pc}
;;;91     
                          ENDP

                  |L1.32|
                          DCD      ||.constdata||+0x1a
                  |L1.36|
000024  64657600          DCB      "dev",0

                          AREA ||i._portal_init||, CODE, READONLY, ALIGN=2

                  _portal_init PROC
;;;30     
;;;31     static rt_err_t _portal_init(rt_device_t dev)
000000  b510              PUSH     {r4,lr}
;;;32     {
000002  0004              MOVS     r4,r0
000004  d104              BNE      |L2.16|
;;;33         rt_err_t err;
;;;34         struct rt_portal_device *portal;
;;;35     
;;;36         RT_ASSERT(dev);
000006  2224              MOVS     r2,#0x24
000008  4906              LDR      r1,|L2.36|
00000a  a007              ADR      r0,|L2.40|
00000c  f7fffffe          BL       rt_assert_handler
                  |L2.16|
;;;37     
;;;38         portal = (struct rt_portal_device*)dev;
;;;39     
;;;40         err = rt_device_init(portal->write_dev);
000010  6c20              LDR      r0,[r4,#0x40]
000012  f7fffffe          BL       rt_device_init
;;;41         if (err != RT_EOK)
000016  2800              CMP      r0,#0
000018  d102              BNE      |L2.32|
;;;42             return err;
;;;43     
;;;44         err = rt_device_init(portal->read_dev);
00001a  6c60              LDR      r0,[r4,#0x44]
00001c  f7fffffe          BL       rt_device_init
                  |L2.32|
;;;45     
;;;46         return err;
;;;47     }
000020  bd10              POP      {r4,pc}
;;;48     
                          ENDP

000022  0000              DCW      0x0000
                  |L2.36|
                          DCD      ||.constdata||
                  |L2.40|
000028  64657600          DCB      "dev",0

                          AREA ||i._portal_open||, CODE, READONLY, ALIGN=2

                  _portal_open PROC
;;;48     
;;;49     static rt_err_t _portal_open(rt_device_t dev, rt_uint16_t oflag)
000000  b570              PUSH     {r4-r6,lr}
;;;50     {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
000006  d104              BNE      |L3.18|
;;;51         rt_err_t err;
;;;52         struct rt_portal_device *portal;
;;;53     
;;;54         RT_ASSERT(dev);
000008  2236              MOVS     r2,#0x36
00000a  490d              LDR      r1,|L3.64|
00000c  a00d              ADR      r0,|L3.68|
00000e  f7fffffe          BL       rt_assert_handler
                  |L3.18|
;;;55     
;;;56         if (!oflag)
000012  2d00              CMP      r5,#0
000014  d011              BEQ      |L3.58|
;;;57             return -RT_ERROR;
;;;58     
;;;59         portal = (struct rt_portal_device*)dev;
;;;60     
;;;61         if (oflag & RT_DEVICE_OFLAG_RDONLY)
000016  07e8              LSLS     r0,r5,#31
000018  d005              BEQ      |L3.38|
;;;62         {
;;;63             err = rt_device_open(portal->read_dev, RT_DEVICE_OFLAG_RDONLY);
00001a  2101              MOVS     r1,#1
00001c  6c60              LDR      r0,[r4,#0x44]
00001e  f7fffffe          BL       rt_device_open
;;;64             if (err != RT_EOK)
000022  2800              CMP      r0,#0
000024  d108              BNE      |L3.56|
                  |L3.38|
;;;65                 return err;
;;;66         }
;;;67     
;;;68         if (oflag & RT_DEVICE_OFLAG_WRONLY)
000026  07a8              LSLS     r0,r5,#30
000028  d505              BPL      |L3.54|
;;;69         {
;;;70             err = rt_device_open(portal->write_dev, RT_DEVICE_OFLAG_WRONLY);
00002a  2102              MOVS     r1,#2
00002c  6c20              LDR      r0,[r4,#0x40]
00002e  f7fffffe          BL       rt_device_open
;;;71             if (err != RT_EOK)
000032  2800              CMP      r0,#0
000034  d100              BNE      |L3.56|
                  |L3.54|
;;;72                 return err;
;;;73         }
;;;74     
;;;75         return RT_EOK;
000036  2000              MOVS     r0,#0
                  |L3.56|
;;;76     }
000038  bd70              POP      {r4-r6,pc}
                  |L3.58|
00003a  2000              MOVS     r0,#0                 ;57
00003c  43c0              MVNS     r0,r0                 ;57
00003e  bd70              POP      {r4-r6,pc}
;;;77     
                          ENDP

                  |L3.64|
                          DCD      ||.constdata||+0xd
                  |L3.68|
000044  64657600          DCB      "dev",0

                          AREA ||i._portal_read||, CODE, READONLY, ALIGN=1

                  _portal_read PROC
;;;91     
;;;92     static rt_size_t _portal_read(rt_device_t dev,
000000  b510              PUSH     {r4,lr}
;;;93                                   rt_off_t pos,
;;;94                                   void *buffer,
;;;95                                   rt_size_t size)
;;;96     {
;;;97         return rt_device_read(PT_READ_DEV(dev),
000002  6c40              LDR      r0,[r0,#0x44]
000004  f7fffffe          BL       rt_device_read
;;;98                               pos, buffer, size);
;;;99     }
000008  bd10              POP      {r4,pc}
;;;100    
                          ENDP


                          AREA ||i._portal_rx_indicate||, CODE, READONLY, ALIGN=2

                  _portal_rx_indicate PROC
;;;109    
;;;110    static rt_err_t _portal_rx_indicate(rt_device_t dev, rt_size_t size)
000000  b570              PUSH     {r4-r6,lr}
;;;111    {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
000006  d002              BEQ      |L5.14|
;;;112        struct rt_pipe_device *pipe;
;;;113    
;;;114        RT_ASSERT(dev && dev->type == RT_Device_Class_Pipe);
000008  7d20              LDRB     r0,[r4,#0x14]
00000a  280f              CMP      r0,#0xf
00000c  d004              BEQ      |L5.24|
                  |L5.14|
00000e  2272              MOVS     r2,#0x72
000010  4906              LDR      r1,|L5.44|
000012  a007              ADR      r0,|L5.48|
000014  f7fffffe          BL       rt_assert_handler
                  |L5.24|
;;;115    
;;;116        pipe = (struct rt_pipe_device*)dev;
;;;117    
;;;118        if (pipe->read_portal->parent.rx_indicate)
000018  6e60              LDR      r0,[r4,#0x64]
00001a  69c2              LDR      r2,[r0,#0x1c]
00001c  2a00              CMP      r2,#0
00001e  d002              BEQ      |L5.38|
;;;119            return pipe->read_portal->parent.rx_indicate(
000020  4629              MOV      r1,r5
000022  4790              BLX      r2
;;;120                    (rt_device_t)pipe->read_portal, size);
;;;121    
;;;122        return -RT_ENOSYS;
;;;123    }
000024  bd70              POP      {r4-r6,pc}
                  |L5.38|
000026  2005              MOVS     r0,#5                 ;122
000028  43c0              MVNS     r0,r0                 ;122
00002a  bd70              POP      {r4-r6,pc}
;;;124    
                          ENDP

                  |L5.44|
                          DCD      ||.constdata||+0x28
                  |L5.48|
000030  64657620          DCB      "dev && dev->type == RT_Device_Class_Pipe",0
000034  26262064
000038  65762d3e
00003c  74797065
000040  203d3d20
000044  52545f44
000048  65766963
00004c  655f436c
000050  6173735f
000054  50697065
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i._portal_tx_complete||, CODE, READONLY, ALIGN=2

                  _portal_tx_complete PROC
;;;124    
;;;125    static rt_err_t _portal_tx_complete(rt_device_t dev, void *buf)
000000  b570              PUSH     {r4-r6,lr}
;;;126    {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
000006  d002              BEQ      |L6.14|
;;;127        struct rt_pipe_device *pipe;
;;;128    
;;;129        RT_ASSERT(dev && dev->type == RT_Device_Class_Pipe);
000008  7d20              LDRB     r0,[r4,#0x14]
00000a  280f              CMP      r0,#0xf
00000c  d004              BEQ      |L6.24|
                  |L6.14|
00000e  2281              MOVS     r2,#0x81
000010  4906              LDR      r1,|L6.44|
000012  a007              ADR      r0,|L6.48|
000014  f7fffffe          BL       rt_assert_handler
                  |L6.24|
;;;130    
;;;131        pipe = (struct rt_pipe_device*)dev;
;;;132    
;;;133        if (pipe->write_portal->parent.tx_complete)
000018  6e20              LDR      r0,[r4,#0x60]
00001a  6a02              LDR      r2,[r0,#0x20]
00001c  2a00              CMP      r2,#0
00001e  d002              BEQ      |L6.38|
;;;134            return pipe->write_portal->parent.tx_complete(
000020  4629              MOV      r1,r5
000022  4790              BLX      r2
;;;135                    (rt_device_t)pipe->write_portal, buf);
;;;136    
;;;137        return -RT_ENOSYS;
;;;138    }
000024  bd70              POP      {r4-r6,pc}
                  |L6.38|
000026  2005              MOVS     r0,#5                 ;137
000028  43c0              MVNS     r0,r0                 ;137
00002a  bd70              POP      {r4-r6,pc}
;;;139    
                          ENDP

                  |L6.44|
                          DCD      ||.constdata||+0x3c
                  |L6.48|
000030  64657620          DCB      "dev && dev->type == RT_Device_Class_Pipe",0
000034  26262064
000038  65762d3e
00003c  74797065
000040  203d3d20
000044  52545f44
000048  65766963
00004c  655f436c
000050  6173735f
000054  50697065
000058  00      
000059  00                DCB      0
00005a  00                DCB      0
00005b  00                DCB      0

                          AREA ||i._portal_write||, CODE, READONLY, ALIGN=1

                  _portal_write PROC
;;;100    
;;;101    static rt_size_t _portal_write(rt_device_t dev,
000000  b510              PUSH     {r4,lr}
;;;102                                   rt_off_t pos,
;;;103                                   const void *buffer,
;;;104                                   rt_size_t size)
;;;105    {
;;;106        return rt_device_write(PT_WRITE_DEV(dev),
000002  6c00              LDR      r0,[r0,#0x40]
000004  f7fffffe          BL       rt_device_write
;;;107                               pos, buffer, size);
;;;108    }
000008  bd10              POP      {r4,pc}
;;;109    
                          ENDP


                          AREA ||i.rt_portal_create||, CODE, READONLY, ALIGN=1

                  rt_portal_create PROC
;;;228    #ifdef RT_USING_HEAP
;;;229    rt_err_t rt_portal_create(const char *name,
000000  b570              PUSH     {r4-r6,lr}
;;;230                              const char *write_dev,
;;;231                              const char *read_dev)
;;;232    {
000002  460d              MOV      r5,r1
000004  4606              MOV      r6,r0
000006  4614              MOV      r4,r2
;;;233        struct rt_portal_device *portal;
;;;234    
;;;235        portal = (struct rt_portal_device*)rt_calloc(1, sizeof(*portal));
000008  2148              MOVS     r1,#0x48
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       rt_calloc
;;;236        if (portal == RT_NULL)
000010  2800              CMP      r0,#0
000012  d005              BEQ      |L8.32|
;;;237            return -RT_ENOMEM;
;;;238    
;;;239        return rt_portal_init(portal, name, write_dev, read_dev);
000014  4623              MOV      r3,r4
000016  462a              MOV      r2,r5
000018  4631              MOV      r1,r6
00001a  f7fffffe          BL       rt_portal_init
;;;240    }
00001e  bd70              POP      {r4-r6,pc}
                  |L8.32|
000020  2004              MOVS     r0,#4                 ;237
000022  43c0              MVNS     r0,r0                 ;237
000024  bd70              POP      {r4-r6,pc}
;;;241    RTM_EXPORT(rt_portal_create);
                          ENDP


                          AREA ||i.rt_portal_destroy||, CODE, READONLY, ALIGN=1

                  rt_portal_destroy PROC
;;;242    
;;;243    void rt_portal_destroy(struct rt_portal_device *portal)
000000  b510              PUSH     {r4,lr}
;;;244    {
000002  0004              MOVS     r4,r0
000004  d004              BEQ      |L9.16|
000006  f7fffffe          BL       rt_device_unregister
;;;245        if (portal == RT_NULL)
;;;246            return;
;;;247    
;;;248        rt_portal_detach(portal);
;;;249    
;;;250        rt_free(portal);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       rt_free
                  |L9.16|
;;;251    
;;;252        return;
;;;253    }
000010  bd10              POP      {r4,pc}
;;;254    RTM_EXPORT(rt_portal_destroy);
                          ENDP


                          AREA ||i.rt_portal_detach||, CODE, READONLY, ALIGN=1

                  rt_portal_detach PROC
;;;221     */
;;;222    rt_err_t rt_portal_detach(struct rt_portal_device *portal)
000000  b510              PUSH     {r4,lr}
;;;223    {
;;;224        return rt_device_unregister(&portal->parent);
000002  f7fffffe          BL       rt_device_unregister
;;;225    }
000006  bd10              POP      {r4,pc}
;;;226    RTM_EXPORT(rt_portal_detach);
                          ENDP


                          AREA ||i.rt_portal_init||, CODE, READONLY, ALIGN=2

                  rt_portal_init PROC
;;;169     */
;;;170    rt_err_t rt_portal_init(struct rt_portal_device *portal,
000000  b5ff              PUSH     {r0-r7,lr}
;;;171                            const char *portal_name,
;;;172                            const char *write_dev,
;;;173                            const char *read_dev)
;;;174    {
000002  b081              SUB      sp,sp,#4
000004  461f              MOV      r7,r3
000006  4615              MOV      r5,r2
000008  0004              MOVS     r4,r0
00000a  d104              BNE      |L11.22|
;;;175        rt_device_t dev;
;;;176    
;;;177        RT_ASSERT(portal);
00000c  22b1              MOVS     r2,#0xb1
00000e  4927              LDR      r1,|L11.172|
000010  a027              ADR      r0,|L11.176|
000012  f7fffffe          BL       rt_assert_handler
                  |L11.22|
;;;178    
;;;179        portal->parent.type        = RT_Device_Class_Portal;
000016  2010              MOVS     r0,#0x10
000018  7520              STRB     r0,[r4,#0x14]
;;;180        portal->parent.init        = _portal_init;
00001a  4827              LDR      r0,|L11.184|
;;;181        portal->parent.open        = _portal_open;
00001c  6260              STR      r0,[r4,#0x24]
00001e  4827              LDR      r0,|L11.188|
;;;182        portal->parent.close       = _portal_close;
000020  62a0              STR      r0,[r4,#0x28]
000022  4827              LDR      r0,|L11.192|
;;;183        portal->parent.write       = _portal_write;
000024  62e0              STR      r0,[r4,#0x2c]
000026  4827              LDR      r0,|L11.196|
;;;184        portal->parent.read        = _portal_read;
000028  6360              STR      r0,[r4,#0x34]
00002a  4827              LDR      r0,|L11.200|
;;;185        /* single control of the two devices makes no sense */
;;;186        portal->parent.control     = RT_NULL;
00002c  6320              STR      r0,[r4,#0x30]
00002e  2000              MOVS     r0,#0
;;;187    
;;;188        dev = rt_device_find(write_dev);
000030  63a0              STR      r0,[r4,#0x38]
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       rt_device_find
;;;189        if (dev == RT_NULL)
;;;190            return -RT_ENOSYS;
000038  4e24              LDR      r6,|L11.204|
00003a  0005              MOVS     r5,r0                 ;188
00003c  d02f              BEQ      |L11.158|
;;;191        RT_ASSERT(dev->type == RT_Device_Class_Pipe);
00003e  7d28              LDRB     r0,[r5,#0x14]
000040  280f              CMP      r0,#0xf
000042  d004              BEQ      |L11.78|
000044  22bf              MOVS     r2,#0xbf
000046  4919              LDR      r1,|L11.172|
000048  a021              ADR      r0,|L11.208|
00004a  f7fffffe          BL       rt_assert_handler
                  |L11.78|
;;;192        portal->write_dev = dev;
;;;193        rt_device_set_tx_complete(&portal->parent, dev->tx_complete);
00004e  6425              STR      r5,[r4,#0x40]
000050  4620              MOV      r0,r4
000052  6a29              LDR      r1,[r5,#0x20]
000054  f7fffffe          BL       rt_device_set_tx_complete
;;;194        rt_device_set_tx_complete(dev, _portal_tx_complete);
000058  4926              LDR      r1,|L11.244|
00005a  4628              MOV      r0,r5
00005c  f7fffffe          BL       rt_device_set_tx_complete
;;;195        ((struct rt_pipe_device*)dev)->write_portal = portal;
;;;196    
;;;197        dev = rt_device_find(read_dev);
000060  4638              MOV      r0,r7
000062  662c              STR      r4,[r5,#0x60]
000064  f7fffffe          BL       rt_device_find
000068  0005              MOVS     r5,r0
;;;198        if (dev == RT_NULL)
00006a  d01a              BEQ      |L11.162|
;;;199        {
;;;200            rt_device_set_tx_complete(dev, portal->parent.tx_complete);
;;;201            return -RT_ENOSYS;
;;;202        }
;;;203        RT_ASSERT(dev->type == RT_Device_Class_Pipe);
00006c  7d28              LDRB     r0,[r5,#0x14]
00006e  280f              CMP      r0,#0xf
000070  d004              BEQ      |L11.124|
000072  22cb              MOVS     r2,#0xcb
000074  490d              LDR      r1,|L11.172|
000076  a016              ADR      r0,|L11.208|
000078  f7fffffe          BL       rt_assert_handler
                  |L11.124|
;;;204        portal->read_dev = dev;
;;;205        rt_device_set_rx_indicate(&portal->parent, dev->rx_indicate);
00007c  6465              STR      r5,[r4,#0x44]
00007e  4620              MOV      r0,r4
000080  69e9              LDR      r1,[r5,#0x1c]
000082  f7fffffe          BL       rt_device_set_rx_indicate
;;;206        rt_device_set_rx_indicate(dev, _portal_rx_indicate);
000086  491c              LDR      r1,|L11.248|
000088  4628              MOV      r0,r5
00008a  f7fffffe          BL       rt_device_set_rx_indicate
;;;207        ((struct rt_pipe_device*)dev)->read_portal = portal;
;;;208    
;;;209        return rt_device_register(&(portal->parent),
00008e  666c              STR      r4,[r5,#0x64]
000090  2203              MOVS     r2,#3
000092  4620              MOV      r0,r4
000094  9902              LDR      r1,[sp,#8]
000096  f7fffffe          BL       rt_device_register
                  |L11.154|
;;;210                                  portal_name,
;;;211                                  RT_DEVICE_FLAG_RDWR);
;;;212    }
00009a  b005              ADD      sp,sp,#0x14
00009c  bdf0              POP      {r4-r7,pc}
                  |L11.158|
00009e  4630              MOV      r0,r6                 ;190
0000a0  e7fb              B        |L11.154|
                  |L11.162|
0000a2  6a21              LDR      r1,[r4,#0x20]         ;200
0000a4  f7fffffe          BL       rt_device_set_tx_complete
0000a8  e7f9              B        |L11.158|
;;;213    RTM_EXPORT(rt_portal_init);
                          ENDP

0000aa  0000              DCW      0x0000
                  |L11.172|
                          DCD      ||.constdata||+0x50
                  |L11.176|
0000b0  706f7274          DCB      "portal",0
0000b4  616c00  
0000b7  00                DCB      0
                  |L11.184|
                          DCD      _portal_init
                  |L11.188|
                          DCD      _portal_open
                  |L11.192|
                          DCD      _portal_close
                  |L11.196|
                          DCD      _portal_write
                  |L11.200|
                          DCD      _portal_read
                  |L11.204|
                          DCD      0xfffffffa
                  |L11.208|
0000d0  6465762d          DCB      "dev->type == RT_Device_Class_Pipe",0
0000d4  3e747970
0000d8  65203d3d
0000dc  2052545f
0000e0  44657669
0000e4  63655f43
0000e8  6c617373
0000ec  5f506970
0000f0  6500    
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L11.244|
                          DCD      _portal_tx_complete
                  |L11.248|
                          DCD      _portal_rx_indicate

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  5f706f72          DCB      0x5f,0x70,0x6f,0x72
000004  74616c5f          DCB      0x74,0x61,0x6c,0x5f
000008  696e6974          DCB      0x69,0x6e,0x69,0x74
00000c  00                DCB      0x00
                  |symbol_number.33|
00000d  5f706f            DCB      0x5f,0x70,0x6f
000010  7274616c          DCB      0x72,0x74,0x61,0x6c
000014  5f6f7065          DCB      0x5f,0x6f,0x70,0x65
000018  6e00              DCB      0x6e,0x00
                  |symbol_number.34|
00001a  5f70              DCB      0x5f,0x70
00001c  6f727461          DCB      0x6f,0x72,0x74,0x61
000020  6c5f636c          DCB      0x6c,0x5f,0x63,0x6c
000024  6f736500          DCB      0x6f,0x73,0x65,0x00
                  |symbol_number.35|
000028  5f706f72          DCB      0x5f,0x70,0x6f,0x72
00002c  74616c5f          DCB      0x74,0x61,0x6c,0x5f
000030  72785f69          DCB      0x72,0x78,0x5f,0x69
000034  6e646963          DCB      0x6e,0x64,0x69,0x63
000038  61746500          DCB      0x61,0x74,0x65,0x00
                  |symbol_number.36|
00003c  5f706f72          DCB      0x5f,0x70,0x6f,0x72
000040  74616c5f          DCB      0x74,0x61,0x6c,0x5f
000044  74785f63          DCB      0x74,0x78,0x5f,0x63
000048  6f6d706c          DCB      0x6f,0x6d,0x70,0x6c
00004c  65746500          DCB      0x65,0x74,0x65,0x00
                  |symbol_number.37|
000050  72745f70          DCB      0x72,0x74,0x5f,0x70
000054  6f727461          DCB      0x6f,0x72,0x74,0x61
000058  6c5f696e          DCB      0x6c,0x5f,0x69,0x6e
00005c  697400            DCB      0x69,0x74,0x00
