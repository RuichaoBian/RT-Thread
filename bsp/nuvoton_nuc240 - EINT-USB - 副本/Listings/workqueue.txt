; generated by Component: ARM Compiler 5.06 update 3 (build 300) Tool: ArmCC [4d35f0]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\objects\workqueue.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\workqueue.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I.\Libraries\Device\Nuvoton -I..\..\components\finsh -I.\Libraries\CMSIS\Include -I.\Libraries\StdDriver\inc -I..\..\include -I.\APP -I.\Drivers -I..\..\components\drivers\include -I..\..\components\drivers\include\drivers -I..\nuvoton_nuc240 -I.\Libraries\Device\Nuvoton\NUC230_240\Include -I..\..\include -I..\..\components\drivers\usb\usbdevice\class -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=521 -DRT_DEBUG --omf_browse=.\objects\workqueue.crf ..\..\components\drivers\src\workqueue.c]
                          THUMB

                          AREA ||i._workqueue_thread_entry||, CODE, READONLY, ALIGN=2

                  _workqueue_thread_entry PROC
;;;29     #ifdef RT_USING_HEAP
;;;30     static void _workqueue_thread_entry(void* parameter)
000000  0004              MOVS     r4,r0
;;;31     {
000002  d104              BNE      |L1.14|
;;;32         rt_base_t level;
;;;33         struct rt_work* work;
;;;34         struct rt_workqueue* queue;
;;;35     
;;;36         queue = (struct rt_workqueue*) parameter;
;;;37         RT_ASSERT(queue != RT_NULL);
000004  2225              MOVS     r2,#0x25
000006  4911              LDR      r1,|L1.76|
000008  a011              ADR      r0,|L1.80|
00000a  f7fffffe          BL       rt_assert_handler
                  |L1.14|
00000e  2600              MOVS     r6,#0
                  |L1.16|
000010  6820              LDR      r0,[r4,#0]
000012  42a0              CMP      r0,r4
000014  d105              BNE      |L1.34|
;;;38     
;;;39         while (1)
;;;40         {
;;;41             if (rt_list_isempty(&(queue->work_list)))
;;;42             {
;;;43                 /* no software timer exist, suspend self. */
;;;44                 rt_thread_suspend(rt_thread_self());
000016  f7fffffe          BL       rt_thread_self
00001a  f7fffffe          BL       rt_thread_suspend
;;;45                 rt_schedule();
00001e  f7fffffe          BL       rt_schedule
                  |L1.34|
;;;46             }
;;;47     
;;;48             /* we have work to do with. */
;;;49             level = rt_hw_interrupt_disable();
000022  f7fffffe          BL       rt_hw_interrupt_disable
;;;50             work = rt_list_entry(queue->work_list.next, struct rt_work, list);
;;;51             rt_list_remove(&(work->list));
000026  6825              LDR      r5,[r4,#0]
000028  4607              MOV      r7,r0                 ;49
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       rt_list_remove
;;;52             queue->work_current = work;
;;;53             rt_hw_interrupt_enable(level);
000030  4638              MOV      r0,r7
000032  60a5              STR      r5,[r4,#8]
000034  f7fffffe          BL       rt_hw_interrupt_enable
;;;54     
;;;55             /* do work */
;;;56             work->work_func(work, work->work_data);
000038  68aa              LDR      r2,[r5,#8]
00003a  4628              MOV      r0,r5
00003c  68e9              LDR      r1,[r5,#0xc]
00003e  4790              BLX      r2
;;;57             level = rt_hw_interrupt_disable();
000040  f7fffffe          BL       rt_hw_interrupt_disable
;;;58             /* clean current work */
;;;59             queue->work_current = RT_NULL;
;;;60             rt_hw_interrupt_enable(level);
000044  60a6              STR      r6,[r4,#8]
000046  f7fffffe          BL       rt_hw_interrupt_enable
00004a  e7e1              B        |L1.16|
;;;61         }
;;;62     }
;;;63     
                          ENDP

                  |L1.76|
                          DCD      ||.constdata||
                  |L1.80|
000050  71756575          DCB      "queue != RT_NULL",0
000054  6520213d
000058  2052545f
00005c  4e554c4c
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.rt_list_insert_after||, CODE, READONLY, ALIGN=1

                  rt_list_insert_after PROC
;;;61      */
;;;62     rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
000000  6802              LDR      r2,[r0,#0]
;;;63     {
;;;64         l->next->prev = n;
;;;65         n->next = l->next;
000002  6051              STR      r1,[r2,#4]
000004  6802              LDR      r2,[r0,#0]
;;;66     
;;;67         l->next = n;
000006  600a              STR      r2,[r1,#0]
;;;68         n->prev = l;
000008  6001              STR      r1,[r0,#0]
00000a  6048              STR      r0,[r1,#4]
;;;69     }
00000c  4770              BX       lr
;;;70     
                          ENDP


                          AREA ||i.rt_list_remove||, CODE, READONLY, ALIGN=1

                  rt_list_remove PROC
;;;90      */
;;;91     rt_inline void rt_list_remove(rt_list_t *n)
000000  c806              LDM      r0!,{r1,r2}
;;;92     {
;;;93         n->next->prev = n->prev;
000002  3808              SUBS     r0,r0,#8
000004  604a              STR      r2,[r1,#4]
000006  c806              LDM      r0!,{r1,r2}
;;;94         n->prev->next = n->next;
000008  3808              SUBS     r0,r0,#8
;;;95     
;;;96         n->next = n->prev = n;
00000a  6011              STR      r1,[r2,#0]
00000c  6040              STR      r0,[r0,#4]
00000e  6000              STR      r0,[r0,#0]
;;;97     }
000010  4770              BX       lr
;;;98     
                          ENDP


                          AREA ||i.rt_workqueue_cancel_all_work||, CODE, READONLY, ALIGN=2

                  rt_workqueue_cancel_all_work PROC
;;;176    
;;;177    rt_err_t rt_workqueue_cancel_all_work(struct rt_workqueue* queue)
000000  b570              PUSH     {r4-r6,lr}
;;;178    {
000002  0004              MOVS     r4,r0
000004  d104              BNE      |L4.16|
;;;179        struct rt_list_node *node, *next;
;;;180        RT_ASSERT(queue != RT_NULL);
000006  22b4              MOVS     r2,#0xb4
000008  4908              LDR      r1,|L4.44|
00000a  a009              ADR      r0,|L4.48|
00000c  f7fffffe          BL       rt_assert_handler
                  |L4.16|
;;;181    
;;;182        rt_enter_critical();
000010  f7fffffe          BL       rt_enter_critical
;;;183        for (node = queue->work_list.next; node != &(queue->work_list); node = next)
000014  6820              LDR      r0,[r4,#0]
000016  e003              B        |L4.32|
                  |L4.24|
;;;184        {
;;;185            next = node->next;
;;;186            rt_list_remove(node);
000018  6805              LDR      r5,[r0,#0]
00001a  f7fffffe          BL       rt_list_remove
00001e  4628              MOV      r0,r5                 ;183
                  |L4.32|
000020  42a0              CMP      r0,r4                 ;183
000022  d1f9              BNE      |L4.24|
;;;187        }
;;;188        rt_exit_critical();
000024  f7fffffe          BL       rt_exit_critical
;;;189    
;;;190        return RT_EOK;
000028  2000              MOVS     r0,#0
;;;191    }
00002a  bd70              POP      {r4-r6,pc}
;;;192    
                          ENDP

                  |L4.44|
                          DCD      ||.constdata||+0x75
                  |L4.48|
000030  71756575          DCB      "queue != RT_NULL",0
000034  6520213d
000038  2052545f
00003c  4e554c4c
000040  00      
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0

                          AREA ||i.rt_workqueue_cancel_work||, CODE, READONLY, ALIGN=2

                  rt_workqueue_cancel_work PROC
;;;157    
;;;158    rt_err_t rt_workqueue_cancel_work(struct rt_workqueue* queue, struct rt_work* work)
000000  b570              PUSH     {r4-r6,lr}
;;;159    {
000002  460d              MOV      r5,r1
000004  0006              MOVS     r6,r0
000006  d104              BNE      |L5.18|
;;;160        rt_base_t level;
;;;161    
;;;162        RT_ASSERT(queue != RT_NULL);
000008  22a2              MOVS     r2,#0xa2
00000a  490f              LDR      r1,|L5.72|
00000c  a00f              ADR      r0,|L5.76|
00000e  f7fffffe          BL       rt_assert_handler
                  |L5.18|
;;;163        RT_ASSERT(work != RT_NULL);
000012  2d00              CMP      r5,#0
000014  d104              BNE      |L5.32|
000016  22a3              MOVS     r2,#0xa3
000018  490b              LDR      r1,|L5.72|
00001a  a011              ADR      r0,|L5.96|
00001c  f7fffffe          BL       rt_assert_handler
                  |L5.32|
;;;164    
;;;165        level = rt_hw_interrupt_disable();
000020  f7fffffe          BL       rt_hw_interrupt_disable
000024  4604              MOV      r4,r0
;;;166        if (queue->work_current == work)
000026  68b0              LDR      r0,[r6,#8]
000028  42a8              CMP      r0,r5
00002a  d105              BNE      |L5.56|
;;;167        {
;;;168            rt_hw_interrupt_enable(level);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       rt_hw_interrupt_enable
;;;169            return -RT_EBUSY;
000032  2006              MOVS     r0,#6
000034  43c0              MVNS     r0,r0
;;;170        }
;;;171        rt_list_remove(&(work->list));
;;;172        rt_hw_interrupt_enable(level);
;;;173    
;;;174        return RT_EOK;
;;;175    }
000036  bd70              POP      {r4-r6,pc}
                  |L5.56|
000038  4628              MOV      r0,r5                 ;171
00003a  f7fffffe          BL       rt_list_remove
00003e  4620              MOV      r0,r4                 ;172
000040  f7fffffe          BL       rt_hw_interrupt_enable
000044  2000              MOVS     r0,#0                 ;174
000046  bd70              POP      {r4-r6,pc}
;;;176    
                          ENDP

                  |L5.72|
                          DCD      ||.constdata||+0x5c
                  |L5.76|
00004c  71756575          DCB      "queue != RT_NULL",0
000050  6520213d
000054  2052545f
000058  4e554c4c
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0
                  |L5.96|
000060  776f726b          DCB      "work != RT_NULL",0
000064  20213d20
000068  52545f4e
00006c  554c4c00

                          AREA ||i.rt_workqueue_create||, CODE, READONLY, ALIGN=2

                  rt_workqueue_create PROC
;;;63     
;;;64     struct rt_workqueue *rt_workqueue_create(const char* name, rt_uint16_t stack_size, rt_uint8_t priority)
000000  b5fe              PUSH     {r1-r7,lr}
;;;65     {
000002  4607              MOV      r7,r0
000004  4615              MOV      r5,r2
000006  460e              MOV      r6,r1
;;;66         struct rt_workqueue *queue = RT_NULL;
;;;67     
;;;68         queue = (struct rt_workqueue*)RT_KERNEL_MALLOC(sizeof(struct rt_workqueue));
000008  2010              MOVS     r0,#0x10
00000a  f7fffffe          BL       rt_malloc
00000e  0004              MOVS     r4,r0
;;;69         if (queue != RT_NULL)
000010  d011              BEQ      |L6.54|
000012  6064              STR      r4,[r4,#4]
000014  6024              STR      r4,[r4,#0]
;;;70         {
;;;71             /* initialize work list */
;;;72             rt_list_init(&(queue->work_list));
;;;73             queue->work_current = RT_NULL;
000016  2000              MOVS     r0,#0
;;;74     
;;;75             /* create the work thread */
;;;76             queue->work_thread = rt_thread_create(name, _workqueue_thread_entry, queue, stack_size, priority, 10);
000018  60a0              STR      r0,[r4,#8]
00001a  200a              MOVS     r0,#0xa
00001c  9001              STR      r0,[sp,#4]
00001e  4633              MOV      r3,r6
000020  4622              MOV      r2,r4
000022  4908              LDR      r1,|L6.68|
000024  9500              STR      r5,[sp,#0]
000026  4638              MOV      r0,r7
000028  f7fffffe          BL       rt_thread_create
;;;77             if (queue->work_thread == RT_NULL)
00002c  60e0              STR      r0,[r4,#0xc]
00002e  2800              CMP      r0,#0
000030  d003              BEQ      |L6.58|
;;;78             {
;;;79                 RT_KERNEL_FREE(queue);
;;;80                 return RT_NULL;
;;;81             }
;;;82     
;;;83             rt_thread_startup(queue->work_thread);
000032  f7fffffe          BL       rt_thread_startup
                  |L6.54|
;;;84         }
;;;85     
;;;86         return queue;
000036  4620              MOV      r0,r4
;;;87     }
000038  bdfe              POP      {r1-r7,pc}
                  |L6.58|
00003a  4620              MOV      r0,r4                 ;79
00003c  f7fffffe          BL       rt_free
000040  2000              MOVS     r0,#0                 ;80
000042  bdfe              POP      {r1-r7,pc}
;;;88     
                          ENDP

                  |L6.68|
                          DCD      _workqueue_thread_entry

                          AREA ||i.rt_workqueue_critical_work||, CODE, READONLY, ALIGN=2

                  rt_workqueue_critical_work PROC
;;;128    
;;;129    rt_err_t rt_workqueue_critical_work(struct rt_workqueue* queue, struct rt_work* work)
000000  b570              PUSH     {r4-r6,lr}
;;;130    {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
000006  d104              BNE      |L7.18|
;;;131        rt_base_t level;
;;;132        RT_ASSERT(queue != RT_NULL);
000008  2284              MOVS     r2,#0x84
00000a  4917              LDR      r1,|L7.104|
00000c  a017              ADR      r0,|L7.108|
00000e  f7fffffe          BL       rt_assert_handler
                  |L7.18|
;;;133        RT_ASSERT(work != RT_NULL);
000012  2d00              CMP      r5,#0
000014  d104              BNE      |L7.32|
000016  2285              MOVS     r2,#0x85
000018  4913              LDR      r1,|L7.104|
00001a  a019              ADR      r0,|L7.128|
00001c  f7fffffe          BL       rt_assert_handler
                  |L7.32|
;;;134    
;;;135        level = rt_hw_interrupt_disable();
000020  f7fffffe          BL       rt_hw_interrupt_disable
000024  4606              MOV      r6,r0
;;;136        if (queue->work_current == work)
000026  68a0              LDR      r0,[r4,#8]
000028  42a8              CMP      r0,r5
00002a  d105              BNE      |L7.56|
;;;137        {
;;;138            rt_hw_interrupt_enable(level);
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       rt_hw_interrupt_enable
;;;139            return -RT_EBUSY;
000032  2006              MOVS     r0,#6
000034  43c0              MVNS     r0,r0
;;;140        }
;;;141    
;;;142        /* NOTE: the work MUST be initialized firstly */
;;;143        rt_list_remove(&(work->list));
;;;144    
;;;145        rt_list_insert_after(queue->work_list.prev, &(work->list));
;;;146        if (queue->work_current == RT_NULL)
;;;147        {
;;;148            rt_hw_interrupt_enable(level);
;;;149            /* resume work thread */
;;;150            rt_thread_resume(queue->work_thread);
;;;151            rt_schedule();
;;;152        }
;;;153        else rt_hw_interrupt_enable(level);
;;;154    
;;;155        return RT_EOK;
;;;156    }
000036  bd70              POP      {r4-r6,pc}
                  |L7.56|
000038  4628              MOV      r0,r5                 ;143
00003a  f7fffffe          BL       rt_list_remove
00003e  4629              MOV      r1,r5                 ;145
000040  6860              LDR      r0,[r4,#4]            ;145
000042  f7fffffe          BL       rt_list_insert_after
000046  68a0              LDR      r0,[r4,#8]            ;146
000048  2800              CMP      r0,#0                 ;146
00004a  4630              MOV      r0,r6                 ;153
00004c  d003              BEQ      |L7.86|
00004e  f7fffffe          BL       rt_hw_interrupt_enable
                  |L7.82|
000052  2000              MOVS     r0,#0                 ;155
000054  bd70              POP      {r4-r6,pc}
                  |L7.86|
000056  f7fffffe          BL       rt_hw_interrupt_enable
00005a  68e0              LDR      r0,[r4,#0xc]          ;150
00005c  f7fffffe          BL       rt_thread_resume
000060  f7fffffe          BL       rt_schedule
000064  e7f5              B        |L7.82|
;;;157    
                          ENDP

000066  0000              DCW      0x0000
                  |L7.104|
                          DCD      ||.constdata||+0x41
                  |L7.108|
00006c  71756575          DCB      "queue != RT_NULL",0
000070  6520213d
000074  2052545f
000078  4e554c4c
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L7.128|
000080  776f726b          DCB      "work != RT_NULL",0
000084  20213d20
000088  52545f4e
00008c  554c4c00

                          AREA ||i.rt_workqueue_destroy||, CODE, READONLY, ALIGN=2

                  rt_workqueue_destroy PROC
;;;88     
;;;89     rt_err_t rt_workqueue_destroy(struct rt_workqueue* queue)
000000  b510              PUSH     {r4,lr}
;;;90     {
000002  0004              MOVS     r4,r0
000004  d104              BNE      |L8.16|
;;;91         RT_ASSERT(queue != RT_NULL);
000006  225b              MOVS     r2,#0x5b
000008  4905              LDR      r1,|L8.32|
00000a  a006              ADR      r0,|L8.36|
00000c  f7fffffe          BL       rt_assert_handler
                  |L8.16|
;;;92     
;;;93         rt_thread_delete(queue->work_thread);
000010  68e0              LDR      r0,[r4,#0xc]
000012  f7fffffe          BL       rt_thread_delete
;;;94         RT_KERNEL_FREE(queue);
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       rt_free
;;;95     
;;;96         return RT_EOK;
00001c  2000              MOVS     r0,#0
;;;97     }
00001e  bd10              POP      {r4,pc}
;;;98     
                          ENDP

                  |L8.32|
                          DCD      ||.constdata||+0x18
                  |L8.36|
000024  71756575          DCB      "queue != RT_NULL",0
000028  6520213d
00002c  2052545f
000030  4e554c4c
000034  00      
000035  00                DCB      0
000036  00                DCB      0
000037  00                DCB      0

                          AREA ||i.rt_workqueue_dowork||, CODE, READONLY, ALIGN=2

                  rt_workqueue_dowork PROC
;;;98     
;;;99     rt_err_t rt_workqueue_dowork(struct rt_workqueue* queue, struct rt_work* work)
000000  b570              PUSH     {r4-r6,lr}
;;;100    {
000002  460d              MOV      r5,r1
000004  0004              MOVS     r4,r0
000006  d104              BNE      |L9.18|
;;;101        rt_base_t level;
;;;102        RT_ASSERT(queue != RT_NULL);
000008  2266              MOVS     r2,#0x66
00000a  4917              LDR      r1,|L9.104|
00000c  a017              ADR      r0,|L9.108|
00000e  f7fffffe          BL       rt_assert_handler
                  |L9.18|
;;;103        RT_ASSERT(work != RT_NULL);
000012  2d00              CMP      r5,#0
000014  d104              BNE      |L9.32|
000016  2267              MOVS     r2,#0x67
000018  4913              LDR      r1,|L9.104|
00001a  a019              ADR      r0,|L9.128|
00001c  f7fffffe          BL       rt_assert_handler
                  |L9.32|
;;;104    
;;;105        level = rt_hw_interrupt_disable();
000020  f7fffffe          BL       rt_hw_interrupt_disable
000024  4606              MOV      r6,r0
;;;106        if (queue->work_current == work)
000026  68a0              LDR      r0,[r4,#8]
000028  42a8              CMP      r0,r5
00002a  d105              BNE      |L9.56|
;;;107        {
;;;108            rt_hw_interrupt_enable(level);
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       rt_hw_interrupt_enable
;;;109            return -RT_EBUSY;
000032  2006              MOVS     r0,#6
000034  43c0              MVNS     r0,r0
;;;110        }
;;;111    
;;;112        /* NOTE: the work MUST be initialized firstly */
;;;113        rt_list_remove(&(work->list));
;;;114    
;;;115        rt_list_insert_after(queue->work_list.prev, &(work->list));
;;;116        /* whether the workqueue is doing work */
;;;117        if (queue->work_current == RT_NULL)
;;;118        {
;;;119            rt_hw_interrupt_enable(level);
;;;120            /* resume work thread */
;;;121            rt_thread_resume(queue->work_thread);
;;;122            rt_schedule();
;;;123        }
;;;124        else rt_hw_interrupt_enable(level);
;;;125    
;;;126        return RT_EOK;
;;;127    }
000036  bd70              POP      {r4-r6,pc}
                  |L9.56|
000038  4628              MOV      r0,r5                 ;113
00003a  f7fffffe          BL       rt_list_remove
00003e  4629              MOV      r1,r5                 ;115
000040  6860              LDR      r0,[r4,#4]            ;115
000042  f7fffffe          BL       rt_list_insert_after
000046  68a0              LDR      r0,[r4,#8]            ;117
000048  2800              CMP      r0,#0                 ;117
00004a  4630              MOV      r0,r6                 ;124
00004c  d003              BEQ      |L9.86|
00004e  f7fffffe          BL       rt_hw_interrupt_enable
                  |L9.82|
000052  2000              MOVS     r0,#0                 ;126
000054  bd70              POP      {r4-r6,pc}
                  |L9.86|
000056  f7fffffe          BL       rt_hw_interrupt_enable
00005a  68e0              LDR      r0,[r4,#0xc]          ;121
00005c  f7fffffe          BL       rt_thread_resume
000060  f7fffffe          BL       rt_schedule
000064  e7f5              B        |L9.82|
;;;128    
                          ENDP

000066  0000              DCW      0x0000
                  |L9.104|
                          DCD      ||.constdata||+0x2d
                  |L9.108|
00006c  71756575          DCB      "queue != RT_NULL",0
000070  6520213d
000074  2052545f
000078  4e554c4c
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L9.128|
000080  776f726b          DCB      "work != RT_NULL",0
000084  20213d20
000088  52545f4e
00008c  554c4c00

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  5f776f72          DCB      0x5f,0x77,0x6f,0x72
000004  6b717565          DCB      0x6b,0x71,0x75,0x65
000008  75655f74          DCB      0x75,0x65,0x5f,0x74
00000c  68726561          DCB      0x68,0x72,0x65,0x61
000010  645f656e          DCB      0x64,0x5f,0x65,0x6e
000014  74727900          DCB      0x74,0x72,0x79,0x00
                  |symbol_number.30|
000018  72745f77          DCB      0x72,0x74,0x5f,0x77
00001c  6f726b71          DCB      0x6f,0x72,0x6b,0x71
000020  75657565          DCB      0x75,0x65,0x75,0x65
000024  5f646573          DCB      0x5f,0x64,0x65,0x73
000028  74726f79          DCB      0x74,0x72,0x6f,0x79
00002c  00                DCB      0x00
                  |symbol_number.31|
00002d  72745f            DCB      0x72,0x74,0x5f
000030  776f726b          DCB      0x77,0x6f,0x72,0x6b
000034  71756575          DCB      0x71,0x75,0x65,0x75
000038  655f646f          DCB      0x65,0x5f,0x64,0x6f
00003c  776f726b          DCB      0x77,0x6f,0x72,0x6b
000040  00                DCB      0x00
                  |symbol_number.32|
000041  72745f            DCB      0x72,0x74,0x5f
000044  776f726b          DCB      0x77,0x6f,0x72,0x6b
000048  71756575          DCB      0x71,0x75,0x65,0x75
00004c  655f6372          DCB      0x65,0x5f,0x63,0x72
000050  69746963          DCB      0x69,0x74,0x69,0x63
000054  616c5f77          DCB      0x61,0x6c,0x5f,0x77
000058  6f726b00          DCB      0x6f,0x72,0x6b,0x00
                  |symbol_number.33|
00005c  72745f77          DCB      0x72,0x74,0x5f,0x77
000060  6f726b71          DCB      0x6f,0x72,0x6b,0x71
000064  75657565          DCB      0x75,0x65,0x75,0x65
000068  5f63616e          DCB      0x5f,0x63,0x61,0x6e
00006c  63656c5f          DCB      0x63,0x65,0x6c,0x5f
000070  776f726b          DCB      0x77,0x6f,0x72,0x6b
000074  00                DCB      0x00
                  |symbol_number.34|
000075  72745f            DCB      0x72,0x74,0x5f
000078  776f726b          DCB      0x77,0x6f,0x72,0x6b
00007c  71756575          DCB      0x71,0x75,0x65,0x75
000080  655f6361          DCB      0x65,0x5f,0x63,0x61
000084  6e63656c          DCB      0x6e,0x63,0x65,0x6c
000088  5f616c6c          DCB      0x5f,0x61,0x6c,0x6c
00008c  5f776f72          DCB      0x5f,0x77,0x6f,0x72
000090  6b00              DCB      0x6b,0x00
